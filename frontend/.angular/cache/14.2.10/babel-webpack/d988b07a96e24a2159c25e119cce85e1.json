{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1; // For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n  constructor(url, network) {\n    // This will be added in the future; please open an issue to expedite\n    if (network === \"any\") {\n      logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"network:any\"\n      });\n    }\n\n    if (typeof url === \"string\") {\n      super(url, network);\n    } else {\n      super(\"_websocket\", network);\n    }\n\n    this._pollingInterval = -1;\n    this._wsReady = false;\n\n    if (typeof url === \"string\") {\n      defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n    } else {\n      defineReadOnly(this, \"_websocket\", url);\n    }\n\n    defineReadOnly(this, \"_requests\", {});\n    defineReadOnly(this, \"_subs\", {});\n    defineReadOnly(this, \"_subIds\", {});\n    defineReadOnly(this, \"_detectNetwork\", super.detectNetwork()); // Stall sending requests until the socket is open...\n\n    this.websocket.onopen = () => {\n      this._wsReady = true;\n      Object.keys(this._requests).forEach(id => {\n        this.websocket.send(this._requests[id].payload);\n      });\n    };\n\n    this.websocket.onmessage = messageEvent => {\n      const data = messageEvent.data;\n      const result = JSON.parse(data);\n\n      if (result.id != null) {\n        const id = String(result.id);\n        const request = this._requests[id];\n        delete this._requests[id];\n\n        if (result.result !== undefined) {\n          request.callback(null, result.result);\n          this.emit(\"debug\", {\n            action: \"response\",\n            request: JSON.parse(request.payload),\n            response: result.result,\n            provider: this\n          });\n        } else {\n          let error = null;\n\n          if (result.error) {\n            error = new Error(result.error.message || \"unknown error\");\n            defineReadOnly(error, \"code\", result.error.code || null);\n            defineReadOnly(error, \"response\", data);\n          } else {\n            error = new Error(\"unknown error\");\n          }\n\n          request.callback(error, undefined);\n          this.emit(\"debug\", {\n            action: \"response\",\n            error: error,\n            request: JSON.parse(request.payload),\n            provider: this\n          });\n        }\n      } else if (result.method === \"eth_subscription\") {\n        // Subscription...\n        const sub = this._subs[result.params.subscription];\n\n        if (sub) {\n          //this.emit.apply(this,                  );\n          sub.processFunc(result.params.result);\n        }\n      } else {\n        console.warn(\"this should not happen\");\n      }\n    }; // This Provider does not actually poll, but we want to trigger\n    // poll events for things that depend on them (like stalling for\n    // block and transaction lookups)\n\n\n    const fauxPoll = setInterval(() => {\n      this.emit(\"poll\");\n    }, 1000);\n\n    if (fauxPoll.unref) {\n      fauxPoll.unref();\n    }\n  } // Cannot narrow the type of _websocket, as that is not backwards compatible\n  // so we add a getter and let the WebSocket be a public API.\n\n\n  get websocket() {\n    return this._websocket;\n  }\n\n  detectNetwork() {\n    return this._detectNetwork;\n  }\n\n  get pollingInterval() {\n    return 0;\n  }\n\n  resetEventsBlock(blockNumber) {\n    logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"resetEventBlock\"\n    });\n  }\n\n  set pollingInterval(value) {\n    logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"setPollingInterval\"\n    });\n  }\n\n  poll() {\n    return __awaiter(this, void 0, void 0, function* () {\n      return null;\n    });\n  }\n\n  set polling(value) {\n    if (!value) {\n      return;\n    }\n\n    logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"setPolling\"\n    });\n  }\n\n  send(method, params) {\n    const rid = NextId++;\n    return new Promise((resolve, reject) => {\n      function callback(error, result) {\n        if (error) {\n          return reject(error);\n        }\n\n        return resolve(result);\n      }\n\n      const payload = JSON.stringify({\n        method: method,\n        params: params,\n        id: rid,\n        jsonrpc: \"2.0\"\n      });\n      this.emit(\"debug\", {\n        action: \"request\",\n        request: JSON.parse(payload),\n        provider: this\n      });\n      this._requests[String(rid)] = {\n        callback,\n        payload\n      };\n\n      if (this._wsReady) {\n        this.websocket.send(payload);\n      }\n    });\n  }\n\n  static defaultUrl() {\n    return \"ws:/\\/localhost:8546\";\n  }\n\n  _subscribe(tag, param, processFunc) {\n    return __awaiter(this, void 0, void 0, function* () {\n      let subIdPromise = this._subIds[tag];\n\n      if (subIdPromise == null) {\n        subIdPromise = Promise.all(param).then(param => {\n          return this.send(\"eth_subscribe\", param);\n        });\n        this._subIds[tag] = subIdPromise;\n      }\n\n      const subId = yield subIdPromise;\n      this._subs[subId] = {\n        tag,\n        processFunc\n      };\n    });\n  }\n\n  _startEvent(event) {\n    switch (event.type) {\n      case \"block\":\n        this._subscribe(\"block\", [\"newHeads\"], result => {\n          const blockNumber = BigNumber.from(result.number).toNumber();\n          this._emitted.block = blockNumber;\n          this.emit(\"block\", blockNumber);\n        });\n\n        break;\n\n      case \"pending\":\n        this._subscribe(\"pending\", [\"newPendingTransactions\"], result => {\n          this.emit(\"pending\", result);\n        });\n\n        break;\n\n      case \"filter\":\n        this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], result => {\n          if (result.removed == null) {\n            result.removed = false;\n          }\n\n          this.emit(event.filter, this.formatter.filterLog(result));\n        });\n\n        break;\n\n      case \"tx\":\n        {\n          const emitReceipt = event => {\n            const hash = event.hash;\n            this.getTransactionReceipt(hash).then(receipt => {\n              if (!receipt) {\n                return;\n              }\n\n              this.emit(hash, receipt);\n            });\n          }; // In case it is already mined\n\n\n          emitReceipt(event); // To keep things simple, we start up a single newHeads subscription\n          // to keep an eye out for transactions we are watching for.\n          // Starting a subscription for an event (i.e. \"tx\") that is already\n          // running is (basically) a nop.\n\n          this._subscribe(\"tx\", [\"newHeads\"], result => {\n            this._events.filter(e => e.type === \"tx\").forEach(emitReceipt);\n          });\n\n          break;\n        }\n      // Nothing is needed\n\n      case \"debug\":\n      case \"poll\":\n      case \"willPoll\":\n      case \"didPoll\":\n      case \"error\":\n        break;\n\n      default:\n        console.log(\"unhandled:\", event);\n        break;\n    }\n  }\n\n  _stopEvent(event) {\n    let tag = event.tag;\n\n    if (event.type === \"tx\") {\n      // There are remaining transaction event listeners\n      if (this._events.filter(e => e.type === \"tx\").length) {\n        return;\n      }\n\n      tag = \"tx\";\n    } else if (this.listenerCount(event.event)) {\n      // There are remaining event listeners\n      return;\n    }\n\n    const subId = this._subIds[tag];\n\n    if (!subId) {\n      return;\n    }\n\n    delete this._subIds[tag];\n    subId.then(subId => {\n      if (!this._subs[subId]) {\n        return;\n      }\n\n      delete this._subs[subId];\n      this.send(\"eth_unsubscribe\", [subId]);\n    });\n  }\n\n  destroy() {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Wait until we have connected before trying to disconnect\n      if (this.websocket.readyState === WebSocket.CONNECTING) {\n        yield new Promise(resolve => {\n          this.websocket.onopen = function () {\n            resolve(true);\n          };\n\n          this.websocket.onerror = function () {\n            resolve(false);\n          };\n        });\n      } // Hangup\n      // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n\n\n      this.websocket.close(1000);\n    });\n  }\n\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","BigNumber","defineReadOnly","JsonRpcProvider","WebSocket","Logger","version","logger","NextId","WebSocketProvider","constructor","url","network","throwError","errors","UNSUPPORTED_OPERATION","operation","_pollingInterval","_wsReady","connection","detectNetwork","websocket","onopen","Object","keys","_requests","forEach","id","send","payload","onmessage","messageEvent","data","JSON","parse","String","request","undefined","callback","emit","action","response","provider","error","Error","message","code","method","sub","_subs","params","subscription","processFunc","console","warn","fauxPoll","setInterval","unref","_websocket","_detectNetwork","pollingInterval","resetEventsBlock","blockNumber","poll","polling","rid","stringify","jsonrpc","defaultUrl","_subscribe","tag","param","subIdPromise","_subIds","all","subId","_startEvent","event","type","from","number","toNumber","_emitted","block","_getFilter","filter","removed","formatter","filterLog","emitReceipt","hash","getTransactionReceipt","receipt","_events","log","_stopEvent","length","listenerCount","destroy","readyState","CONNECTING","onerror","close"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/providers/lib.esm/websocket-provider.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\nlet NextId = 1;\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\nexport class WebSocketProvider extends JsonRpcProvider {\n    constructor(url, network) {\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n        if (typeof (url) === \"string\") {\n            super(url, network);\n        }\n        else {\n            super(\"_websocket\", network);\n        }\n        this._pollingInterval = -1;\n        this._wsReady = false;\n        if (typeof (url) === \"string\") {\n            defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        }\n        else {\n            defineReadOnly(this, \"_websocket\", url);\n        }\n        defineReadOnly(this, \"_requests\", {});\n        defineReadOnly(this, \"_subs\", {});\n        defineReadOnly(this, \"_subIds\", {});\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n        // Stall sending requests until the socket is open...\n        this.websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this.websocket.send(this._requests[id].payload);\n            });\n        };\n        this.websocket.onmessage = (messageEvent) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n                }\n                else {\n                    let error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(error, \"code\", result.error.code || null);\n                        defineReadOnly(error, \"response\", data);\n                    }\n                    else {\n                        error = new Error(\"unknown error\");\n                    }\n                    request.callback(error, undefined);\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n                }\n            }\n            else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result);\n                }\n            }\n            else {\n                console.warn(\"this should not happen\");\n            }\n        };\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) {\n            fauxPoll.unref();\n        }\n    }\n    // Cannot narrow the type of _websocket, as that is not backwards compatible\n    // so we add a getter and let the WebSocket be a public API.\n    get websocket() { return this._websocket; }\n    detectNetwork() {\n        return this._detectNetwork;\n    }\n    get pollingInterval() {\n        return 0;\n    }\n    resetEventsBlock(blockNumber) {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n    set pollingInterval(value) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n    poll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return null;\n        });\n    }\n    set polling(value) {\n        if (!value) {\n            return;\n        }\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n    send(method, params) {\n        const rid = NextId++;\n        return new Promise((resolve, reject) => {\n            function callback(error, result) {\n                if (error) {\n                    return reject(error);\n                }\n                return resolve(result);\n            }\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n            this._requests[String(rid)] = { callback, payload };\n            if (this._wsReady) {\n                this.websocket.send(payload);\n            }\n        });\n    }\n    static defaultUrl() {\n        return \"ws:/\\/localhost:8546\";\n    }\n    _subscribe(tag, param, processFunc) {\n        return __awaiter(this, void 0, void 0, function* () {\n            let subIdPromise = this._subIds[tag];\n            if (subIdPromise == null) {\n                subIdPromise = Promise.all(param).then((param) => {\n                    return this.send(\"eth_subscribe\", param);\n                });\n                this._subIds[tag] = subIdPromise;\n            }\n            const subId = yield subIdPromise;\n            this._subs[subId] = { tag, processFunc };\n        });\n    }\n    _startEvent(event) {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [\"newHeads\"], (result) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n            case \"pending\":\n                this._subscribe(\"pending\", [\"newPendingTransactions\"], (result) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n            case \"filter\":\n                this._subscribe(event.tag, [\"logs\", this._getFilter(event.filter)], (result) => {\n                    if (result.removed == null) {\n                        result.removed = false;\n                    }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n            case \"tx\": {\n                const emitReceipt = (event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) {\n                            return;\n                        }\n                        this.emit(hash, receipt);\n                    });\n                };\n                // In case it is already mined\n                emitReceipt(event);\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [\"newHeads\"], (result) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n    _stopEvent(event) {\n        let tag = event.tag;\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        }\n        else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n        const subId = this._subIds[tag];\n        if (!subId) {\n            return;\n        }\n        delete this._subIds[tag];\n        subId.then((subId) => {\n            if (!this._subs[subId]) {\n                return;\n            }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [subId]);\n        });\n    }\n    destroy() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Wait until we have connected before trying to disconnect\n            if (this.websocket.readyState === WebSocket.CONNECTING) {\n                yield (new Promise((resolve) => {\n                    this.websocket.onopen = function () {\n                        resolve(true);\n                    };\n                    this.websocket.onerror = function () {\n                        resolve(false);\n                    };\n                }));\n            }\n            // Hangup\n            // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n            this.websocket.close(1000);\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}