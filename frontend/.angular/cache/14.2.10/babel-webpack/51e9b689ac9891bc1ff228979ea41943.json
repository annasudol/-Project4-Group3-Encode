{"ast":null,"code":"\"use strict\";\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\n\nimport _BN from \"bn.js\";\nvar BN = _BN.BN;\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n  return value != null && (BigNumber.isBigNumber(value) || typeof value === \"number\" && value % 1 === 0 || typeof value === \"string\" && !!value.match(/^-?[0-9]+$/) || isHexString(value) || typeof value === \"bigint\" || isBytes(value));\n} // Only warn about passing 10 into radix once\n\nlet _warnedToStringRadix = false;\nexport class BigNumber {\n  constructor(constructorGuard, hex) {\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new (BigNumber)\"\n      });\n    }\n\n    this._hex = hex;\n    this._isBigNumber = true;\n    Object.freeze(this);\n  }\n\n  fromTwos(value) {\n    return toBigNumber(toBN(this).fromTwos(value));\n  }\n\n  toTwos(value) {\n    return toBigNumber(toBN(this).toTwos(value));\n  }\n\n  abs() {\n    if (this._hex[0] === \"-\") {\n      return BigNumber.from(this._hex.substring(1));\n    }\n\n    return this;\n  }\n\n  add(other) {\n    return toBigNumber(toBN(this).add(toBN(other)));\n  }\n\n  sub(other) {\n    return toBigNumber(toBN(this).sub(toBN(other)));\n  }\n\n  div(other) {\n    const o = BigNumber.from(other);\n\n    if (o.isZero()) {\n      throwFault(\"division-by-zero\", \"div\");\n    }\n\n    return toBigNumber(toBN(this).div(toBN(other)));\n  }\n\n  mul(other) {\n    return toBigNumber(toBN(this).mul(toBN(other)));\n  }\n\n  mod(other) {\n    const value = toBN(other);\n\n    if (value.isNeg()) {\n      throwFault(\"division-by-zero\", \"mod\");\n    }\n\n    return toBigNumber(toBN(this).umod(value));\n  }\n\n  pow(other) {\n    const value = toBN(other);\n\n    if (value.isNeg()) {\n      throwFault(\"negative-power\", \"pow\");\n    }\n\n    return toBigNumber(toBN(this).pow(value));\n  }\n\n  and(other) {\n    const value = toBN(other);\n\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"unbound-bitwise-result\", \"and\");\n    }\n\n    return toBigNumber(toBN(this).and(value));\n  }\n\n  or(other) {\n    const value = toBN(other);\n\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"unbound-bitwise-result\", \"or\");\n    }\n\n    return toBigNumber(toBN(this).or(value));\n  }\n\n  xor(other) {\n    const value = toBN(other);\n\n    if (this.isNegative() || value.isNeg()) {\n      throwFault(\"unbound-bitwise-result\", \"xor\");\n    }\n\n    return toBigNumber(toBN(this).xor(value));\n  }\n\n  mask(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"negative-width\", \"mask\");\n    }\n\n    return toBigNumber(toBN(this).maskn(value));\n  }\n\n  shl(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"negative-width\", \"shl\");\n    }\n\n    return toBigNumber(toBN(this).shln(value));\n  }\n\n  shr(value) {\n    if (this.isNegative() || value < 0) {\n      throwFault(\"negative-width\", \"shr\");\n    }\n\n    return toBigNumber(toBN(this).shrn(value));\n  }\n\n  eq(other) {\n    return toBN(this).eq(toBN(other));\n  }\n\n  lt(other) {\n    return toBN(this).lt(toBN(other));\n  }\n\n  lte(other) {\n    return toBN(this).lte(toBN(other));\n  }\n\n  gt(other) {\n    return toBN(this).gt(toBN(other));\n  }\n\n  gte(other) {\n    return toBN(this).gte(toBN(other));\n  }\n\n  isNegative() {\n    return this._hex[0] === \"-\";\n  }\n\n  isZero() {\n    return toBN(this).isZero();\n  }\n\n  toNumber() {\n    try {\n      return toBN(this).toNumber();\n    } catch (error) {\n      throwFault(\"overflow\", \"toNumber\", this.toString());\n    }\n\n    return null;\n  }\n\n  toBigInt() {\n    try {\n      return BigInt(this.toString());\n    } catch (e) {}\n\n    return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n      value: this.toString()\n    });\n  }\n\n  toString() {\n    // Lots of people expect this, which we do not support, so check (See: #889)\n    if (arguments.length > 0) {\n      if (arguments[0] === 10) {\n        if (!_warnedToStringRadix) {\n          _warnedToStringRadix = true;\n          logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n        }\n      } else if (arguments[0] === 16) {\n        logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n      } else {\n        logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n      }\n    }\n\n    return toBN(this).toString(10);\n  }\n\n  toHexString() {\n    return this._hex;\n  }\n\n  toJSON(key) {\n    return {\n      type: \"BigNumber\",\n      hex: this.toHexString()\n    };\n  }\n\n  static from(value) {\n    if (value instanceof BigNumber) {\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      if (value.match(/^-?0x[0-9a-f]+$/i)) {\n        return new BigNumber(_constructorGuard, toHex(value));\n      }\n\n      if (value.match(/^-?[0-9]+$/)) {\n        return new BigNumber(_constructorGuard, toHex(new BN(value)));\n      }\n\n      return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n    }\n\n    if (typeof value === \"number\") {\n      if (value % 1) {\n        throwFault(\"underflow\", \"BigNumber.from\", value);\n      }\n\n      if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n        throwFault(\"overflow\", \"BigNumber.from\", value);\n      }\n\n      return BigNumber.from(String(value));\n    }\n\n    const anyValue = value;\n\n    if (typeof anyValue === \"bigint\") {\n      return BigNumber.from(anyValue.toString());\n    }\n\n    if (isBytes(anyValue)) {\n      return BigNumber.from(hexlify(anyValue));\n    }\n\n    if (anyValue) {\n      // Hexable interface (takes priority)\n      if (anyValue.toHexString) {\n        const hex = anyValue.toHexString();\n\n        if (typeof hex === \"string\") {\n          return BigNumber.from(hex);\n        }\n      } else {\n        // For now, handle legacy JSON-ified values (goes away in v6)\n        let hex = anyValue._hex; // New-form JSON\n\n        if (hex == null && anyValue.type === \"BigNumber\") {\n          hex = anyValue.hex;\n        }\n\n        if (typeof hex === \"string\") {\n          if (isHexString(hex) || hex[0] === \"-\" && isHexString(hex.substring(1))) {\n            return BigNumber.from(hex);\n          }\n        }\n      }\n    }\n\n    return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n  }\n\n  static isBigNumber(value) {\n    return !!(value && value._isBigNumber);\n  }\n\n} // Normalize the hex string\n\nfunction toHex(value) {\n  // For BN, call on the hex string\n  if (typeof value !== \"string\") {\n    return toHex(value.toString(16));\n  } // If negative, prepend the negative sign to the normalized positive value\n\n\n  if (value[0] === \"-\") {\n    // Strip off the negative sign\n    value = value.substring(1); // Cannot have multiple negative signs (e.g. \"--0x04\")\n\n    if (value[0] === \"-\") {\n      logger.throwArgumentError(\"invalid hex\", \"value\", value);\n    } // Call toHex on the positive component\n\n\n    value = toHex(value); // Do not allow \"-0x00\"\n\n    if (value === \"0x00\") {\n      return value;\n    } // Negate the value\n\n\n    return \"-\" + value;\n  } // Add a \"0x\" prefix if missing\n\n\n  if (value.substring(0, 2) !== \"0x\") {\n    value = \"0x\" + value;\n  } // Normalize zero\n\n\n  if (value === \"0x\") {\n    return \"0x00\";\n  } // Make the string even length\n\n\n  if (value.length % 2) {\n    value = \"0x0\" + value.substring(2);\n  } // Trim to smallest even-length string\n\n\n  while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n    value = \"0x\" + value.substring(4);\n  }\n\n  return value;\n}\n\nfunction toBigNumber(value) {\n  return BigNumber.from(toHex(value));\n}\n\nfunction toBN(value) {\n  const hex = BigNumber.from(value).toHexString();\n\n  if (hex[0] === \"-\") {\n    return new BN(\"-\" + hex.substring(3), 16);\n  }\n\n  return new BN(hex.substring(2), 16);\n}\n\nfunction throwFault(fault, operation, value) {\n  const params = {\n    fault: fault,\n    operation: operation\n  };\n\n  if (value != null) {\n    params.value = value;\n  }\n\n  return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n} // value should have no prefix\n\n\nexport function _base36To16(value) {\n  return new BN(value, 36).toString(16);\n} // value should have no prefix\n\nexport function _base16To36(value) {\n  return new BN(value, 16).toString(36);\n}","map":{"version":3,"names":["_BN","BN","hexlify","isBytes","isHexString","Logger","version","logger","_constructorGuard","MAX_SAFE","isBigNumberish","value","BigNumber","isBigNumber","match","_warnedToStringRadix","constructor","constructorGuard","hex","throwError","errors","UNSUPPORTED_OPERATION","operation","_hex","_isBigNumber","Object","freeze","fromTwos","toBigNumber","toBN","toTwos","abs","from","substring","add","other","sub","div","o","isZero","throwFault","mul","mod","isNeg","umod","pow","and","isNegative","or","xor","mask","maskn","shl","shln","shr","shrn","eq","lt","lte","gt","gte","toNumber","error","toString","toBigInt","BigInt","e","arguments","length","warn","UNEXPECTED_ARGUMENT","toHexString","toJSON","key","type","toHex","throwArgumentError","String","anyValue","fault","params","NUMERIC_FAULT","_base36To16","_base16To36"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js"],"sourcesContent":["\"use strict\";\n/**\n *  BigNumber\n *\n *  A wrapper around the BN.js object. We use the BN.js library\n *  because it is used by elliptic, so it is required regardless.\n *\n */\nimport _BN from \"bn.js\";\nvar BN = _BN.BN;\nimport { hexlify, isBytes, isHexString } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nconst _constructorGuard = {};\nconst MAX_SAFE = 0x1fffffffffffff;\nexport function isBigNumberish(value) {\n    return (value != null) && (BigNumber.isBigNumber(value) ||\n        (typeof (value) === \"number\" && (value % 1) === 0) ||\n        (typeof (value) === \"string\" && !!value.match(/^-?[0-9]+$/)) ||\n        isHexString(value) ||\n        (typeof (value) === \"bigint\") ||\n        isBytes(value));\n}\n// Only warn about passing 10 into radix once\nlet _warnedToStringRadix = false;\nexport class BigNumber {\n    constructor(constructorGuard, hex) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot call constructor directly; use BigNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new (BigNumber)\"\n            });\n        }\n        this._hex = hex;\n        this._isBigNumber = true;\n        Object.freeze(this);\n    }\n    fromTwos(value) {\n        return toBigNumber(toBN(this).fromTwos(value));\n    }\n    toTwos(value) {\n        return toBigNumber(toBN(this).toTwos(value));\n    }\n    abs() {\n        if (this._hex[0] === \"-\") {\n            return BigNumber.from(this._hex.substring(1));\n        }\n        return this;\n    }\n    add(other) {\n        return toBigNumber(toBN(this).add(toBN(other)));\n    }\n    sub(other) {\n        return toBigNumber(toBN(this).sub(toBN(other)));\n    }\n    div(other) {\n        const o = BigNumber.from(other);\n        if (o.isZero()) {\n            throwFault(\"division-by-zero\", \"div\");\n        }\n        return toBigNumber(toBN(this).div(toBN(other)));\n    }\n    mul(other) {\n        return toBigNumber(toBN(this).mul(toBN(other)));\n    }\n    mod(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"division-by-zero\", \"mod\");\n        }\n        return toBigNumber(toBN(this).umod(value));\n    }\n    pow(other) {\n        const value = toBN(other);\n        if (value.isNeg()) {\n            throwFault(\"negative-power\", \"pow\");\n        }\n        return toBigNumber(toBN(this).pow(value));\n    }\n    and(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"and\");\n        }\n        return toBigNumber(toBN(this).and(value));\n    }\n    or(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"or\");\n        }\n        return toBigNumber(toBN(this).or(value));\n    }\n    xor(other) {\n        const value = toBN(other);\n        if (this.isNegative() || value.isNeg()) {\n            throwFault(\"unbound-bitwise-result\", \"xor\");\n        }\n        return toBigNumber(toBN(this).xor(value));\n    }\n    mask(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"mask\");\n        }\n        return toBigNumber(toBN(this).maskn(value));\n    }\n    shl(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shl\");\n        }\n        return toBigNumber(toBN(this).shln(value));\n    }\n    shr(value) {\n        if (this.isNegative() || value < 0) {\n            throwFault(\"negative-width\", \"shr\");\n        }\n        return toBigNumber(toBN(this).shrn(value));\n    }\n    eq(other) {\n        return toBN(this).eq(toBN(other));\n    }\n    lt(other) {\n        return toBN(this).lt(toBN(other));\n    }\n    lte(other) {\n        return toBN(this).lte(toBN(other));\n    }\n    gt(other) {\n        return toBN(this).gt(toBN(other));\n    }\n    gte(other) {\n        return toBN(this).gte(toBN(other));\n    }\n    isNegative() {\n        return (this._hex[0] === \"-\");\n    }\n    isZero() {\n        return toBN(this).isZero();\n    }\n    toNumber() {\n        try {\n            return toBN(this).toNumber();\n        }\n        catch (error) {\n            throwFault(\"overflow\", \"toNumber\", this.toString());\n        }\n        return null;\n    }\n    toBigInt() {\n        try {\n            return BigInt(this.toString());\n        }\n        catch (e) { }\n        return logger.throwError(\"this platform does not support BigInt\", Logger.errors.UNSUPPORTED_OPERATION, {\n            value: this.toString()\n        });\n    }\n    toString() {\n        // Lots of people expect this, which we do not support, so check (See: #889)\n        if (arguments.length > 0) {\n            if (arguments[0] === 10) {\n                if (!_warnedToStringRadix) {\n                    _warnedToStringRadix = true;\n                    logger.warn(\"BigNumber.toString does not accept any parameters; base-10 is assumed\");\n                }\n            }\n            else if (arguments[0] === 16) {\n                logger.throwError(\"BigNumber.toString does not accept any parameters; use bigNumber.toHexString()\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n            else {\n                logger.throwError(\"BigNumber.toString does not accept parameters\", Logger.errors.UNEXPECTED_ARGUMENT, {});\n            }\n        }\n        return toBN(this).toString(10);\n    }\n    toHexString() {\n        return this._hex;\n    }\n    toJSON(key) {\n        return { type: \"BigNumber\", hex: this.toHexString() };\n    }\n    static from(value) {\n        if (value instanceof BigNumber) {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            if (value.match(/^-?0x[0-9a-f]+$/i)) {\n                return new BigNumber(_constructorGuard, toHex(value));\n            }\n            if (value.match(/^-?[0-9]+$/)) {\n                return new BigNumber(_constructorGuard, toHex(new BN(value)));\n            }\n            return logger.throwArgumentError(\"invalid BigNumber string\", \"value\", value);\n        }\n        if (typeof (value) === \"number\") {\n            if (value % 1) {\n                throwFault(\"underflow\", \"BigNumber.from\", value);\n            }\n            if (value >= MAX_SAFE || value <= -MAX_SAFE) {\n                throwFault(\"overflow\", \"BigNumber.from\", value);\n            }\n            return BigNumber.from(String(value));\n        }\n        const anyValue = value;\n        if (typeof (anyValue) === \"bigint\") {\n            return BigNumber.from(anyValue.toString());\n        }\n        if (isBytes(anyValue)) {\n            return BigNumber.from(hexlify(anyValue));\n        }\n        if (anyValue) {\n            // Hexable interface (takes priority)\n            if (anyValue.toHexString) {\n                const hex = anyValue.toHexString();\n                if (typeof (hex) === \"string\") {\n                    return BigNumber.from(hex);\n                }\n            }\n            else {\n                // For now, handle legacy JSON-ified values (goes away in v6)\n                let hex = anyValue._hex;\n                // New-form JSON\n                if (hex == null && anyValue.type === \"BigNumber\") {\n                    hex = anyValue.hex;\n                }\n                if (typeof (hex) === \"string\") {\n                    if (isHexString(hex) || (hex[0] === \"-\" && isHexString(hex.substring(1)))) {\n                        return BigNumber.from(hex);\n                    }\n                }\n            }\n        }\n        return logger.throwArgumentError(\"invalid BigNumber value\", \"value\", value);\n    }\n    static isBigNumber(value) {\n        return !!(value && value._isBigNumber);\n    }\n}\n// Normalize the hex string\nfunction toHex(value) {\n    // For BN, call on the hex string\n    if (typeof (value) !== \"string\") {\n        return toHex(value.toString(16));\n    }\n    // If negative, prepend the negative sign to the normalized positive value\n    if (value[0] === \"-\") {\n        // Strip off the negative sign\n        value = value.substring(1);\n        // Cannot have multiple negative signs (e.g. \"--0x04\")\n        if (value[0] === \"-\") {\n            logger.throwArgumentError(\"invalid hex\", \"value\", value);\n        }\n        // Call toHex on the positive component\n        value = toHex(value);\n        // Do not allow \"-0x00\"\n        if (value === \"0x00\") {\n            return value;\n        }\n        // Negate the value\n        return \"-\" + value;\n    }\n    // Add a \"0x\" prefix if missing\n    if (value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n    }\n    // Normalize zero\n    if (value === \"0x\") {\n        return \"0x00\";\n    }\n    // Make the string even length\n    if (value.length % 2) {\n        value = \"0x0\" + value.substring(2);\n    }\n    // Trim to smallest even-length string\n    while (value.length > 4 && value.substring(0, 4) === \"0x00\") {\n        value = \"0x\" + value.substring(4);\n    }\n    return value;\n}\nfunction toBigNumber(value) {\n    return BigNumber.from(toHex(value));\n}\nfunction toBN(value) {\n    const hex = BigNumber.from(value).toHexString();\n    if (hex[0] === \"-\") {\n        return (new BN(\"-\" + hex.substring(3), 16));\n    }\n    return new BN(hex.substring(2), 16);\n}\nfunction throwFault(fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value != null) {\n        params.value = value;\n    }\n    return logger.throwError(fault, Logger.errors.NUMERIC_FAULT, params);\n}\n// value should have no prefix\nexport function _base36To16(value) {\n    return (new BN(value, 36)).toString(16);\n}\n// value should have no prefix\nexport function _base16To36(value) {\n    return (new BN(value, 16)).toString(36);\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAOA,GAAP,MAAgB,OAAhB;AACA,IAAIC,EAAE,GAAGD,GAAG,CAACC,EAAb;AACA,SAASC,OAAT,EAAkBC,OAAlB,EAA2BC,WAA3B,QAA8C,sBAA9C;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AACA,MAAME,iBAAiB,GAAG,EAA1B;AACA,MAAMC,QAAQ,GAAG,gBAAjB;AACA,OAAO,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;EAClC,OAAQA,KAAK,IAAI,IAAV,KAAoBC,SAAS,CAACC,WAAV,CAAsBF,KAAtB,KACtB,OAAQA,KAAR,KAAmB,QAAnB,IAAgCA,KAAK,GAAG,CAAT,KAAgB,CADzB,IAEtB,OAAQA,KAAR,KAAmB,QAAnB,IAA+B,CAAC,CAACA,KAAK,CAACG,KAAN,CAAY,YAAZ,CAFX,IAGvBV,WAAW,CAACO,KAAD,CAHY,IAItB,OAAQA,KAAR,KAAmB,QAJG,IAKvBR,OAAO,CAACQ,KAAD,CALJ,CAAP;AAMH,C,CACD;;AACA,IAAII,oBAAoB,GAAG,KAA3B;AACA,OAAO,MAAMH,SAAN,CAAgB;EACnBI,WAAW,CAACC,gBAAD,EAAmBC,GAAnB,EAAwB;IAC/B,IAAID,gBAAgB,KAAKT,iBAAzB,EAA4C;MACxCD,MAAM,CAACY,UAAP,CAAkB,sDAAlB,EAA0Ed,MAAM,CAACe,MAAP,CAAcC,qBAAxF,EAA+G;QAC3GC,SAAS,EAAE;MADgG,CAA/G;IAGH;;IACD,KAAKC,IAAL,GAAYL,GAAZ;IACA,KAAKM,YAAL,GAAoB,IAApB;IACAC,MAAM,CAACC,MAAP,CAAc,IAAd;EACH;;EACDC,QAAQ,CAAChB,KAAD,EAAQ;IACZ,OAAOiB,WAAW,CAACC,IAAI,CAAC,IAAD,CAAJ,CAAWF,QAAX,CAAoBhB,KAApB,CAAD,CAAlB;EACH;;EACDmB,MAAM,CAACnB,KAAD,EAAQ;IACV,OAAOiB,WAAW,CAACC,IAAI,CAAC,IAAD,CAAJ,CAAWC,MAAX,CAAkBnB,KAAlB,CAAD,CAAlB;EACH;;EACDoB,GAAG,GAAG;IACF,IAAI,KAAKR,IAAL,CAAU,CAAV,MAAiB,GAArB,EAA0B;MACtB,OAAOX,SAAS,CAACoB,IAAV,CAAe,KAAKT,IAAL,CAAUU,SAAV,CAAoB,CAApB,CAAf,CAAP;IACH;;IACD,OAAO,IAAP;EACH;;EACDC,GAAG,CAACC,KAAD,EAAQ;IACP,OAAOP,WAAW,CAACC,IAAI,CAAC,IAAD,CAAJ,CAAWK,GAAX,CAAeL,IAAI,CAACM,KAAD,CAAnB,CAAD,CAAlB;EACH;;EACDC,GAAG,CAACD,KAAD,EAAQ;IACP,OAAOP,WAAW,CAACC,IAAI,CAAC,IAAD,CAAJ,CAAWO,GAAX,CAAeP,IAAI,CAACM,KAAD,CAAnB,CAAD,CAAlB;EACH;;EACDE,GAAG,CAACF,KAAD,EAAQ;IACP,MAAMG,CAAC,GAAG1B,SAAS,CAACoB,IAAV,CAAeG,KAAf,CAAV;;IACA,IAAIG,CAAC,CAACC,MAAF,EAAJ,EAAgB;MACZC,UAAU,CAAC,kBAAD,EAAqB,KAArB,CAAV;IACH;;IACD,OAAOZ,WAAW,CAACC,IAAI,CAAC,IAAD,CAAJ,CAAWQ,GAAX,CAAeR,IAAI,CAACM,KAAD,CAAnB,CAAD,CAAlB;EACH;;EACDM,GAAG,CAACN,KAAD,EAAQ;IACP,OAAOP,WAAW,CAACC,IAAI,CAAC,IAAD,CAAJ,CAAWY,GAAX,CAAeZ,IAAI,CAACM,KAAD,CAAnB,CAAD,CAAlB;EACH;;EACDO,GAAG,CAACP,KAAD,EAAQ;IACP,MAAMxB,KAAK,GAAGkB,IAAI,CAACM,KAAD,CAAlB;;IACA,IAAIxB,KAAK,CAACgC,KAAN,EAAJ,EAAmB;MACfH,UAAU,CAAC,kBAAD,EAAqB,KAArB,CAAV;IACH;;IACD,OAAOZ,WAAW,CAACC,IAAI,CAAC,IAAD,CAAJ,CAAWe,IAAX,CAAgBjC,KAAhB,CAAD,CAAlB;EACH;;EACDkC,GAAG,CAACV,KAAD,EAAQ;IACP,MAAMxB,KAAK,GAAGkB,IAAI,CAACM,KAAD,CAAlB;;IACA,IAAIxB,KAAK,CAACgC,KAAN,EAAJ,EAAmB;MACfH,UAAU,CAAC,gBAAD,EAAmB,KAAnB,CAAV;IACH;;IACD,OAAOZ,WAAW,CAACC,IAAI,CAAC,IAAD,CAAJ,CAAWgB,GAAX,CAAelC,KAAf,CAAD,CAAlB;EACH;;EACDmC,GAAG,CAACX,KAAD,EAAQ;IACP,MAAMxB,KAAK,GAAGkB,IAAI,CAACM,KAAD,CAAlB;;IACA,IAAI,KAAKY,UAAL,MAAqBpC,KAAK,CAACgC,KAAN,EAAzB,EAAwC;MACpCH,UAAU,CAAC,wBAAD,EAA2B,KAA3B,CAAV;IACH;;IACD,OAAOZ,WAAW,CAACC,IAAI,CAAC,IAAD,CAAJ,CAAWiB,GAAX,CAAenC,KAAf,CAAD,CAAlB;EACH;;EACDqC,EAAE,CAACb,KAAD,EAAQ;IACN,MAAMxB,KAAK,GAAGkB,IAAI,CAACM,KAAD,CAAlB;;IACA,IAAI,KAAKY,UAAL,MAAqBpC,KAAK,CAACgC,KAAN,EAAzB,EAAwC;MACpCH,UAAU,CAAC,wBAAD,EAA2B,IAA3B,CAAV;IACH;;IACD,OAAOZ,WAAW,CAACC,IAAI,CAAC,IAAD,CAAJ,CAAWmB,EAAX,CAAcrC,KAAd,CAAD,CAAlB;EACH;;EACDsC,GAAG,CAACd,KAAD,EAAQ;IACP,MAAMxB,KAAK,GAAGkB,IAAI,CAACM,KAAD,CAAlB;;IACA,IAAI,KAAKY,UAAL,MAAqBpC,KAAK,CAACgC,KAAN,EAAzB,EAAwC;MACpCH,UAAU,CAAC,wBAAD,EAA2B,KAA3B,CAAV;IACH;;IACD,OAAOZ,WAAW,CAACC,IAAI,CAAC,IAAD,CAAJ,CAAWoB,GAAX,CAAetC,KAAf,CAAD,CAAlB;EACH;;EACDuC,IAAI,CAACvC,KAAD,EAAQ;IACR,IAAI,KAAKoC,UAAL,MAAqBpC,KAAK,GAAG,CAAjC,EAAoC;MAChC6B,UAAU,CAAC,gBAAD,EAAmB,MAAnB,CAAV;IACH;;IACD,OAAOZ,WAAW,CAACC,IAAI,CAAC,IAAD,CAAJ,CAAWsB,KAAX,CAAiBxC,KAAjB,CAAD,CAAlB;EACH;;EACDyC,GAAG,CAACzC,KAAD,EAAQ;IACP,IAAI,KAAKoC,UAAL,MAAqBpC,KAAK,GAAG,CAAjC,EAAoC;MAChC6B,UAAU,CAAC,gBAAD,EAAmB,KAAnB,CAAV;IACH;;IACD,OAAOZ,WAAW,CAACC,IAAI,CAAC,IAAD,CAAJ,CAAWwB,IAAX,CAAgB1C,KAAhB,CAAD,CAAlB;EACH;;EACD2C,GAAG,CAAC3C,KAAD,EAAQ;IACP,IAAI,KAAKoC,UAAL,MAAqBpC,KAAK,GAAG,CAAjC,EAAoC;MAChC6B,UAAU,CAAC,gBAAD,EAAmB,KAAnB,CAAV;IACH;;IACD,OAAOZ,WAAW,CAACC,IAAI,CAAC,IAAD,CAAJ,CAAW0B,IAAX,CAAgB5C,KAAhB,CAAD,CAAlB;EACH;;EACD6C,EAAE,CAACrB,KAAD,EAAQ;IACN,OAAON,IAAI,CAAC,IAAD,CAAJ,CAAW2B,EAAX,CAAc3B,IAAI,CAACM,KAAD,CAAlB,CAAP;EACH;;EACDsB,EAAE,CAACtB,KAAD,EAAQ;IACN,OAAON,IAAI,CAAC,IAAD,CAAJ,CAAW4B,EAAX,CAAc5B,IAAI,CAACM,KAAD,CAAlB,CAAP;EACH;;EACDuB,GAAG,CAACvB,KAAD,EAAQ;IACP,OAAON,IAAI,CAAC,IAAD,CAAJ,CAAW6B,GAAX,CAAe7B,IAAI,CAACM,KAAD,CAAnB,CAAP;EACH;;EACDwB,EAAE,CAACxB,KAAD,EAAQ;IACN,OAAON,IAAI,CAAC,IAAD,CAAJ,CAAW8B,EAAX,CAAc9B,IAAI,CAACM,KAAD,CAAlB,CAAP;EACH;;EACDyB,GAAG,CAACzB,KAAD,EAAQ;IACP,OAAON,IAAI,CAAC,IAAD,CAAJ,CAAW+B,GAAX,CAAe/B,IAAI,CAACM,KAAD,CAAnB,CAAP;EACH;;EACDY,UAAU,GAAG;IACT,OAAQ,KAAKxB,IAAL,CAAU,CAAV,MAAiB,GAAzB;EACH;;EACDgB,MAAM,GAAG;IACL,OAAOV,IAAI,CAAC,IAAD,CAAJ,CAAWU,MAAX,EAAP;EACH;;EACDsB,QAAQ,GAAG;IACP,IAAI;MACA,OAAOhC,IAAI,CAAC,IAAD,CAAJ,CAAWgC,QAAX,EAAP;IACH,CAFD,CAGA,OAAOC,KAAP,EAAc;MACVtB,UAAU,CAAC,UAAD,EAAa,UAAb,EAAyB,KAAKuB,QAAL,EAAzB,CAAV;IACH;;IACD,OAAO,IAAP;EACH;;EACDC,QAAQ,GAAG;IACP,IAAI;MACA,OAAOC,MAAM,CAAC,KAAKF,QAAL,EAAD,CAAb;IACH,CAFD,CAGA,OAAOG,CAAP,EAAU,CAAG;;IACb,OAAO3D,MAAM,CAACY,UAAP,CAAkB,uCAAlB,EAA2Dd,MAAM,CAACe,MAAP,CAAcC,qBAAzE,EAAgG;MACnGV,KAAK,EAAE,KAAKoD,QAAL;IAD4F,CAAhG,CAAP;EAGH;;EACDA,QAAQ,GAAG;IACP;IACA,IAAII,SAAS,CAACC,MAAV,GAAmB,CAAvB,EAA0B;MACtB,IAAID,SAAS,CAAC,CAAD,CAAT,KAAiB,EAArB,EAAyB;QACrB,IAAI,CAACpD,oBAAL,EAA2B;UACvBA,oBAAoB,GAAG,IAAvB;UACAR,MAAM,CAAC8D,IAAP,CAAY,uEAAZ;QACH;MACJ,CALD,MAMK,IAAIF,SAAS,CAAC,CAAD,CAAT,KAAiB,EAArB,EAAyB;QAC1B5D,MAAM,CAACY,UAAP,CAAkB,gFAAlB,EAAoGd,MAAM,CAACe,MAAP,CAAckD,mBAAlH,EAAuI,EAAvI;MACH,CAFI,MAGA;QACD/D,MAAM,CAACY,UAAP,CAAkB,+CAAlB,EAAmEd,MAAM,CAACe,MAAP,CAAckD,mBAAjF,EAAsG,EAAtG;MACH;IACJ;;IACD,OAAOzC,IAAI,CAAC,IAAD,CAAJ,CAAWkC,QAAX,CAAoB,EAApB,CAAP;EACH;;EACDQ,WAAW,GAAG;IACV,OAAO,KAAKhD,IAAZ;EACH;;EACDiD,MAAM,CAACC,GAAD,EAAM;IACR,OAAO;MAAEC,IAAI,EAAE,WAAR;MAAqBxD,GAAG,EAAE,KAAKqD,WAAL;IAA1B,CAAP;EACH;;EACU,OAAJvC,IAAI,CAACrB,KAAD,EAAQ;IACf,IAAIA,KAAK,YAAYC,SAArB,EAAgC;MAC5B,OAAOD,KAAP;IACH;;IACD,IAAI,OAAQA,KAAR,KAAmB,QAAvB,EAAiC;MAC7B,IAAIA,KAAK,CAACG,KAAN,CAAY,kBAAZ,CAAJ,EAAqC;QACjC,OAAO,IAAIF,SAAJ,CAAcJ,iBAAd,EAAiCmE,KAAK,CAAChE,KAAD,CAAtC,CAAP;MACH;;MACD,IAAIA,KAAK,CAACG,KAAN,CAAY,YAAZ,CAAJ,EAA+B;QAC3B,OAAO,IAAIF,SAAJ,CAAcJ,iBAAd,EAAiCmE,KAAK,CAAC,IAAI1E,EAAJ,CAAOU,KAAP,CAAD,CAAtC,CAAP;MACH;;MACD,OAAOJ,MAAM,CAACqE,kBAAP,CAA0B,0BAA1B,EAAsD,OAAtD,EAA+DjE,KAA/D,CAAP;IACH;;IACD,IAAI,OAAQA,KAAR,KAAmB,QAAvB,EAAiC;MAC7B,IAAIA,KAAK,GAAG,CAAZ,EAAe;QACX6B,UAAU,CAAC,WAAD,EAAc,gBAAd,EAAgC7B,KAAhC,CAAV;MACH;;MACD,IAAIA,KAAK,IAAIF,QAAT,IAAqBE,KAAK,IAAI,CAACF,QAAnC,EAA6C;QACzC+B,UAAU,CAAC,UAAD,EAAa,gBAAb,EAA+B7B,KAA/B,CAAV;MACH;;MACD,OAAOC,SAAS,CAACoB,IAAV,CAAe6C,MAAM,CAAClE,KAAD,CAArB,CAAP;IACH;;IACD,MAAMmE,QAAQ,GAAGnE,KAAjB;;IACA,IAAI,OAAQmE,QAAR,KAAsB,QAA1B,EAAoC;MAChC,OAAOlE,SAAS,CAACoB,IAAV,CAAe8C,QAAQ,CAACf,QAAT,EAAf,CAAP;IACH;;IACD,IAAI5D,OAAO,CAAC2E,QAAD,CAAX,EAAuB;MACnB,OAAOlE,SAAS,CAACoB,IAAV,CAAe9B,OAAO,CAAC4E,QAAD,CAAtB,CAAP;IACH;;IACD,IAAIA,QAAJ,EAAc;MACV;MACA,IAAIA,QAAQ,CAACP,WAAb,EAA0B;QACtB,MAAMrD,GAAG,GAAG4D,QAAQ,CAACP,WAAT,EAAZ;;QACA,IAAI,OAAQrD,GAAR,KAAiB,QAArB,EAA+B;UAC3B,OAAON,SAAS,CAACoB,IAAV,CAAed,GAAf,CAAP;QACH;MACJ,CALD,MAMK;QACD;QACA,IAAIA,GAAG,GAAG4D,QAAQ,CAACvD,IAAnB,CAFC,CAGD;;QACA,IAAIL,GAAG,IAAI,IAAP,IAAe4D,QAAQ,CAACJ,IAAT,KAAkB,WAArC,EAAkD;UAC9CxD,GAAG,GAAG4D,QAAQ,CAAC5D,GAAf;QACH;;QACD,IAAI,OAAQA,GAAR,KAAiB,QAArB,EAA+B;UAC3B,IAAId,WAAW,CAACc,GAAD,CAAX,IAAqBA,GAAG,CAAC,CAAD,CAAH,KAAW,GAAX,IAAkBd,WAAW,CAACc,GAAG,CAACe,SAAJ,CAAc,CAAd,CAAD,CAAtD,EAA2E;YACvE,OAAOrB,SAAS,CAACoB,IAAV,CAAed,GAAf,CAAP;UACH;QACJ;MACJ;IACJ;;IACD,OAAOX,MAAM,CAACqE,kBAAP,CAA0B,yBAA1B,EAAqD,OAArD,EAA8DjE,KAA9D,CAAP;EACH;;EACiB,OAAXE,WAAW,CAACF,KAAD,EAAQ;IACtB,OAAO,CAAC,EAAEA,KAAK,IAAIA,KAAK,CAACa,YAAjB,CAAR;EACH;;AAlNkB,C,CAoNvB;;AACA,SAASmD,KAAT,CAAehE,KAAf,EAAsB;EAClB;EACA,IAAI,OAAQA,KAAR,KAAmB,QAAvB,EAAiC;IAC7B,OAAOgE,KAAK,CAAChE,KAAK,CAACoD,QAAN,CAAe,EAAf,CAAD,CAAZ;EACH,CAJiB,CAKlB;;;EACA,IAAIpD,KAAK,CAAC,CAAD,CAAL,KAAa,GAAjB,EAAsB;IAClB;IACAA,KAAK,GAAGA,KAAK,CAACsB,SAAN,CAAgB,CAAhB,CAAR,CAFkB,CAGlB;;IACA,IAAItB,KAAK,CAAC,CAAD,CAAL,KAAa,GAAjB,EAAsB;MAClBJ,MAAM,CAACqE,kBAAP,CAA0B,aAA1B,EAAyC,OAAzC,EAAkDjE,KAAlD;IACH,CANiB,CAOlB;;;IACAA,KAAK,GAAGgE,KAAK,CAAChE,KAAD,CAAb,CARkB,CASlB;;IACA,IAAIA,KAAK,KAAK,MAAd,EAAsB;MAClB,OAAOA,KAAP;IACH,CAZiB,CAalB;;;IACA,OAAO,MAAMA,KAAb;EACH,CArBiB,CAsBlB;;;EACA,IAAIA,KAAK,CAACsB,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,IAA9B,EAAoC;IAChCtB,KAAK,GAAG,OAAOA,KAAf;EACH,CAzBiB,CA0BlB;;;EACA,IAAIA,KAAK,KAAK,IAAd,EAAoB;IAChB,OAAO,MAAP;EACH,CA7BiB,CA8BlB;;;EACA,IAAIA,KAAK,CAACyD,MAAN,GAAe,CAAnB,EAAsB;IAClBzD,KAAK,GAAG,QAAQA,KAAK,CAACsB,SAAN,CAAgB,CAAhB,CAAhB;EACH,CAjCiB,CAkClB;;;EACA,OAAOtB,KAAK,CAACyD,MAAN,GAAe,CAAf,IAAoBzD,KAAK,CAACsB,SAAN,CAAgB,CAAhB,EAAmB,CAAnB,MAA0B,MAArD,EAA6D;IACzDtB,KAAK,GAAG,OAAOA,KAAK,CAACsB,SAAN,CAAgB,CAAhB,CAAf;EACH;;EACD,OAAOtB,KAAP;AACH;;AACD,SAASiB,WAAT,CAAqBjB,KAArB,EAA4B;EACxB,OAAOC,SAAS,CAACoB,IAAV,CAAe2C,KAAK,CAAChE,KAAD,CAApB,CAAP;AACH;;AACD,SAASkB,IAAT,CAAclB,KAAd,EAAqB;EACjB,MAAMO,GAAG,GAAGN,SAAS,CAACoB,IAAV,CAAerB,KAAf,EAAsB4D,WAAtB,EAAZ;;EACA,IAAIrD,GAAG,CAAC,CAAD,CAAH,KAAW,GAAf,EAAoB;IAChB,OAAQ,IAAIjB,EAAJ,CAAO,MAAMiB,GAAG,CAACe,SAAJ,CAAc,CAAd,CAAb,EAA+B,EAA/B,CAAR;EACH;;EACD,OAAO,IAAIhC,EAAJ,CAAOiB,GAAG,CAACe,SAAJ,CAAc,CAAd,CAAP,EAAyB,EAAzB,CAAP;AACH;;AACD,SAASO,UAAT,CAAoBuC,KAApB,EAA2BzD,SAA3B,EAAsCX,KAAtC,EAA6C;EACzC,MAAMqE,MAAM,GAAG;IAAED,KAAK,EAAEA,KAAT;IAAgBzD,SAAS,EAAEA;EAA3B,CAAf;;EACA,IAAIX,KAAK,IAAI,IAAb,EAAmB;IACfqE,MAAM,CAACrE,KAAP,GAAeA,KAAf;EACH;;EACD,OAAOJ,MAAM,CAACY,UAAP,CAAkB4D,KAAlB,EAAyB1E,MAAM,CAACe,MAAP,CAAc6D,aAAvC,EAAsDD,MAAtD,CAAP;AACH,C,CACD;;;AACA,OAAO,SAASE,WAAT,CAAqBvE,KAArB,EAA4B;EAC/B,OAAQ,IAAIV,EAAJ,CAAOU,KAAP,EAAc,EAAd,CAAD,CAAoBoD,QAApB,CAA6B,EAA7B,CAAP;AACH,C,CACD;;AACA,OAAO,SAASoB,WAAT,CAAqBxE,KAArB,EAA4B;EAC/B,OAAQ,IAAIV,EAAJ,CAAOU,KAAP,EAAc,EAAd,CAAD,CAAoBoD,QAApB,CAA6B,EAA7B,CAAP;AACH"},"metadata":{},"sourceType":"module"}