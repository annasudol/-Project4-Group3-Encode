{"ast":null,"code":"\"use strict\";\n\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n  constructor() {\n    this.formats = this.getDefaultFormats();\n  }\n\n  getDefaultFormats() {\n    const formats = {};\n    const address = this.address.bind(this);\n    const bigNumber = this.bigNumber.bind(this);\n    const blockTag = this.blockTag.bind(this);\n    const data = this.data.bind(this);\n    const hash = this.hash.bind(this);\n    const hex = this.hex.bind(this);\n    const number = this.number.bind(this);\n    const type = this.type.bind(this);\n\n    const strictData = v => {\n      return this.data(v, true);\n    };\n\n    formats.transaction = {\n      hash: hash,\n      type: type,\n      accessList: Formatter.allowNull(this.accessList.bind(this), null),\n      blockHash: Formatter.allowNull(hash, null),\n      blockNumber: Formatter.allowNull(number, null),\n      transactionIndex: Formatter.allowNull(number, null),\n      confirmations: Formatter.allowNull(number, null),\n      from: address,\n      // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n      // must be set\n      gasPrice: Formatter.allowNull(bigNumber),\n      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n      maxFeePerGas: Formatter.allowNull(bigNumber),\n      gasLimit: bigNumber,\n      to: Formatter.allowNull(address, null),\n      value: bigNumber,\n      nonce: number,\n      data: data,\n      r: Formatter.allowNull(this.uint256),\n      s: Formatter.allowNull(this.uint256),\n      v: Formatter.allowNull(number),\n      creates: Formatter.allowNull(address, null),\n      raw: Formatter.allowNull(data)\n    };\n    formats.transactionRequest = {\n      from: Formatter.allowNull(address),\n      nonce: Formatter.allowNull(number),\n      gasLimit: Formatter.allowNull(bigNumber),\n      gasPrice: Formatter.allowNull(bigNumber),\n      maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n      maxFeePerGas: Formatter.allowNull(bigNumber),\n      to: Formatter.allowNull(address),\n      value: Formatter.allowNull(bigNumber),\n      data: Formatter.allowNull(strictData),\n      type: Formatter.allowNull(number),\n      accessList: Formatter.allowNull(this.accessList.bind(this), null)\n    };\n    formats.receiptLog = {\n      transactionIndex: number,\n      blockNumber: number,\n      transactionHash: hash,\n      address: address,\n      topics: Formatter.arrayOf(hash),\n      data: data,\n      logIndex: number,\n      blockHash: hash\n    };\n    formats.receipt = {\n      to: Formatter.allowNull(this.address, null),\n      from: Formatter.allowNull(this.address, null),\n      contractAddress: Formatter.allowNull(address, null),\n      transactionIndex: number,\n      // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n      root: Formatter.allowNull(hex),\n      gasUsed: bigNumber,\n      logsBloom: Formatter.allowNull(data),\n      blockHash: hash,\n      transactionHash: hash,\n      logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n      blockNumber: number,\n      confirmations: Formatter.allowNull(number, null),\n      cumulativeGasUsed: bigNumber,\n      effectiveGasPrice: Formatter.allowNull(bigNumber),\n      status: Formatter.allowNull(number),\n      type: type\n    };\n    formats.block = {\n      hash: Formatter.allowNull(hash),\n      parentHash: hash,\n      number: number,\n      timestamp: number,\n      nonce: Formatter.allowNull(hex),\n      difficulty: this.difficulty.bind(this),\n      gasLimit: bigNumber,\n      gasUsed: bigNumber,\n      miner: Formatter.allowNull(address),\n      extraData: data,\n      transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n      baseFeePerGas: Formatter.allowNull(bigNumber)\n    };\n    formats.blockWithTransactions = shallowCopy(formats.block);\n    formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n    formats.filter = {\n      fromBlock: Formatter.allowNull(blockTag, undefined),\n      toBlock: Formatter.allowNull(blockTag, undefined),\n      blockHash: Formatter.allowNull(hash, undefined),\n      address: Formatter.allowNull(address, undefined),\n      topics: Formatter.allowNull(this.topics.bind(this), undefined)\n    };\n    formats.filterLog = {\n      blockNumber: Formatter.allowNull(number),\n      blockHash: Formatter.allowNull(hash),\n      transactionIndex: number,\n      removed: Formatter.allowNull(this.boolean.bind(this)),\n      address: address,\n      data: Formatter.allowFalsish(data, \"0x\"),\n      topics: Formatter.arrayOf(hash),\n      transactionHash: hash,\n      logIndex: number\n    };\n    return formats;\n  }\n\n  accessList(accessList) {\n    return accessListify(accessList || []);\n  } // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n  // Strict! Used on input.\n\n\n  number(number) {\n    if (number === \"0x\") {\n      return 0;\n    }\n\n    return BigNumber.from(number).toNumber();\n  }\n\n  type(number) {\n    if (number === \"0x\" || number == null) {\n      return 0;\n    }\n\n    return BigNumber.from(number).toNumber();\n  } // Strict! Used on input.\n\n\n  bigNumber(value) {\n    return BigNumber.from(value);\n  } // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n\n\n  boolean(value) {\n    if (typeof value === \"boolean\") {\n      return value;\n    }\n\n    if (typeof value === \"string\") {\n      value = value.toLowerCase();\n\n      if (value === \"true\") {\n        return true;\n      }\n\n      if (value === \"false\") {\n        return false;\n      }\n    }\n\n    throw new Error(\"invalid boolean - \" + value);\n  }\n\n  hex(value, strict) {\n    if (typeof value === \"string\") {\n      if (!strict && value.substring(0, 2) !== \"0x\") {\n        value = \"0x\" + value;\n      }\n\n      if (isHexString(value)) {\n        return value.toLowerCase();\n      }\n    }\n\n    return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n  }\n\n  data(value, strict) {\n    const result = this.hex(value, strict);\n\n    if (result.length % 2 !== 0) {\n      throw new Error(\"invalid data; odd-length - \" + value);\n    }\n\n    return result;\n  } // Requires an address\n  // Strict! Used on input.\n\n\n  address(value) {\n    return getAddress(value);\n  }\n\n  callAddress(value) {\n    if (!isHexString(value, 32)) {\n      return null;\n    }\n\n    const address = getAddress(hexDataSlice(value, 12));\n    return address === AddressZero ? null : address;\n  }\n\n  contractAddress(value) {\n    return getContractAddress(value);\n  } // Strict! Used on input.\n\n\n  blockTag(blockTag) {\n    if (blockTag == null) {\n      return \"latest\";\n    }\n\n    if (blockTag === \"earliest\") {\n      return \"0x0\";\n    }\n\n    switch (blockTag) {\n      case \"earliest\":\n        return \"0x0\";\n\n      case \"latest\":\n      case \"pending\":\n      case \"safe\":\n      case \"finalized\":\n        return blockTag;\n    }\n\n    if (typeof blockTag === \"number\" || isHexString(blockTag)) {\n      return hexValue(blockTag);\n    }\n\n    throw new Error(\"invalid blockTag\");\n  } // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n\n\n  hash(value, strict) {\n    const result = this.hex(value, strict);\n\n    if (hexDataLength(result) !== 32) {\n      return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    return result;\n  } // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n\n\n  difficulty(value) {\n    if (value == null) {\n      return null;\n    }\n\n    const v = BigNumber.from(value);\n\n    try {\n      return v.toNumber();\n    } catch (error) {}\n\n    return null;\n  }\n\n  uint256(value) {\n    if (!isHexString(value)) {\n      throw new Error(\"invalid uint256\");\n    }\n\n    return hexZeroPad(value, 32);\n  }\n\n  _block(value, format) {\n    if (value.author != null && value.miner == null) {\n      value.miner = value.author;\n    } // The difficulty may need to come from _difficulty in recursed blocks\n\n\n    const difficulty = value._difficulty != null ? value._difficulty : value.difficulty;\n    const result = Formatter.check(format, value);\n    result._difficulty = difficulty == null ? null : BigNumber.from(difficulty);\n    return result;\n  }\n\n  block(value) {\n    return this._block(value, this.formats.block);\n  }\n\n  blockWithTransactions(value) {\n    return this._block(value, this.formats.blockWithTransactions);\n  } // Strict! Used on input.\n\n\n  transactionRequest(value) {\n    return Formatter.check(this.formats.transactionRequest, value);\n  }\n\n  transactionResponse(transaction) {\n    // Rename gas to gasLimit\n    if (transaction.gas != null && transaction.gasLimit == null) {\n      transaction.gasLimit = transaction.gas;\n    } // Some clients (TestRPC) do strange things like return 0x0 for the\n    // 0 address; correct this to be a real address\n\n\n    if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n      transaction.to = \"0x0000000000000000000000000000000000000000\";\n    } // Rename input to data\n\n\n    if (transaction.input != null && transaction.data == null) {\n      transaction.data = transaction.input;\n    } // If to and creates are empty, populate the creates from the transaction\n\n\n    if (transaction.to == null && transaction.creates == null) {\n      transaction.creates = this.contractAddress(transaction);\n    }\n\n    if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n      transaction.accessList = [];\n    }\n\n    const result = Formatter.check(this.formats.transaction, transaction);\n\n    if (transaction.chainId != null) {\n      let chainId = transaction.chainId;\n\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n\n      result.chainId = chainId;\n    } else {\n      let chainId = transaction.networkId; // geth-etc returns chainId\n\n      if (chainId == null && result.v == null) {\n        chainId = transaction.chainId;\n      }\n\n      if (isHexString(chainId)) {\n        chainId = BigNumber.from(chainId).toNumber();\n      }\n\n      if (typeof chainId !== \"number\" && result.v != null) {\n        chainId = (result.v - 35) / 2;\n\n        if (chainId < 0) {\n          chainId = 0;\n        }\n\n        chainId = parseInt(chainId);\n      }\n\n      if (typeof chainId !== \"number\") {\n        chainId = 0;\n      }\n\n      result.chainId = chainId;\n    } // 0x0000... should actually be null\n\n\n    if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n      result.blockHash = null;\n    }\n\n    return result;\n  }\n\n  transaction(value) {\n    return parseTransaction(value);\n  }\n\n  receiptLog(value) {\n    return Formatter.check(this.formats.receiptLog, value);\n  }\n\n  receipt(value) {\n    const result = Formatter.check(this.formats.receipt, value); // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n\n    if (result.root != null) {\n      if (result.root.length <= 4) {\n        // Could be 0x00, 0x0, 0x01 or 0x1\n        const value = BigNumber.from(result.root).toNumber();\n\n        if (value === 0 || value === 1) {\n          // Make sure if both are specified, they match\n          if (result.status != null && result.status !== value) {\n            logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", {\n              root: result.root,\n              status: result.status\n            });\n          }\n\n          result.status = value;\n          delete result.root;\n        } else {\n          logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n        }\n      } else if (result.root.length !== 66) {\n        // Must be a valid bytes32\n        logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n      }\n    }\n\n    if (result.status != null) {\n      result.byzantium = true;\n    }\n\n    return result;\n  }\n\n  topics(value) {\n    if (Array.isArray(value)) {\n      return value.map(v => this.topics(v));\n    } else if (value != null) {\n      return this.hash(value, true);\n    }\n\n    return null;\n  }\n\n  filter(value) {\n    return Formatter.check(this.formats.filter, value);\n  }\n\n  filterLog(value) {\n    return Formatter.check(this.formats.filterLog, value);\n  }\n\n  static check(format, object) {\n    const result = {};\n\n    for (const key in format) {\n      try {\n        const value = format[key](object[key]);\n\n        if (value !== undefined) {\n          result[key] = value;\n        }\n      } catch (error) {\n        error.checkKey = key;\n        error.checkValue = object[key];\n        throw error;\n      }\n    }\n\n    return result;\n  } // if value is null-ish, nullValue is returned\n\n\n  static allowNull(format, nullValue) {\n    return function (value) {\n      if (value == null) {\n        return nullValue;\n      }\n\n      return format(value);\n    };\n  } // If value is false-ish, replaceValue is returned\n\n\n  static allowFalsish(format, replaceValue) {\n    return function (value) {\n      if (!value) {\n        return replaceValue;\n      }\n\n      return format(value);\n    };\n  } // Requires an Array satisfying check\n\n\n  static arrayOf(format) {\n    return function (array) {\n      if (!Array.isArray(array)) {\n        throw new Error(\"not an array\");\n      }\n\n      const result = [];\n      array.forEach(function (value) {\n        result.push(format(value));\n      });\n      return result;\n    };\n  }\n\n}\nexport function isCommunityResourcable(value) {\n  return value && typeof value.isCommunityResource === \"function\";\n}\nexport function isCommunityResource(value) {\n  return isCommunityResourcable(value) && value.isCommunityResource();\n} // Show the throttle message only once\n\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n  if (throttleMessage) {\n    return;\n  }\n\n  throttleMessage = true;\n  console.log(\"========= NOTICE =========\");\n  console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n  console.log(\"\");\n  console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n  console.log(\"community resource for low-traffic projects and early prototyping.\");\n  console.log(\"\");\n  console.log(\"While your application will continue to function, we highly recommended\");\n  console.log(\"signing up for your own API keys to improve performance, increase your\");\n  console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n  console.log(\"\");\n  console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n  console.log(\"==========================\");\n}","map":{"version":3,"names":["getAddress","getContractAddress","BigNumber","hexDataLength","hexDataSlice","hexValue","hexZeroPad","isHexString","AddressZero","shallowCopy","accessListify","parse","parseTransaction","Logger","version","logger","Formatter","constructor","formats","getDefaultFormats","address","bind","bigNumber","blockTag","data","hash","hex","number","type","strictData","v","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","value","nonce","r","uint256","s","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","transactionResponse","filter","fromBlock","undefined","toBlock","filterLog","removed","boolean","allowFalsish","toNumber","toLowerCase","Error","strict","substring","throwArgumentError","result","length","callAddress","error","_block","format","author","_difficulty","check","gas","isZero","input","chainId","networkId","parseInt","replace","byzantium","Array","isArray","map","object","key","checkKey","checkValue","nullValue","replaceValue","array","forEach","push","isCommunityResourcable","isCommunityResource","throttleMessage","showThrottleMessage","console","log"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/providers/lib.esm/formatter.js"],"sourcesContent":["\"use strict\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nexport class Formatter {\n    constructor() {\n        this.formats = this.getDefaultFormats();\n    }\n    getDefaultFormats() {\n        const formats = ({});\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n        const strictData = (v) => { return this.data(v, true); };\n        formats.transaction = {\n            hash: hash,\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n            confirmations: Formatter.allowNull(number, null),\n            from: address,\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n            creates: Formatter.allowNull(address, null),\n            raw: Formatter.allowNull(data),\n        };\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n        formats.block = {\n            hash: Formatter.allowNull(hash),\n            parentHash: hash,\n            number: number,\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n            miner: Formatter.allowNull(address),\n            extraData: data,\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n            topics: Formatter.arrayOf(hash),\n            transactionHash: hash,\n            logIndex: number,\n        };\n        return formats;\n    }\n    accessList(accessList) {\n        return accessListify(accessList || []);\n    }\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number) {\n        if (number === \"0x\") {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    type(number) {\n        if (number === \"0x\" || number == null) {\n            return 0;\n        }\n        return BigNumber.from(number).toNumber();\n    }\n    // Strict! Used on input.\n    bigNumber(value) {\n        return BigNumber.from(value);\n    }\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value) {\n        if (typeof (value) === \"boolean\") {\n            return value;\n        }\n        if (typeof (value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") {\n                return true;\n            }\n            if (value === \"false\") {\n                return false;\n            }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n    hex(value, strict) {\n        if (typeof (value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") {\n                value = \"0x\" + value;\n            }\n            if (isHexString(value)) {\n                return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n    data(value, strict) {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n    // Requires an address\n    // Strict! Used on input.\n    address(value) {\n        return getAddress(value);\n    }\n    callAddress(value) {\n        if (!isHexString(value, 32)) {\n            return null;\n        }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null : address;\n    }\n    contractAddress(value) {\n        return getContractAddress(value);\n    }\n    // Strict! Used on input.\n    blockTag(blockTag) {\n        if (blockTag == null) {\n            return \"latest\";\n        }\n        if (blockTag === \"earliest\") {\n            return \"0x0\";\n        }\n        switch (blockTag) {\n            case \"earliest\": return \"0x0\";\n            case \"latest\":\n            case \"pending\":\n            case \"safe\":\n            case \"finalized\":\n                return blockTag;\n        }\n        if (typeof (blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(blockTag);\n        }\n        throw new Error(\"invalid blockTag\");\n    }\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value, strict) {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value) {\n        if (value == null) {\n            return null;\n        }\n        const v = BigNumber.from(value);\n        try {\n            return v.toNumber();\n        }\n        catch (error) { }\n        return null;\n    }\n    uint256(value) {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n    _block(value, format) {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty : value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null : BigNumber.from(difficulty));\n        return result;\n    }\n    block(value) {\n        return this._block(value, this.formats.block);\n    }\n    blockWithTransactions(value) {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n    // Strict! Used on input.\n    transactionRequest(value) {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n    transactionResponse(transaction) {\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n        if ((transaction.type === 1 || transaction.type === 2) && transaction.accessList == null) {\n            transaction.accessList = [];\n        }\n        const result = Formatter.check(this.formats.transaction, transaction);\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            result.chainId = chainId;\n        }\n        else {\n            let chainId = transaction.networkId;\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n            if (typeof (chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) {\n                    chainId = 0;\n                }\n                chainId = parseInt(chainId);\n            }\n            if (typeof (chainId) !== \"number\") {\n                chainId = 0;\n            }\n            result.chainId = chainId;\n        }\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n        return result;\n    }\n    transaction(value) {\n        return parseTransaction(value);\n    }\n    receiptLog(value) {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n    receipt(value) {\n        const result = Formatter.check(this.formats.receipt, value);\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                }\n                else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            }\n            else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n        return result;\n    }\n    topics(value) {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n        }\n        else if (value != null) {\n            return this.hash(value, true);\n        }\n        return null;\n    }\n    filter(value) {\n        return Formatter.check(this.formats.filter, value);\n    }\n    filterLog(value) {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n    static check(format, object) {\n        const result = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) {\n                    result[key] = value;\n                }\n            }\n            catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n    // if value is null-ish, nullValue is returned\n    static allowNull(format, nullValue) {\n        return (function (value) {\n            if (value == null) {\n                return nullValue;\n            }\n            return format(value);\n        });\n    }\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format, replaceValue) {\n        return (function (value) {\n            if (!value) {\n                return replaceValue;\n            }\n            return format(value);\n        });\n    }\n    // Requires an Array satisfying check\n    static arrayOf(format) {\n        return (function (array) {\n            if (!Array.isArray(array)) {\n                throw new Error(\"not an array\");\n            }\n            const result = [];\n            array.forEach(function (value) {\n                result.push(format(value));\n            });\n            return result;\n        });\n    }\n}\nexport function isCommunityResourcable(value) {\n    return (value && typeof (value.isCommunityResource) === \"function\");\n}\nexport function isCommunityResource(value) {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) {\n        return;\n    }\n    throttleMessage = true;\n    console.log(\"========= NOTICE =========\");\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}