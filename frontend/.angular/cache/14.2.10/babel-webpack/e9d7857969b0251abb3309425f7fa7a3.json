{"ast":null,"code":"/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\nimport { getData } from './include.js';\nconst r = getData();\nimport { read_member_array, read_mapped_map, read_emoji_trie } from './decoder.js'; // @TODO: This should be lazily loaded\n\nconst VALID = new Set(read_member_array(r));\nconst IGNORED = new Set(read_member_array(r));\nconst MAPPED = read_mapped_map(r);\nconst EMOJI_ROOT = read_emoji_trie(r); //const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n//const STOP = 0x2E;\n\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\n\nfunction explode_cp(name) {\n  return toUtf8CodePoints(name);\n}\n\nfunction filter_fe0f(cps) {\n  return cps.filter(cp => cp != 0xFE0F);\n}\n\nexport function ens_normalize_post_check(name) {\n  for (let label of name.split('.')) {\n    let cps = explode_cp(label);\n\n    try {\n      for (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n        if (cps[i] !== UNDERSCORE) {\n          throw new Error(`underscore only allowed at start`);\n        }\n      }\n\n      if (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n        throw new Error(`invalid label extension`);\n      }\n    } catch (err) {\n      throw new Error(`Invalid label \"${label}\": ${err.message}`);\n    }\n  }\n\n  return name;\n}\nexport function ens_normalize(name) {\n  return ens_normalize_post_check(normalize(name, filter_fe0f));\n}\n\nfunction normalize(name, emoji_filter) {\n  let input = explode_cp(name).reverse(); // flip for pop\n\n  let output = [];\n\n  while (input.length) {\n    let emoji = consume_emoji_reversed(input);\n\n    if (emoji) {\n      output.push(...emoji_filter(emoji));\n      continue;\n    }\n\n    let cp = input.pop();\n\n    if (VALID.has(cp)) {\n      output.push(cp);\n      continue;\n    }\n\n    if (IGNORED.has(cp)) {\n      continue;\n    }\n\n    let cps = MAPPED[cp];\n\n    if (cps) {\n      output.push(...cps);\n      continue;\n    }\n\n    throw new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n  }\n\n  return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\n\nfunction nfc(s) {\n  return s.normalize('NFC');\n}\n\nfunction consume_emoji_reversed(cps, eaten) {\n  var _a;\n\n  let node = EMOJI_ROOT;\n  let emoji;\n  let saved;\n  let stack = [];\n  let pos = cps.length;\n  if (eaten) eaten.length = 0; // clear input buffer (if needed)\n\n  while (pos) {\n    let cp = cps[--pos];\n    node = (_a = node.branches.find(x => x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;\n    if (!node) break;\n\n    if (node.save) {\n      // remember\n      saved = cp;\n    } else if (node.check) {\n      // check exclusion\n      if (cp === saved) break;\n    }\n\n    stack.push(cp);\n\n    if (node.fe0f) {\n      stack.push(0xFE0F);\n      if (pos > 0 && cps[pos - 1] == 0xFE0F) pos--; // consume optional FE0F\n    }\n\n    if (node.valid) {\n      // this is a valid emoji (so far)\n      emoji = stack.slice(); // copy stack\n\n      if (node.valid == 2) emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n\n      if (eaten) eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n\n      cps.length = pos; // truncate\n    }\n  }\n\n  return emoji;\n}","map":{"version":3,"names":["toUtf8CodePoints","getData","r","read_member_array","read_mapped_map","read_emoji_trie","VALID","Set","IGNORED","MAPPED","EMOJI_ROOT","HYPHEN","UNDERSCORE","explode_cp","name","filter_fe0f","cps","filter","cp","ens_normalize_post_check","label","split","i","lastIndexOf","Error","length","every","err","message","ens_normalize","normalize","emoji_filter","input","reverse","output","emoji","consume_emoji_reversed","push","pop","has","toString","toUpperCase","nfc","String","fromCodePoint","s","eaten","_a","node","saved","stack","pos","branches","find","x","set","save","check","fe0f","valid","slice","splice"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/hash/lib.esm/ens-normalize/lib.js"],"sourcesContent":["/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\nimport { toUtf8CodePoints } from \"@ethersproject/strings\";\nimport { getData } from './include.js';\nconst r = getData();\nimport { read_member_array, read_mapped_map, read_emoji_trie } from './decoder.js';\n// @TODO: This should be lazily loaded\nconst VALID = new Set(read_member_array(r));\nconst IGNORED = new Set(read_member_array(r));\nconst MAPPED = read_mapped_map(r);\nconst EMOJI_ROOT = read_emoji_trie(r);\n//const NFC_CHECK = new Set(read_member_array(r, Array.from(VALID.values()).sort((a, b) => a - b)));\n//const STOP = 0x2E;\nconst HYPHEN = 0x2D;\nconst UNDERSCORE = 0x5F;\nfunction explode_cp(name) {\n    return toUtf8CodePoints(name);\n}\nfunction filter_fe0f(cps) {\n    return cps.filter(cp => cp != 0xFE0F);\n}\nexport function ens_normalize_post_check(name) {\n    for (let label of name.split('.')) {\n        let cps = explode_cp(label);\n        try {\n            for (let i = cps.lastIndexOf(UNDERSCORE) - 1; i >= 0; i--) {\n                if (cps[i] !== UNDERSCORE) {\n                    throw new Error(`underscore only allowed at start`);\n                }\n            }\n            if (cps.length >= 4 && cps.every(cp => cp < 0x80) && cps[2] === HYPHEN && cps[3] === HYPHEN) {\n                throw new Error(`invalid label extension`);\n            }\n        }\n        catch (err) {\n            throw new Error(`Invalid label \"${label}\": ${err.message}`);\n        }\n    }\n    return name;\n}\nexport function ens_normalize(name) {\n    return ens_normalize_post_check(normalize(name, filter_fe0f));\n}\nfunction normalize(name, emoji_filter) {\n    let input = explode_cp(name).reverse(); // flip for pop\n    let output = [];\n    while (input.length) {\n        let emoji = consume_emoji_reversed(input);\n        if (emoji) {\n            output.push(...emoji_filter(emoji));\n            continue;\n        }\n        let cp = input.pop();\n        if (VALID.has(cp)) {\n            output.push(cp);\n            continue;\n        }\n        if (IGNORED.has(cp)) {\n            continue;\n        }\n        let cps = MAPPED[cp];\n        if (cps) {\n            output.push(...cps);\n            continue;\n        }\n        throw new Error(`Disallowed codepoint: 0x${cp.toString(16).toUpperCase()}`);\n    }\n    return ens_normalize_post_check(nfc(String.fromCodePoint(...output)));\n}\nfunction nfc(s) {\n    return s.normalize('NFC');\n}\nfunction consume_emoji_reversed(cps, eaten) {\n    var _a;\n    let node = EMOJI_ROOT;\n    let emoji;\n    let saved;\n    let stack = [];\n    let pos = cps.length;\n    if (eaten)\n        eaten.length = 0; // clear input buffer (if needed)\n    while (pos) {\n        let cp = cps[--pos];\n        node = (_a = node.branches.find(x => x.set.has(cp))) === null || _a === void 0 ? void 0 : _a.node;\n        if (!node)\n            break;\n        if (node.save) { // remember\n            saved = cp;\n        }\n        else if (node.check) { // check exclusion\n            if (cp === saved)\n                break;\n        }\n        stack.push(cp);\n        if (node.fe0f) {\n            stack.push(0xFE0F);\n            if (pos > 0 && cps[pos - 1] == 0xFE0F)\n                pos--; // consume optional FE0F\n        }\n        if (node.valid) { // this is a valid emoji (so far)\n            emoji = stack.slice(); // copy stack\n            if (node.valid == 2)\n                emoji.splice(1, 1); // delete FE0F at position 1 (RGI ZWJ don't follow spec!)\n            if (eaten)\n                eaten.push(...cps.slice(pos).reverse()); // copy input (if needed)\n            cps.length = pos; // truncate\n        }\n    }\n    return emoji;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}