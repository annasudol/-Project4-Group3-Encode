{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getUrl } from \"./geturl\";\n\nfunction staller(duration) {\n  return new Promise(resolve => {\n    setTimeout(resolve, duration);\n  });\n}\n\nfunction bodyify(value, type) {\n  if (value == null) {\n    return null;\n  }\n\n  if (typeof value === \"string\") {\n    return value;\n  }\n\n  if (isBytesLike(value)) {\n    if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n      try {\n        return toUtf8String(value);\n      } catch (error) {}\n\n      ;\n    }\n\n    return hexlify(value);\n  }\n\n  return value;\n}\n\nfunction unpercent(value) {\n  return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n    return String.fromCharCode(parseInt(code, 16));\n  }));\n} // This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\n\n\nexport function _fetchData(connection, body, processFunc) {\n  // How many times to retry in the event of a throttle\n  const attemptLimit = typeof connection === \"object\" && connection.throttleLimit != null ? connection.throttleLimit : 12;\n  logger.assertArgument(attemptLimit > 0 && attemptLimit % 1 === 0, \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n  const throttleCallback = typeof connection === \"object\" ? connection.throttleCallback : null;\n  const throttleSlotInterval = typeof connection === \"object\" && typeof connection.throttleSlotInterval === \"number\" ? connection.throttleSlotInterval : 100;\n  logger.assertArgument(throttleSlotInterval > 0 && throttleSlotInterval % 1 === 0, \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n  const errorPassThrough = typeof connection === \"object\" ? !!connection.errorPassThrough : false;\n  const headers = {};\n  let url = null; // @TODO: Allow ConnectionInfo to override some of these values\n\n  const options = {\n    method: \"GET\"\n  };\n  let allow304 = false;\n  let timeout = 2 * 60 * 1000;\n\n  if (typeof connection === \"string\") {\n    url = connection;\n  } else if (typeof connection === \"object\") {\n    if (connection == null || connection.url == null) {\n      logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n    }\n\n    url = connection.url;\n\n    if (typeof connection.timeout === \"number\" && connection.timeout > 0) {\n      timeout = connection.timeout;\n    }\n\n    if (connection.headers) {\n      for (const key in connection.headers) {\n        headers[key.toLowerCase()] = {\n          key: key,\n          value: String(connection.headers[key])\n        };\n\n        if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n          allow304 = true;\n        }\n      }\n    }\n\n    options.allowGzip = !!connection.allowGzip;\n\n    if (connection.user != null && connection.password != null) {\n      if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n        logger.throwError(\"basic authentication requires a secure https url\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"url\",\n          url: url,\n          user: connection.user,\n          password: \"[REDACTED]\"\n        });\n      }\n\n      const authorization = connection.user + \":\" + connection.password;\n      headers[\"authorization\"] = {\n        key: \"Authorization\",\n        value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n      };\n    }\n\n    if (connection.skipFetchSetup != null) {\n      options.skipFetchSetup = !!connection.skipFetchSetup;\n    }\n\n    if (connection.fetchOptions != null) {\n      options.fetchOptions = shallowCopy(connection.fetchOptions);\n    }\n  }\n\n  const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n  const dataMatch = url ? url.match(reData) : null;\n\n  if (dataMatch) {\n    try {\n      const response = {\n        statusCode: 200,\n        statusMessage: \"OK\",\n        headers: {\n          \"content-type\": dataMatch[1] || \"text/plain\"\n        },\n        body: dataMatch[2] ? base64Decode(dataMatch[3]) : unpercent(dataMatch[3])\n      };\n      let result = response.body;\n\n      if (processFunc) {\n        result = processFunc(response.body, response);\n      }\n\n      return Promise.resolve(result);\n    } catch (error) {\n      logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n        body: bodyify(dataMatch[1], dataMatch[2]),\n        error: error,\n        requestBody: null,\n        requestMethod: \"GET\",\n        url: url\n      });\n    }\n  }\n\n  if (body) {\n    options.method = \"POST\";\n    options.body = body;\n\n    if (headers[\"content-type\"] == null) {\n      headers[\"content-type\"] = {\n        key: \"Content-Type\",\n        value: \"application/octet-stream\"\n      };\n    }\n\n    if (headers[\"content-length\"] == null) {\n      headers[\"content-length\"] = {\n        key: \"Content-Length\",\n        value: String(body.length)\n      };\n    }\n  }\n\n  const flatHeaders = {};\n  Object.keys(headers).forEach(key => {\n    const header = headers[key];\n    flatHeaders[header.key] = header.value;\n  });\n  options.headers = flatHeaders;\n\n  const runningTimeout = function () {\n    let timer = null;\n    const promise = new Promise(function (resolve, reject) {\n      if (timeout) {\n        timer = setTimeout(() => {\n          if (timer == null) {\n            return;\n          }\n\n          timer = null;\n          reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            timeout: timeout,\n            url: url\n          }));\n        }, timeout);\n      }\n    });\n\n    const cancel = function () {\n      if (timer == null) {\n        return;\n      }\n\n      clearTimeout(timer);\n      timer = null;\n    };\n\n    return {\n      promise,\n      cancel\n    };\n  }();\n\n  const runningFetch = function () {\n    return __awaiter(this, void 0, void 0, function* () {\n      for (let attempt = 0; attempt < attemptLimit; attempt++) {\n        let response = null;\n\n        try {\n          response = yield getUrl(url, options);\n\n          if (attempt < attemptLimit) {\n            if (response.statusCode === 301 || response.statusCode === 302) {\n              // Redirection; for now we only support absolute locataions\n              const location = response.headers.location || \"\";\n\n              if (options.method === \"GET\" && location.match(/^https:/)) {\n                url = response.headers.location;\n                continue;\n              }\n            } else if (response.statusCode === 429) {\n              // Exponential back-off throttling\n              let tryAgain = true;\n\n              if (throttleCallback) {\n                tryAgain = yield throttleCallback(attempt, url);\n              }\n\n              if (tryAgain) {\n                let stall = 0;\n                const retryAfter = response.headers[\"retry-after\"];\n\n                if (typeof retryAfter === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                  stall = parseInt(retryAfter) * 1000;\n                } else {\n                  stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                } //console.log(\"Stalling 429\");\n\n\n                yield staller(stall);\n                continue;\n              }\n            }\n          }\n        } catch (error) {\n          response = error.response;\n\n          if (response == null) {\n            runningTimeout.cancel();\n            logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              serverError: error,\n              url: url\n            });\n          }\n        }\n\n        let body = response.body;\n\n        if (allow304 && response.statusCode === 304) {\n          body = null;\n        } else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n          runningTimeout.cancel();\n          logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n            status: response.statusCode,\n            headers: response.headers,\n            body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n            requestMethod: options.method,\n            url: url\n          });\n        }\n\n        if (processFunc) {\n          try {\n            const result = yield processFunc(body, response);\n            runningTimeout.cancel();\n            return result;\n          } catch (error) {\n            // Allow the processFunc to trigger a throttle\n            if (error.throttleRetry && attempt < attemptLimit) {\n              let tryAgain = true;\n\n              if (throttleCallback) {\n                tryAgain = yield throttleCallback(attempt, url);\n              }\n\n              if (tryAgain) {\n                const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt))); //console.log(\"Stalling callback\");\n\n                yield staller(timeout);\n                continue;\n              }\n            }\n\n            runningTimeout.cancel();\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n              body: bodyify(body, response.headers ? response.headers[\"content-type\"] : null),\n              error: error,\n              requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n              requestMethod: options.method,\n              url: url\n            });\n          }\n        }\n\n        runningTimeout.cancel(); // If we had a processFunc, it either returned a T or threw above.\n        // The \"body\" is now a Uint8Array.\n\n        return body;\n      }\n\n      return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n        requestMethod: options.method,\n        url: url\n      });\n    });\n  }();\n\n  return Promise.race([runningTimeout.promise, runningFetch]);\n}\nexport function fetchJson(connection, json, processFunc) {\n  let processJsonFunc = (value, response) => {\n    let result = null;\n\n    if (value != null) {\n      try {\n        result = JSON.parse(toUtf8String(value));\n      } catch (error) {\n        logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n          body: value,\n          error: error\n        });\n      }\n    }\n\n    if (processFunc) {\n      result = processFunc(result, response);\n    }\n\n    return result;\n  }; // If we have json to send, we must\n  // - add content-type of application/json (unless already overridden)\n  // - convert the json to bytes\n\n\n  let body = null;\n\n  if (json != null) {\n    body = toUtf8Bytes(json); // Create a connection with the content-type set for JSON\n\n    const updated = typeof connection === \"string\" ? {\n      url: connection\n    } : shallowCopy(connection);\n\n    if (updated.headers) {\n      const hasContentType = Object.keys(updated.headers).filter(k => k.toLowerCase() === \"content-type\").length !== 0;\n\n      if (!hasContentType) {\n        updated.headers = shallowCopy(updated.headers);\n        updated.headers[\"content-type\"] = \"application/json\";\n      }\n    } else {\n      updated.headers = {\n        \"content-type\": \"application/json\"\n      };\n    }\n\n    connection = updated;\n  }\n\n  return _fetchData(connection, body, processJsonFunc);\n}\nexport function poll(func, options) {\n  if (!options) {\n    options = {};\n  }\n\n  options = shallowCopy(options);\n\n  if (options.floor == null) {\n    options.floor = 0;\n  }\n\n  if (options.ceiling == null) {\n    options.ceiling = 10000;\n  }\n\n  if (options.interval == null) {\n    options.interval = 250;\n  }\n\n  return new Promise(function (resolve, reject) {\n    let timer = null;\n    let done = false; // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n\n    const cancel = () => {\n      if (done) {\n        return false;\n      }\n\n      done = true;\n\n      if (timer) {\n        clearTimeout(timer);\n      }\n\n      return true;\n    };\n\n    if (options.timeout) {\n      timer = setTimeout(() => {\n        if (cancel()) {\n          reject(new Error(\"timeout\"));\n        }\n      }, options.timeout);\n    }\n\n    const retryLimit = options.retryLimit;\n    let attempt = 0;\n\n    function check() {\n      return func().then(function (result) {\n        // If we have a result, or are allowed null then we're done\n        if (result !== undefined) {\n          if (cancel()) {\n            resolve(result);\n          }\n        } else if (options.oncePoll) {\n          options.oncePoll.once(\"poll\", check);\n        } else if (options.onceBlock) {\n          options.onceBlock.once(\"block\", check); // Otherwise, exponential back-off (up to 10s) our next request\n        } else if (!done) {\n          attempt++;\n\n          if (attempt > retryLimit) {\n            if (cancel()) {\n              reject(new Error(\"retry limit reached\"));\n            }\n\n            return;\n          }\n\n          let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n\n          if (timeout < options.floor) {\n            timeout = options.floor;\n          }\n\n          if (timeout > options.ceiling) {\n            timeout = options.ceiling;\n          }\n\n          setTimeout(check, timeout);\n        }\n\n        return null;\n      }, function (error) {\n        if (cancel()) {\n          reject(error);\n        }\n      });\n    }\n\n    check();\n  });\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","decode","base64Decode","encode","base64Encode","hexlify","isBytesLike","shallowCopy","toUtf8Bytes","toUtf8String","Logger","version","logger","getUrl","staller","duration","setTimeout","bodyify","type","split","trim","error","unpercent","replace","all","code","String","fromCharCode","parseInt","_fetchData","connection","body","processFunc","attemptLimit","throttleLimit","assertArgument","throttleCallback","throttleSlotInterval","errorPassThrough","headers","url","options","method","allow304","timeout","throwArgumentError","key","toLowerCase","indexOf","allowGzip","user","password","substring","allowInsecureAuthentication","throwError","errors","INVALID_ARGUMENT","argument","authorization","skipFetchSetup","fetchOptions","reData","RegExp","dataMatch","match","response","statusCode","statusMessage","SERVER_ERROR","requestBody","requestMethod","length","flatHeaders","Object","keys","forEach","header","runningTimeout","timer","promise","makeError","TIMEOUT","cancel","clearTimeout","runningFetch","attempt","location","tryAgain","stall","retryAfter","Math","random","pow","serverError","status","throttleRetry","race","fetchJson","json","processJsonFunc","JSON","parse","updated","hasContentType","filter","k","poll","func","floor","ceiling","interval","Error","retryLimit","check","undefined","oncePoll","once","onceBlock"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/web/lib.esm/index.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { decode as base64Decode, encode as base64Encode } from \"@ethersproject/base64\";\nimport { hexlify, isBytesLike } from \"@ethersproject/bytes\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getUrl } from \"./geturl\";\nfunction staller(duration) {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\nfunction bodyify(value, type) {\n    if (value == null) {\n        return null;\n    }\n    if (typeof (value) === \"string\") {\n        return value;\n    }\n    if (isBytesLike(value)) {\n        if (type && (type.split(\"/\")[0] === \"text\" || type.split(\";\")[0].trim() === \"application/json\")) {\n            try {\n                return toUtf8String(value);\n            }\n            catch (error) { }\n            ;\n        }\n        return hexlify(value);\n    }\n    return value;\n}\nfunction unpercent(value) {\n    return toUtf8Bytes(value.replace(/%([0-9a-f][0-9a-f])/gi, (all, code) => {\n        return String.fromCharCode(parseInt(code, 16));\n    }));\n}\n// This API is still a work in progress; the future changes will likely be:\n// - ConnectionInfo => FetchDataRequest<T = any>\n// - FetchDataRequest.body? = string | Uint8Array | { contentType: string, data: string | Uint8Array }\n//   - If string => text/plain, Uint8Array => application/octet-stream (if content-type unspecified)\n// - FetchDataRequest.processFunc = (body: Uint8Array, response: FetchDataResponse) => T\n// For this reason, it should be considered internal until the API is finalized\nexport function _fetchData(connection, body, processFunc) {\n    // How many times to retry in the event of a throttle\n    const attemptLimit = (typeof (connection) === \"object\" && connection.throttleLimit != null) ? connection.throttleLimit : 12;\n    logger.assertArgument((attemptLimit > 0 && (attemptLimit % 1) === 0), \"invalid connection throttle limit\", \"connection.throttleLimit\", attemptLimit);\n    const throttleCallback = ((typeof (connection) === \"object\") ? connection.throttleCallback : null);\n    const throttleSlotInterval = ((typeof (connection) === \"object\" && typeof (connection.throttleSlotInterval) === \"number\") ? connection.throttleSlotInterval : 100);\n    logger.assertArgument((throttleSlotInterval > 0 && (throttleSlotInterval % 1) === 0), \"invalid connection throttle slot interval\", \"connection.throttleSlotInterval\", throttleSlotInterval);\n    const errorPassThrough = ((typeof (connection) === \"object\") ? !!(connection.errorPassThrough) : false);\n    const headers = {};\n    let url = null;\n    // @TODO: Allow ConnectionInfo to override some of these values\n    const options = {\n        method: \"GET\",\n    };\n    let allow304 = false;\n    let timeout = 2 * 60 * 1000;\n    if (typeof (connection) === \"string\") {\n        url = connection;\n    }\n    else if (typeof (connection) === \"object\") {\n        if (connection == null || connection.url == null) {\n            logger.throwArgumentError(\"missing URL\", \"connection.url\", connection);\n        }\n        url = connection.url;\n        if (typeof (connection.timeout) === \"number\" && connection.timeout > 0) {\n            timeout = connection.timeout;\n        }\n        if (connection.headers) {\n            for (const key in connection.headers) {\n                headers[key.toLowerCase()] = { key: key, value: String(connection.headers[key]) };\n                if ([\"if-none-match\", \"if-modified-since\"].indexOf(key.toLowerCase()) >= 0) {\n                    allow304 = true;\n                }\n            }\n        }\n        options.allowGzip = !!connection.allowGzip;\n        if (connection.user != null && connection.password != null) {\n            if (url.substring(0, 6) !== \"https:\" && connection.allowInsecureAuthentication !== true) {\n                logger.throwError(\"basic authentication requires a secure https url\", Logger.errors.INVALID_ARGUMENT, { argument: \"url\", url: url, user: connection.user, password: \"[REDACTED]\" });\n            }\n            const authorization = connection.user + \":\" + connection.password;\n            headers[\"authorization\"] = {\n                key: \"Authorization\",\n                value: \"Basic \" + base64Encode(toUtf8Bytes(authorization))\n            };\n        }\n        if (connection.skipFetchSetup != null) {\n            options.skipFetchSetup = !!connection.skipFetchSetup;\n        }\n        if (connection.fetchOptions != null) {\n            options.fetchOptions = shallowCopy(connection.fetchOptions);\n        }\n    }\n    const reData = new RegExp(\"^data:([^;:]*)?(;base64)?,(.*)$\", \"i\");\n    const dataMatch = ((url) ? url.match(reData) : null);\n    if (dataMatch) {\n        try {\n            const response = {\n                statusCode: 200,\n                statusMessage: \"OK\",\n                headers: { \"content-type\": (dataMatch[1] || \"text/plain\") },\n                body: (dataMatch[2] ? base64Decode(dataMatch[3]) : unpercent(dataMatch[3]))\n            };\n            let result = response.body;\n            if (processFunc) {\n                result = processFunc(response.body, response);\n            }\n            return Promise.resolve(result);\n        }\n        catch (error) {\n            logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                body: bodyify(dataMatch[1], dataMatch[2]),\n                error: error,\n                requestBody: null,\n                requestMethod: \"GET\",\n                url: url\n            });\n        }\n    }\n    if (body) {\n        options.method = \"POST\";\n        options.body = body;\n        if (headers[\"content-type\"] == null) {\n            headers[\"content-type\"] = { key: \"Content-Type\", value: \"application/octet-stream\" };\n        }\n        if (headers[\"content-length\"] == null) {\n            headers[\"content-length\"] = { key: \"Content-Length\", value: String(body.length) };\n        }\n    }\n    const flatHeaders = {};\n    Object.keys(headers).forEach((key) => {\n        const header = headers[key];\n        flatHeaders[header.key] = header.value;\n    });\n    options.headers = flatHeaders;\n    const runningTimeout = (function () {\n        let timer = null;\n        const promise = new Promise(function (resolve, reject) {\n            if (timeout) {\n                timer = setTimeout(() => {\n                    if (timer == null) {\n                        return;\n                    }\n                    timer = null;\n                    reject(logger.makeError(\"timeout\", Logger.errors.TIMEOUT, {\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        timeout: timeout,\n                        url: url\n                    }));\n                }, timeout);\n            }\n        });\n        const cancel = function () {\n            if (timer == null) {\n                return;\n            }\n            clearTimeout(timer);\n            timer = null;\n        };\n        return { promise, cancel };\n    })();\n    const runningFetch = (function () {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (let attempt = 0; attempt < attemptLimit; attempt++) {\n                let response = null;\n                try {\n                    response = yield getUrl(url, options);\n                    if (attempt < attemptLimit) {\n                        if (response.statusCode === 301 || response.statusCode === 302) {\n                            // Redirection; for now we only support absolute locataions\n                            const location = response.headers.location || \"\";\n                            if (options.method === \"GET\" && location.match(/^https:/)) {\n                                url = response.headers.location;\n                                continue;\n                            }\n                        }\n                        else if (response.statusCode === 429) {\n                            // Exponential back-off throttling\n                            let tryAgain = true;\n                            if (throttleCallback) {\n                                tryAgain = yield throttleCallback(attempt, url);\n                            }\n                            if (tryAgain) {\n                                let stall = 0;\n                                const retryAfter = response.headers[\"retry-after\"];\n                                if (typeof (retryAfter) === \"string\" && retryAfter.match(/^[1-9][0-9]*$/)) {\n                                    stall = parseInt(retryAfter) * 1000;\n                                }\n                                else {\n                                    stall = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                                }\n                                //console.log(\"Stalling 429\");\n                                yield staller(stall);\n                                continue;\n                            }\n                        }\n                    }\n                }\n                catch (error) {\n                    response = error.response;\n                    if (response == null) {\n                        runningTimeout.cancel();\n                        logger.throwError(\"missing response\", Logger.errors.SERVER_ERROR, {\n                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                            requestMethod: options.method,\n                            serverError: error,\n                            url: url\n                        });\n                    }\n                }\n                let body = response.body;\n                if (allow304 && response.statusCode === 304) {\n                    body = null;\n                }\n                else if (!errorPassThrough && (response.statusCode < 200 || response.statusCode >= 300)) {\n                    runningTimeout.cancel();\n                    logger.throwError(\"bad response\", Logger.errors.SERVER_ERROR, {\n                        status: response.statusCode,\n                        headers: response.headers,\n                        body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"] : null)),\n                        requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                        requestMethod: options.method,\n                        url: url\n                    });\n                }\n                if (processFunc) {\n                    try {\n                        const result = yield processFunc(body, response);\n                        runningTimeout.cancel();\n                        return result;\n                    }\n                    catch (error) {\n                        // Allow the processFunc to trigger a throttle\n                        if (error.throttleRetry && attempt < attemptLimit) {\n                            let tryAgain = true;\n                            if (throttleCallback) {\n                                tryAgain = yield throttleCallback(attempt, url);\n                            }\n                            if (tryAgain) {\n                                const timeout = throttleSlotInterval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                                //console.log(\"Stalling callback\");\n                                yield staller(timeout);\n                                continue;\n                            }\n                        }\n                        runningTimeout.cancel();\n                        logger.throwError(\"processing response error\", Logger.errors.SERVER_ERROR, {\n                            body: bodyify(body, ((response.headers) ? response.headers[\"content-type\"] : null)),\n                            error: error,\n                            requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                            requestMethod: options.method,\n                            url: url\n                        });\n                    }\n                }\n                runningTimeout.cancel();\n                // If we had a processFunc, it either returned a T or threw above.\n                // The \"body\" is now a Uint8Array.\n                return body;\n            }\n            return logger.throwError(\"failed response\", Logger.errors.SERVER_ERROR, {\n                requestBody: bodyify(options.body, flatHeaders[\"content-type\"]),\n                requestMethod: options.method,\n                url: url\n            });\n        });\n    })();\n    return Promise.race([runningTimeout.promise, runningFetch]);\n}\nexport function fetchJson(connection, json, processFunc) {\n    let processJsonFunc = (value, response) => {\n        let result = null;\n        if (value != null) {\n            try {\n                result = JSON.parse(toUtf8String(value));\n            }\n            catch (error) {\n                logger.throwError(\"invalid JSON\", Logger.errors.SERVER_ERROR, {\n                    body: value,\n                    error: error\n                });\n            }\n        }\n        if (processFunc) {\n            result = processFunc(result, response);\n        }\n        return result;\n    };\n    // If we have json to send, we must\n    // - add content-type of application/json (unless already overridden)\n    // - convert the json to bytes\n    let body = null;\n    if (json != null) {\n        body = toUtf8Bytes(json);\n        // Create a connection with the content-type set for JSON\n        const updated = (typeof (connection) === \"string\") ? ({ url: connection }) : shallowCopy(connection);\n        if (updated.headers) {\n            const hasContentType = (Object.keys(updated.headers).filter((k) => (k.toLowerCase() === \"content-type\")).length) !== 0;\n            if (!hasContentType) {\n                updated.headers = shallowCopy(updated.headers);\n                updated.headers[\"content-type\"] = \"application/json\";\n            }\n        }\n        else {\n            updated.headers = { \"content-type\": \"application/json\" };\n        }\n        connection = updated;\n    }\n    return _fetchData(connection, body, processJsonFunc);\n}\nexport function poll(func, options) {\n    if (!options) {\n        options = {};\n    }\n    options = shallowCopy(options);\n    if (options.floor == null) {\n        options.floor = 0;\n    }\n    if (options.ceiling == null) {\n        options.ceiling = 10000;\n    }\n    if (options.interval == null) {\n        options.interval = 250;\n    }\n    return new Promise(function (resolve, reject) {\n        let timer = null;\n        let done = false;\n        // Returns true if cancel was successful. Unsuccessful cancel means we're already done.\n        const cancel = () => {\n            if (done) {\n                return false;\n            }\n            done = true;\n            if (timer) {\n                clearTimeout(timer);\n            }\n            return true;\n        };\n        if (options.timeout) {\n            timer = setTimeout(() => {\n                if (cancel()) {\n                    reject(new Error(\"timeout\"));\n                }\n            }, options.timeout);\n        }\n        const retryLimit = options.retryLimit;\n        let attempt = 0;\n        function check() {\n            return func().then(function (result) {\n                // If we have a result, or are allowed null then we're done\n                if (result !== undefined) {\n                    if (cancel()) {\n                        resolve(result);\n                    }\n                }\n                else if (options.oncePoll) {\n                    options.oncePoll.once(\"poll\", check);\n                }\n                else if (options.onceBlock) {\n                    options.onceBlock.once(\"block\", check);\n                    // Otherwise, exponential back-off (up to 10s) our next request\n                }\n                else if (!done) {\n                    attempt++;\n                    if (attempt > retryLimit) {\n                        if (cancel()) {\n                            reject(new Error(\"retry limit reached\"));\n                        }\n                        return;\n                    }\n                    let timeout = options.interval * parseInt(String(Math.random() * Math.pow(2, attempt)));\n                    if (timeout < options.floor) {\n                        timeout = options.floor;\n                    }\n                    if (timeout > options.ceiling) {\n                        timeout = options.ceiling;\n                    }\n                    setTimeout(check, timeout);\n                }\n                return null;\n            }, function (error) {\n                if (cancel()) {\n                    reject(error);\n                }\n            });\n        }\n        check();\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}