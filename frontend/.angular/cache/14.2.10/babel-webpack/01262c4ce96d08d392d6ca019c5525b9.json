{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\n\nfunction spelunk(value, requireData) {\n  if (value == null) {\n    return null;\n  } // These *are* the droids we're looking for.\n\n\n  if (typeof value.message === \"string\" && value.message.match(\"reverted\")) {\n    const data = isHexString(value.data) ? value.data : null;\n\n    if (!requireData || data) {\n      return {\n        message: value.message,\n        data\n      };\n    }\n  } // Spelunk further...\n\n\n  if (typeof value === \"object\") {\n    for (const key in value) {\n      const result = spelunk(value[key], requireData);\n\n      if (result) {\n        return result;\n      }\n    }\n\n    return null;\n  } // Might be a JSON string we can further descend...\n\n\n  if (typeof value === \"string\") {\n    try {\n      return spelunk(JSON.parse(value), requireData);\n    } catch (error) {}\n  }\n\n  return null;\n}\n\nfunction checkError(method, error, params) {\n  const transaction = params.transaction || params.signedTransaction; // Undo the \"convenience\" some nodes are attempting to prevent backwards\n  // incompatibility; maybe for v6 consider forwarding reverts as errors\n\n  if (method === \"call\") {\n    const result = spelunk(error, true);\n\n    if (result) {\n      return result.data;\n    } // Nothing descriptive..\n\n\n    logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n      data: \"0x\",\n      transaction,\n      error\n    });\n  }\n\n  if (method === \"estimateGas\") {\n    // Try to find something, with a preference on SERVER_ERROR body\n    let result = spelunk(error.body, false);\n\n    if (result == null) {\n      result = spelunk(error, false);\n    } // Found \"reverted\", this is a CALL_EXCEPTION\n\n\n    if (result) {\n      logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n        reason: result.message,\n        method,\n        transaction,\n        error\n      });\n    }\n  } // @TODO: Should we spelunk for message too?\n\n\n  let message = error.message;\n\n  if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof error.error.message === \"string\") {\n    message = error.error.message;\n  } else if (typeof error.body === \"string\") {\n    message = error.body;\n  } else if (typeof error.responseText === \"string\") {\n    message = error.responseText;\n  }\n\n  message = (message || \"\").toLowerCase(); // \"insufficient funds for gas * price + value + cost(data)\"\n\n  if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n    logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n      error,\n      method,\n      transaction\n    });\n  } // \"nonce too low\"\n\n\n  if (message.match(/nonce (is )?too low/i)) {\n    logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n      error,\n      method,\n      transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n    logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n      error,\n      method,\n      transaction\n    });\n  } // \"replacement transaction underpriced\"\n\n\n  if (message.match(/only replay-protected/i)) {\n    logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n    logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n      error,\n      method,\n      transaction\n    });\n  }\n\n  throw error;\n}\n\nfunction timer(timeout) {\n  return new Promise(function (resolve) {\n    setTimeout(resolve, timeout);\n  });\n}\n\nfunction getResult(payload) {\n  if (payload.error) {\n    // @TODO: not any\n    const error = new Error(payload.error.message);\n    error.code = payload.error.code;\n    error.data = payload.error.data;\n    throw error;\n  }\n\n  return payload.result;\n}\n\nfunction getLowerCase(value) {\n  if (value) {\n    return value.toLowerCase();\n  }\n\n  return value;\n}\n\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n  constructor(constructorGuard, provider, addressOrIndex) {\n    super();\n\n    if (constructorGuard !== _constructorGuard) {\n      throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n    }\n\n    defineReadOnly(this, \"provider\", provider);\n\n    if (addressOrIndex == null) {\n      addressOrIndex = 0;\n    }\n\n    if (typeof addressOrIndex === \"string\") {\n      defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n      defineReadOnly(this, \"_index\", null);\n    } else if (typeof addressOrIndex === \"number\") {\n      defineReadOnly(this, \"_index\", addressOrIndex);\n      defineReadOnly(this, \"_address\", null);\n    } else {\n      logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n    }\n  }\n\n  connect(provider) {\n    return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"connect\"\n    });\n  }\n\n  connectUnchecked() {\n    return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n  }\n\n  getAddress() {\n    if (this._address) {\n      return Promise.resolve(this._address);\n    }\n\n    return this.provider.send(\"eth_accounts\", []).then(accounts => {\n      if (accounts.length <= this._index) {\n        logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n          operation: \"getAddress\"\n        });\n      }\n\n      return this.provider.formatter.address(accounts[this._index]);\n    });\n  }\n\n  sendUncheckedTransaction(transaction) {\n    transaction = shallowCopy(transaction);\n    const fromAddress = this.getAddress().then(address => {\n      if (address) {\n        address = address.toLowerCase();\n      }\n\n      return address;\n    }); // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n    // wishes to use this, it is easy to specify explicitly, otherwise\n    // we look it up for them.\n\n    if (transaction.gasLimit == null) {\n      const estimate = shallowCopy(transaction);\n      estimate.from = fromAddress;\n      transaction.gasLimit = this.provider.estimateGas(estimate);\n    }\n\n    if (transaction.to != null) {\n      transaction.to = Promise.resolve(transaction.to).then(to => __awaiter(this, void 0, void 0, function* () {\n        if (to == null) {\n          return null;\n        }\n\n        const address = yield this.provider.resolveName(to);\n\n        if (address == null) {\n          logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n        }\n\n        return address;\n      }));\n    }\n\n    return resolveProperties({\n      tx: resolveProperties(transaction),\n      sender: fromAddress\n    }).then(({\n      tx,\n      sender\n    }) => {\n      if (tx.from != null) {\n        if (tx.from.toLowerCase() !== sender) {\n          logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n        }\n      } else {\n        tx.from = sender;\n      }\n\n      const hexTx = this.provider.constructor.hexlifyTransaction(tx, {\n        from: true\n      });\n      return this.provider.send(\"eth_sendTransaction\", [hexTx]).then(hash => {\n        return hash;\n      }, error => {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n            action: \"sendTransaction\",\n            transaction: tx\n          });\n        }\n\n        return checkError(\"sendTransaction\", error, hexTx);\n      });\n    });\n  }\n\n  signTransaction(transaction) {\n    return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"signTransaction\"\n    });\n  }\n\n  sendTransaction(transaction) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // This cannot be mined any earlier than any recent block\n      const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval); // Send the transaction\n\n      const hash = yield this.sendUncheckedTransaction(transaction);\n\n      try {\n        // Unfortunately, JSON-RPC only provides and opaque transaction hash\n        // for a response, and we need the actual transaction, so we poll\n        // for it; it should show up very quickly\n        return yield poll(() => __awaiter(this, void 0, void 0, function* () {\n          const tx = yield this.provider.getTransaction(hash);\n\n          if (tx === null) {\n            return undefined;\n          }\n\n          return this.provider._wrapTransaction(tx, hash, blockNumber);\n        }), {\n          oncePoll: this.provider\n        });\n      } catch (error) {\n        error.transactionHash = hash;\n        throw error;\n      }\n    });\n  }\n\n  signMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress();\n\n      try {\n        return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n      } catch (error) {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n            action: \"signMessage\",\n            from: address,\n            messageData: message\n          });\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _legacySignMessage(message) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const data = typeof message === \"string\" ? toUtf8Bytes(message) : message;\n      const address = yield this.getAddress();\n\n      try {\n        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n        return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n      } catch (error) {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n            action: \"_legacySignMessage\",\n            from: address,\n            messageData: message\n          });\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  _signTypedData(domain, types, value) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Populate any ENS names (in-place)\n      const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, name => {\n        return this.provider.resolveName(name);\n      });\n      const address = yield this.getAddress();\n\n      try {\n        return yield this.provider.send(\"eth_signTypedData_v4\", [address.toLowerCase(), JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))]);\n      } catch (error) {\n        if (typeof error.message === \"string\" && error.message.match(/user denied/i)) {\n          logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n            action: \"_signTypedData\",\n            from: address,\n            messageData: {\n              domain: populated.domain,\n              types,\n              value: populated.value\n            }\n          });\n        }\n\n        throw error;\n      }\n    });\n  }\n\n  unlock(password) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const provider = this.provider;\n      const address = yield this.getAddress();\n      return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n    });\n  }\n\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n  sendTransaction(transaction) {\n    return this.sendUncheckedTransaction(transaction).then(hash => {\n      return {\n        hash: hash,\n        nonce: null,\n        gasLimit: null,\n        gasPrice: null,\n        data: null,\n        value: null,\n        chainId: null,\n        confirmations: 0,\n        from: null,\n        wait: confirmations => {\n          return this.provider.waitForTransaction(hash, confirmations);\n        }\n      };\n    });\n  }\n\n}\n\nconst allowedTransactionKeys = {\n  chainId: true,\n  data: true,\n  gasLimit: true,\n  gasPrice: true,\n  nonce: true,\n  to: true,\n  value: true,\n  type: true,\n  accessList: true,\n  maxFeePerGas: true,\n  maxPriorityFeePerGas: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n  constructor(url, network) {\n    let networkOrReady = network; // The network is unknown, query the JSON-RPC for it\n\n    if (networkOrReady == null) {\n      networkOrReady = new Promise((resolve, reject) => {\n        setTimeout(() => {\n          this.detectNetwork().then(network => {\n            resolve(network);\n          }, error => {\n            reject(error);\n          });\n        }, 0);\n      });\n    }\n\n    super(networkOrReady); // Default URL\n\n    if (!url) {\n      url = getStatic(this.constructor, \"defaultUrl\")();\n    }\n\n    if (typeof url === \"string\") {\n      defineReadOnly(this, \"connection\", Object.freeze({\n        url: url\n      }));\n    } else {\n      defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n    }\n\n    this._nextId = 42;\n  }\n\n  get _cache() {\n    if (this._eventLoopCache == null) {\n      this._eventLoopCache = {};\n    }\n\n    return this._eventLoopCache;\n  }\n\n  static defaultUrl() {\n    return \"http:/\\/localhost:8545\";\n  }\n\n  detectNetwork() {\n    if (!this._cache[\"detectNetwork\"]) {\n      this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork(); // Clear this cache at the beginning of the next event loop\n\n      setTimeout(() => {\n        this._cache[\"detectNetwork\"] = null;\n      }, 0);\n    }\n\n    return this._cache[\"detectNetwork\"];\n  }\n\n  _uncachedDetectNetwork() {\n    return __awaiter(this, void 0, void 0, function* () {\n      yield timer(0);\n      let chainId = null;\n\n      try {\n        chainId = yield this.send(\"eth_chainId\", []);\n      } catch (error) {\n        try {\n          chainId = yield this.send(\"net_version\", []);\n        } catch (error) {}\n      }\n\n      if (chainId != null) {\n        const getNetwork = getStatic(this.constructor, \"getNetwork\");\n\n        try {\n          return getNetwork(BigNumber.from(chainId).toNumber());\n        } catch (error) {\n          return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            chainId: chainId,\n            event: \"invalidNetwork\",\n            serverError: error\n          });\n        }\n      }\n\n      return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n        event: \"noNetwork\"\n      });\n    });\n  }\n\n  getSigner(addressOrIndex) {\n    return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n  }\n\n  getUncheckedSigner(addressOrIndex) {\n    return this.getSigner(addressOrIndex).connectUnchecked();\n  }\n\n  listAccounts() {\n    return this.send(\"eth_accounts\", []).then(accounts => {\n      return accounts.map(a => this.formatter.address(a));\n    });\n  }\n\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n    this.emit(\"debug\", {\n      action: \"request\",\n      request: deepCopy(request),\n      provider: this\n    }); // We can expand this in the future to any call, but for now these\n    // are the biggest wins and do not require any serializing parameters.\n\n    const cache = [\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0;\n\n    if (cache && this._cache[method]) {\n      return this._cache[method];\n    }\n\n    const result = fetchJson(this.connection, JSON.stringify(request), getResult).then(result => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        request: request,\n        response: result,\n        provider: this\n      });\n      return result;\n    }, error => {\n      this.emit(\"debug\", {\n        action: \"response\",\n        error: error,\n        request: request,\n        provider: this\n      });\n      throw error;\n    }); // Cache the fetch, but clear it on the next event loop\n\n    if (cache) {\n      this._cache[method] = result;\n      setTimeout(() => {\n        this._cache[method] = null;\n      }, 0);\n    }\n\n    return result;\n  }\n\n  prepareRequest(method, params) {\n    switch (method) {\n      case \"getBlockNumber\":\n        return [\"eth_blockNumber\", []];\n\n      case \"getGasPrice\":\n        return [\"eth_gasPrice\", []];\n\n      case \"getBalance\":\n        return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getTransactionCount\":\n        return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getCode\":\n        return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n\n      case \"getStorageAt\":\n        return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\n\n      case \"sendTransaction\":\n        return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n\n      case \"getBlock\":\n        if (params.blockTag) {\n          return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n        } else if (params.blockHash) {\n          return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n        }\n\n        return null;\n\n      case \"getTransaction\":\n        return [\"eth_getTransactionByHash\", [params.transactionHash]];\n\n      case \"getTransactionReceipt\":\n        return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n\n      case \"call\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_call\", [hexlifyTransaction(params.transaction, {\n            from: true\n          }), params.blockTag]];\n        }\n\n      case \"estimateGas\":\n        {\n          const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n          return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, {\n            from: true\n          })]];\n        }\n\n      case \"getLogs\":\n        if (params.filter && params.filter.address != null) {\n          params.filter.address = getLowerCase(params.filter.address);\n        }\n\n        return [\"eth_getLogs\", [params.filter]];\n\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  perform(method, params) {\n    return __awaiter(this, void 0, void 0, function* () {\n      // Legacy networks do not like the type field being passed along (which\n      // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n      if (method === \"call\" || method === \"estimateGas\") {\n        const tx = params.transaction;\n\n        if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n          // If there are no EIP-1559 properties, it might be non-EIP-1559\n          if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n            const feeData = yield this.getFeeData();\n\n            if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n              // Network doesn't know about EIP-1559 (and hence type)\n              params = shallowCopy(params);\n              params.transaction = shallowCopy(tx);\n              delete params.transaction.type;\n            }\n          }\n        }\n      }\n\n      const args = this.prepareRequest(method, params);\n\n      if (args == null) {\n        logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, {\n          operation: method\n        });\n      }\n\n      try {\n        return yield this.send(args[0], args[1]);\n      } catch (error) {\n        return checkError(method, error, params);\n      }\n    });\n  }\n\n  _startEvent(event) {\n    if (event.tag === \"pending\") {\n      this._startPending();\n    }\n\n    super._startEvent(event);\n  }\n\n  _startPending() {\n    if (this._pendingFilter != null) {\n      return;\n    }\n\n    const self = this;\n    const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n    this._pendingFilter = pendingFilter;\n    pendingFilter.then(function (filterId) {\n      function poll() {\n        self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n          if (self._pendingFilter != pendingFilter) {\n            return null;\n          }\n\n          let seq = Promise.resolve();\n          hashes.forEach(function (hash) {\n            // @TODO: This should be garbage collected at some point... How? When?\n            self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n            seq = seq.then(function () {\n              return self.getTransaction(hash).then(function (tx) {\n                self.emit(\"pending\", tx);\n                return null;\n              });\n            });\n          });\n          return seq.then(function () {\n            return timer(1000);\n          });\n        }).then(function () {\n          if (self._pendingFilter != pendingFilter) {\n            self.send(\"eth_uninstallFilter\", [filterId]);\n            return;\n          }\n\n          setTimeout(function () {\n            poll();\n          }, 0);\n          return null;\n        }).catch(error => {});\n      }\n\n      poll();\n      return filterId;\n    }).catch(error => {});\n  }\n\n  _stopEvent(event) {\n    if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n      this._pendingFilter = null;\n    }\n\n    super._stopEvent(event);\n  } // Convert an ethers.js transaction into a JSON-RPC transaction\n  //  - gasLimit => gas\n  //  - All values hexlified\n  //  - All numeric values zero-striped\n  //  - All addresses are lowercased\n  // NOTE: This allows a TransactionRequest, but all values should be resolved\n  //       before this is called\n  // @TODO: This will likely be removed in future versions and prepareRequest\n  //        will be the preferred method for this.\n\n\n  static hexlifyTransaction(transaction, allowExtra) {\n    // Check only allowed properties are given\n    const allowed = shallowCopy(allowedTransactionKeys);\n\n    if (allowExtra) {\n      for (const key in allowExtra) {\n        if (allowExtra[key]) {\n          allowed[key] = true;\n        }\n      }\n    }\n\n    checkProperties(transaction, allowed);\n    const result = {}; // JSON-RPC now requires numeric values to be \"quantity\" values\n\n    [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      const value = hexValue(BigNumber.from(transaction[key]));\n\n      if (key === \"gasLimit\") {\n        key = \"gas\";\n      }\n\n      result[key] = value;\n    });\n    [\"from\", \"to\", \"data\"].forEach(function (key) {\n      if (transaction[key] == null) {\n        return;\n      }\n\n      result[key] = hexlify(transaction[key]);\n    });\n\n    if (transaction.accessList) {\n      result[\"accessList\"] = accessListify(transaction.accessList);\n    }\n\n    return result;\n  }\n\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","Signer","BigNumber","hexlify","hexValue","hexZeroPad","isHexString","_TypedDataEncoder","checkProperties","deepCopy","defineReadOnly","getStatic","resolveProperties","shallowCopy","toUtf8Bytes","accessListify","fetchJson","poll","Logger","version","logger","BaseProvider","errorGas","spelunk","requireData","message","match","data","key","JSON","parse","error","checkError","method","params","transaction","signedTransaction","throwError","errors","CALL_EXCEPTION","body","UNPREDICTABLE_GAS_LIMIT","reason","code","SERVER_ERROR","responseText","toLowerCase","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNSUPPORTED_OPERATION","indexOf","timer","timeout","setTimeout","getResult","payload","Error","getLowerCase","_constructorGuard","JsonRpcSigner","constructor","constructorGuard","provider","addressOrIndex","formatter","address","throwArgumentError","connect","operation","connectUnchecked","UncheckedJsonRpcSigner","_address","_index","getAddress","send","accounts","length","sendUncheckedTransaction","fromAddress","gasLimit","estimate","from","estimateGas","to","resolveName","tx","sender","hexTx","hexlifyTransaction","hash","ACTION_REJECTED","action","signTransaction","sendTransaction","blockNumber","_getInternalBlockNumber","pollingInterval","getTransaction","undefined","_wrapTransaction","oncePoll","transactionHash","signMessage","messageData","_legacySignMessage","_signTypedData","domain","types","populated","resolveNames","name","stringify","getPayload","unlock","password","nonce","gasPrice","chainId","confirmations","wait","waitForTransaction","allowedTransactionKeys","type","accessList","maxFeePerGas","maxPriorityFeePerGas","JsonRpcProvider","url","network","networkOrReady","detectNetwork","Object","freeze","_nextId","_cache","_eventLoopCache","defaultUrl","_uncachedDetectNetwork","getNetwork","toNumber","NETWORK_ERROR","event","serverError","getSigner","getUncheckedSigner","listAccounts","map","a","request","id","jsonrpc","emit","cache","connection","response","prepareRequest","blockTag","position","includeTransactions","blockHash","filter","perform","isZero","feeData","getFeeData","args","NOT_IMPLEMENTED","_startEvent","tag","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","forEach","_emitted","catch","_stopEvent","listenerCount","allowExtra","allowed"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/providers/lib.esm/json-rpc-provider.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Signer } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { checkProperties, deepCopy, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BaseProvider } from \"./base-provider\";\nconst errorGas = [\"call\", \"estimateGas\"];\nfunction spelunk(value, requireData) {\n    if (value == null) {\n        return null;\n    }\n    // These *are* the droids we're looking for.\n    if (typeof (value.message) === \"string\" && value.message.match(\"reverted\")) {\n        const data = isHexString(value.data) ? value.data : null;\n        if (!requireData || data) {\n            return { message: value.message, data };\n        }\n    }\n    // Spelunk further...\n    if (typeof (value) === \"object\") {\n        for (const key in value) {\n            const result = spelunk(value[key], requireData);\n            if (result) {\n                return result;\n            }\n        }\n        return null;\n    }\n    // Might be a JSON string we can further descend...\n    if (typeof (value) === \"string\") {\n        try {\n            return spelunk(JSON.parse(value), requireData);\n        }\n        catch (error) { }\n    }\n    return null;\n}\nfunction checkError(method, error, params) {\n    const transaction = params.transaction || params.signedTransaction;\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\") {\n        const result = spelunk(error, true);\n        if (result) {\n            return result.data;\n        }\n        // Nothing descriptive..\n        logger.throwError(\"missing revert data in call exception; Transaction reverted without a reason string\", Logger.errors.CALL_EXCEPTION, {\n            data: \"0x\", transaction, error\n        });\n    }\n    if (method === \"estimateGas\") {\n        // Try to find something, with a preference on SERVER_ERROR body\n        let result = spelunk(error.body, false);\n        if (result == null) {\n            result = spelunk(error, false);\n        }\n        // Found \"reverted\", this is a CALL_EXCEPTION\n        if (result) {\n            logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n                reason: result.message, method, transaction, error\n            });\n        }\n    }\n    // @TODO: Should we spelunk for message too?\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof (error.error.message) === \"string\") {\n        message = error.error.message;\n    }\n    else if (typeof (error.body) === \"string\") {\n        message = error.body;\n    }\n    else if (typeof (error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit|InsufficientFunds/i)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n    // \"nonce too low\"\n    if (message.match(/nonce (is )?too low/i)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced|transaction gas price.*too low/i)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/i)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted|revert/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n    throw error;\n}\nfunction timer(timeout) {\n    return new Promise(function (resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\nfunction getResult(payload) {\n    if (payload.error) {\n        // @TODO: not any\n        const error = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n    return payload.result;\n}\nfunction getLowerCase(value) {\n    if (value) {\n        return value.toLowerCase();\n    }\n    return value;\n}\nconst _constructorGuard = {};\nexport class JsonRpcSigner extends Signer {\n    constructor(constructorGuard, provider, addressOrIndex) {\n        super();\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n        defineReadOnly(this, \"provider\", provider);\n        if (addressOrIndex == null) {\n            addressOrIndex = 0;\n        }\n        if (typeof (addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n        }\n        else if (typeof (addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n        }\n        else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n    connect(provider) {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n    connectUnchecked() {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n    getAddress() {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index]);\n        });\n    }\n    sendUncheckedTransaction(transaction) {\n        transaction = shallowCopy(transaction);\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) {\n                address = address.toLowerCase();\n            }\n            return address;\n        });\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then((to) => __awaiter(this, void 0, void 0, function* () {\n                if (to == null) {\n                    return null;\n                }\n                const address = yield this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            }));\n        }\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            }\n            else {\n                tx.from = sender;\n            }\n            const hexTx = this.provider.constructor.hexlifyTransaction(tx, { from: true });\n            return this.provider.send(\"eth_sendTransaction\", [hexTx]).then((hash) => {\n                return hash;\n            }, (error) => {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected transaction\", Logger.errors.ACTION_REJECTED, {\n                        action: \"sendTransaction\",\n                        transaction: tx\n                    });\n                }\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n    signTransaction(transaction) {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n    sendTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // This cannot be mined any earlier than any recent block\n            const blockNumber = yield this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n            // Send the transaction\n            const hash = yield this.sendUncheckedTransaction(transaction);\n            try {\n                // Unfortunately, JSON-RPC only provides and opaque transaction hash\n                // for a response, and we need the actual transaction, so we poll\n                // for it; it should show up very quickly\n                return yield poll(() => __awaiter(this, void 0, void 0, function* () {\n                    const tx = yield this.provider.getTransaction(hash);\n                    if (tx === null) {\n                        return undefined;\n                    }\n                    return this.provider._wrapTransaction(tx, hash, blockNumber);\n                }), { oncePoll: this.provider });\n            }\n            catch (error) {\n                error.transactionHash = hash;\n                throw error;\n            }\n        });\n    }\n    signMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\n            const address = yield this.getAddress();\n            try {\n                return yield this.provider.send(\"personal_sign\", [hexlify(data), address.toLowerCase()]);\n            }\n            catch (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                        action: \"signMessage\",\n                        from: address,\n                        messageData: message\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    _legacySignMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const data = ((typeof (message) === \"string\") ? toUtf8Bytes(message) : message);\n            const address = yield this.getAddress();\n            try {\n                // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n                return yield this.provider.send(\"eth_sign\", [address.toLowerCase(), hexlify(data)]);\n            }\n            catch (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                        action: \"_legacySignMessage\",\n                        from: address,\n                        messageData: message\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    _signTypedData(domain, types, value) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Populate any ENS names (in-place)\n            const populated = yield _TypedDataEncoder.resolveNames(domain, types, value, (name) => {\n                return this.provider.resolveName(name);\n            });\n            const address = yield this.getAddress();\n            try {\n                return yield this.provider.send(\"eth_signTypedData_v4\", [\n                    address.toLowerCase(),\n                    JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n                ]);\n            }\n            catch (error) {\n                if (typeof (error.message) === \"string\" && error.message.match(/user denied/i)) {\n                    logger.throwError(\"user rejected signing\", Logger.errors.ACTION_REJECTED, {\n                        action: \"_signTypedData\",\n                        from: address,\n                        messageData: { domain: populated.domain, types, value: populated.value }\n                    });\n                }\n                throw error;\n            }\n        });\n    }\n    unlock(password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const provider = this.provider;\n            const address = yield this.getAddress();\n            return provider.send(\"personal_unlockAccount\", [address.toLowerCase(), password, null]);\n        });\n    }\n}\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction) {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return {\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\nconst allowedTransactionKeys = {\n    chainId: true, data: true, gasLimit: true, gasPrice: true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n};\nexport class JsonRpcProvider extends BaseProvider {\n    constructor(url, network) {\n        let networkOrReady = network;\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n        super(networkOrReady);\n        // Default URL\n        if (!url) {\n            url = getStatic(this.constructor, \"defaultUrl\")();\n        }\n        if (typeof (url) === \"string\") {\n            defineReadOnly(this, \"connection\", Object.freeze({\n                url: url\n            }));\n        }\n        else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n        this._nextId = 42;\n    }\n    get _cache() {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = {};\n        }\n        return this._eventLoopCache;\n    }\n    static defaultUrl() {\n        return \"http:/\\/localhost:8545\";\n    }\n    detectNetwork() {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n    _uncachedDetectNetwork() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield timer(0);\n            let chainId = null;\n            try {\n                chainId = yield this.send(\"eth_chainId\", []);\n            }\n            catch (error) {\n                try {\n                    chainId = yield this.send(\"net_version\", []);\n                }\n                catch (error) { }\n            }\n            if (chainId != null) {\n                const getNetwork = getStatic(this.constructor, \"getNetwork\");\n                try {\n                    return getNetwork(BigNumber.from(chainId).toNumber());\n                }\n                catch (error) {\n                    return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                        chainId: chainId,\n                        event: \"invalidNetwork\",\n                        serverError: error\n                    });\n                }\n            }\n            return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                event: \"noNetwork\"\n            });\n        });\n    }\n    getSigner(addressOrIndex) {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n    getUncheckedSigner(addressOrIndex) {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n    listAccounts() {\n        return this.send(\"eth_accounts\", []).then((accounts) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([\"eth_chainId\", \"eth_blockNumber\"].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n            return result;\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n            throw error;\n        });\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n        return result;\n    }\n    prepareRequest(method, params) {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [\"eth_blockNumber\", []];\n            case \"getGasPrice\":\n                return [\"eth_gasPrice\", []];\n            case \"getBalance\":\n                return [\"eth_getBalance\", [getLowerCase(params.address), params.blockTag]];\n            case \"getTransactionCount\":\n                return [\"eth_getTransactionCount\", [getLowerCase(params.address), params.blockTag]];\n            case \"getCode\":\n                return [\"eth_getCode\", [getLowerCase(params.address), params.blockTag]];\n            case \"getStorageAt\":\n                return [\"eth_getStorageAt\", [getLowerCase(params.address), hexZeroPad(params.position, 32), params.blockTag]];\n            case \"sendTransaction\":\n                return [\"eth_sendRawTransaction\", [params.signedTransaction]];\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [\"eth_getBlockByNumber\", [params.blockTag, !!params.includeTransactions]];\n                }\n                else if (params.blockHash) {\n                    return [\"eth_getBlockByHash\", [params.blockHash, !!params.includeTransactions]];\n                }\n                return null;\n            case \"getTransaction\":\n                return [\"eth_getTransactionByHash\", [params.transactionHash]];\n            case \"getTransactionReceipt\":\n                return [\"eth_getTransactionReceipt\", [params.transactionHash]];\n            case \"call\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_call\", [hexlifyTransaction(params.transaction, { from: true }), params.blockTag]];\n            }\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic(this.constructor, \"hexlifyTransaction\");\n                return [\"eth_estimateGas\", [hexlifyTransaction(params.transaction, { from: true })]];\n            }\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [\"eth_getLogs\", [params.filter]];\n            default:\n                break;\n        }\n        return null;\n    }\n    perform(method, params) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // Legacy networks do not like the type field being passed along (which\n            // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n            if (method === \"call\" || method === \"estimateGas\") {\n                const tx = params.transaction;\n                if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                    // If there are no EIP-1559 properties, it might be non-EIP-1559\n                    if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                        const feeData = yield this.getFeeData();\n                        if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                            // Network doesn't know about EIP-1559 (and hence type)\n                            params = shallowCopy(params);\n                            params.transaction = shallowCopy(tx);\n                            delete params.transaction.type;\n                        }\n                    }\n                }\n            }\n            const args = this.prepareRequest(method, params);\n            if (args == null) {\n                logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n            }\n            try {\n                return yield this.send(args[0], args[1]);\n            }\n            catch (error) {\n                return checkError(method, error, params);\n            }\n        });\n    }\n    _startEvent(event) {\n        if (event.tag === \"pending\") {\n            this._startPending();\n        }\n        super._startEvent(event);\n    }\n    _startPending() {\n        if (this._pendingFilter != null) {\n            return;\n        }\n        const self = this;\n        const pendingFilter = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n        pendingFilter.then(function (filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [filterId]).then(function (hashes) {\n                    if (self._pendingFilter != pendingFilter) {\n                        return null;\n                    }\n                    let seq = Promise.resolve();\n                    hashes.forEach(function (hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function () {\n                            return self.getTransaction(hash).then(function (tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n                    return seq.then(function () {\n                        return timer(1000);\n                    });\n                }).then(function () {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [filterId]);\n                        return;\n                    }\n                    setTimeout(function () { poll(); }, 0);\n                    return null;\n                }).catch((error) => { });\n            }\n            poll();\n            return filterId;\n        }).catch((error) => { });\n    }\n    _stopEvent(event) {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction, allowExtra) {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) {\n                    allowed[key] = true;\n                }\n            }\n        }\n        checkProperties(transaction, allowed);\n        const result = {};\n        // JSON-RPC now requires numeric values to be \"quantity\" values\n        [\"chainId\", \"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            const value = hexValue(BigNumber.from(transaction[key]));\n            if (key === \"gasLimit\") {\n                key = \"gas\";\n            }\n            result[key] = value;\n        });\n        [\"from\", \"to\", \"data\"].forEach(function (key) {\n            if (transaction[key] == null) {\n                return;\n            }\n            result[key] = hexlify(transaction[key]);\n        });\n        if (transaction.accessList) {\n            result[\"accessList\"] = accessListify(transaction.accessList);\n        }\n        return result;\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}