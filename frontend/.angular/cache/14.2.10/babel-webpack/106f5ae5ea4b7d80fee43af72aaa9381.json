{"ast":null,"code":"\"use strict\";\n\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = {\n  debug: 1,\n  \"default\": 2,\n  info: 2,\n  warning: 3,\n  error: 4,\n  off: 5\n};\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\n\nfunction _checkNormalize() {\n  try {\n    const missing = []; // Make sure all forms of normalization are supported\n\n    [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach(form => {\n      try {\n        if (\"test\".normalize(form) !== \"test\") {\n          throw new Error(\"bad normalize\");\n        }\n\n        ;\n      } catch (error) {\n        missing.push(form);\n      }\n    });\n\n    if (missing.length) {\n      throw new Error(\"missing \" + missing.join(\", \"));\n    }\n\n    if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n      throw new Error(\"broken implementation\");\n    }\n  } catch (error) {\n    return error.message;\n  }\n\n  return null;\n}\n\nconst _normalizeError = _checkNormalize();\n\nexport var LogLevel;\n\n(function (LogLevel) {\n  LogLevel[\"DEBUG\"] = \"DEBUG\";\n  LogLevel[\"INFO\"] = \"INFO\";\n  LogLevel[\"WARNING\"] = \"WARNING\";\n  LogLevel[\"ERROR\"] = \"ERROR\";\n  LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\n\nexport var ErrorCode;\n\n(function (ErrorCode) {\n  ///////////////////\n  // Generic Errors\n  // Unknown Error\n  ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\"; // Not Implemented\n\n  ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\"; // Unsupported Operation\n  //   - operation\n\n  ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\"; // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n  //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n\n  ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\"; // Some sort of bad response from the server\n\n  ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\"; // Timeout\n\n  ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\"; ///////////////////\n  // Operational  Errors\n  // Buffer Overrun\n\n  ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\"; // Numeric Fault\n  //   - operation: the operation being executed\n  //   - fault: the reason this faulted\n\n  ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\"; ///////////////////\n  // Argument Errors\n  // Missing new operator to an object\n  //  - name: The name of the class\n\n  ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\"; // Invalid argument (e.g. value is incompatible with type) to a function:\n  //   - argument: The argument name that was invalid\n  //   - value: The value of the argument\n\n  ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\"; // Missing argument to a function:\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\"; // Too many arguments\n  //   - count: The number of arguments received\n  //   - expectedCount: The number of arguments expected\n\n  ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\"; ///////////////////\n  // Blockchain Errors\n  // Call exception\n  //  - transaction: the transaction\n  //  - address?: the contract address\n  //  - args?: The arguments passed into the function\n  //  - method?: The Solidity method signature\n  //  - errorSignature?: The EIP848 error signature\n  //  - errorArgs?: The EIP848 error parameters\n  //  - reason: The reason (only for EIP848 \"Error(string)\")\n\n  ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\"; // Insufficient funds (< value + gasLimit * gasPrice)\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\"; // Nonce has already been used\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\"; // The replacement fee for the transaction is too low\n  //   - transaction: the transaction attempted\n\n  ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\"; // The gas limit could not be estimated\n  //   - transaction: the transaction passed to estimateGas\n\n  ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\"; // The transaction was replaced by one with a higher gas price\n  //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n  //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n  //   - hash: original transaction hash\n  //   - replacement: the full TransactionsResponse for the replacement\n  //   - receipt: the receipt of the replacement\n\n  ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\"; ///////////////////\n  // Interaction Errors\n  // The user rejected the action, such as signing a message or sending\n  // a transaction\n\n  ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n  constructor(version) {\n    Object.defineProperty(this, \"version\", {\n      enumerable: true,\n      value: version,\n      writable: false\n    });\n  }\n\n  _log(logLevel, args) {\n    const level = logLevel.toLowerCase();\n\n    if (LogLevels[level] == null) {\n      this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n    }\n\n    if (_logLevel > LogLevels[level]) {\n      return;\n    }\n\n    console.log.apply(console, args);\n  }\n\n  debug(...args) {\n    this._log(Logger.levels.DEBUG, args);\n  }\n\n  info(...args) {\n    this._log(Logger.levels.INFO, args);\n  }\n\n  warn(...args) {\n    this._log(Logger.levels.WARNING, args);\n  }\n\n  makeError(message, code, params) {\n    // Errors are being censored\n    if (_censorErrors) {\n      return this.makeError(\"censored error\", code, {});\n    }\n\n    if (!code) {\n      code = Logger.errors.UNKNOWN_ERROR;\n    }\n\n    if (!params) {\n      params = {};\n    }\n\n    const messageDetails = [];\n    Object.keys(params).forEach(key => {\n      const value = params[key];\n\n      try {\n        if (value instanceof Uint8Array) {\n          let hex = \"\";\n\n          for (let i = 0; i < value.length; i++) {\n            hex += HEX[value[i] >> 4];\n            hex += HEX[value[i] & 0x0f];\n          }\n\n          messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n        } else {\n          messageDetails.push(key + \"=\" + JSON.stringify(value));\n        }\n      } catch (error) {\n        messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n      }\n    });\n    messageDetails.push(`code=${code}`);\n    messageDetails.push(`version=${this.version}`);\n    const reason = message;\n    let url = \"\";\n\n    switch (code) {\n      case ErrorCode.NUMERIC_FAULT:\n        {\n          url = \"NUMERIC_FAULT\";\n          const fault = message;\n\n          switch (fault) {\n            case \"overflow\":\n            case \"underflow\":\n            case \"division-by-zero\":\n              url += \"-\" + fault;\n              break;\n\n            case \"negative-power\":\n            case \"negative-width\":\n              url += \"-unsupported\";\n              break;\n\n            case \"unbound-bitwise-result\":\n              url += \"-unbound-result\";\n              break;\n          }\n\n          break;\n        }\n\n      case ErrorCode.CALL_EXCEPTION:\n      case ErrorCode.INSUFFICIENT_FUNDS:\n      case ErrorCode.MISSING_NEW:\n      case ErrorCode.NONCE_EXPIRED:\n      case ErrorCode.REPLACEMENT_UNDERPRICED:\n      case ErrorCode.TRANSACTION_REPLACED:\n      case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n        url = code;\n        break;\n    }\n\n    if (url) {\n      message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n    }\n\n    if (messageDetails.length) {\n      message += \" (\" + messageDetails.join(\", \") + \")\";\n    } // @TODO: Any??\n\n\n    const error = new Error(message);\n    error.reason = reason;\n    error.code = code;\n    Object.keys(params).forEach(function (key) {\n      error[key] = params[key];\n    });\n    return error;\n  }\n\n  throwError(message, code, params) {\n    throw this.makeError(message, code, params);\n  }\n\n  throwArgumentError(message, name, value) {\n    return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n      argument: name,\n      value: value\n    });\n  }\n\n  assert(condition, message, code, params) {\n    if (!!condition) {\n      return;\n    }\n\n    this.throwError(message, code, params);\n  }\n\n  assertArgument(condition, message, name, value) {\n    if (!!condition) {\n      return;\n    }\n\n    this.throwArgumentError(message, name, value);\n  }\n\n  checkNormalize(message) {\n    if (message == null) {\n      message = \"platform missing String.prototype.normalize\";\n    }\n\n    if (_normalizeError) {\n      this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"String.prototype.normalize\",\n        form: _normalizeError\n      });\n    }\n  }\n\n  checkSafeUint53(value, message) {\n    if (typeof value !== \"number\") {\n      return;\n    }\n\n    if (message == null) {\n      message = \"value not safe\";\n    }\n\n    if (value < 0 || value >= 0x1fffffffffffff) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"out-of-safe-range\",\n        value: value\n      });\n    }\n\n    if (value % 1) {\n      this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n        operation: \"checkSafeInteger\",\n        fault: \"non-integer\",\n        value: value\n      });\n    }\n  }\n\n  checkArgumentCount(count, expectedCount, message) {\n    if (message) {\n      message = \": \" + message;\n    } else {\n      message = \"\";\n    }\n\n    if (count < expectedCount) {\n      this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n\n    if (count > expectedCount) {\n      this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n        count: count,\n        expectedCount: expectedCount\n      });\n    }\n  }\n\n  checkNew(target, kind) {\n    if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  checkAbstract(target, kind) {\n    if (target === kind) {\n      this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, {\n        name: target.name,\n        operation: \"new\"\n      });\n    } else if (target === Object || target == null) {\n      this.throwError(\"missing new\", Logger.errors.MISSING_NEW, {\n        name: kind.name\n      });\n    }\n  }\n\n  static globalLogger() {\n    if (!_globalLogger) {\n      _globalLogger = new Logger(version);\n    }\n\n    return _globalLogger;\n  }\n\n  static setCensorship(censorship, permanent) {\n    if (!censorship && permanent) {\n      this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    if (_permanentCensorErrors) {\n      if (!censorship) {\n        return;\n      }\n\n      this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"setCensorship\"\n      });\n    }\n\n    _censorErrors = !!censorship;\n    _permanentCensorErrors = !!permanent;\n  }\n\n  static setLogLevel(logLevel) {\n    const level = LogLevels[logLevel.toLowerCase()];\n\n    if (level == null) {\n      Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n      return;\n    }\n\n    _logLevel = level;\n  }\n\n  static from(version) {\n    return new Logger(version);\n  }\n\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;","map":{"version":3,"names":["_permanentCensorErrors","_censorErrors","LogLevels","debug","info","warning","error","off","_logLevel","version","_globalLogger","_checkNormalize","missing","forEach","form","normalize","Error","push","length","join","String","fromCharCode","message","_normalizeError","LogLevel","ErrorCode","HEX","Logger","constructor","Object","defineProperty","enumerable","value","writable","_log","logLevel","args","level","toLowerCase","throwArgumentError","console","log","apply","levels","DEBUG","INFO","warn","WARNING","makeError","code","params","errors","UNKNOWN_ERROR","messageDetails","keys","key","Uint8Array","hex","i","JSON","stringify","toString","reason","url","NUMERIC_FAULT","fault","CALL_EXCEPTION","INSUFFICIENT_FUNDS","MISSING_NEW","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","TRANSACTION_REPLACED","UNPREDICTABLE_GAS_LIMIT","throwError","name","INVALID_ARGUMENT","argument","assert","condition","assertArgument","checkNormalize","UNSUPPORTED_OPERATION","operation","checkSafeUint53","checkArgumentCount","count","expectedCount","MISSING_ARGUMENT","UNEXPECTED_ARGUMENT","checkNew","target","kind","checkAbstract","globalLogger","setCensorship","censorship","permanent","setLogLevel","from"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/logger/lib.esm/index.js"],"sourcesContent":["\"use strict\";\nlet _permanentCensorErrors = false;\nlet _censorErrors = false;\nconst LogLevels = { debug: 1, \"default\": 2, info: 2, warning: 3, error: 4, off: 5 };\nlet _logLevel = LogLevels[\"default\"];\nimport { version } from \"./_version\";\nlet _globalLogger = null;\nfunction _checkNormalize() {\n    try {\n        const missing = [];\n        // Make sure all forms of normalization are supported\n        [\"NFD\", \"NFC\", \"NFKD\", \"NFKC\"].forEach((form) => {\n            try {\n                if (\"test\".normalize(form) !== \"test\") {\n                    throw new Error(\"bad normalize\");\n                }\n                ;\n            }\n            catch (error) {\n                missing.push(form);\n            }\n        });\n        if (missing.length) {\n            throw new Error(\"missing \" + missing.join(\", \"));\n        }\n        if (String.fromCharCode(0xe9).normalize(\"NFD\") !== String.fromCharCode(0x65, 0x0301)) {\n            throw new Error(\"broken implementation\");\n        }\n    }\n    catch (error) {\n        return error.message;\n    }\n    return null;\n}\nconst _normalizeError = _checkNormalize();\nexport var LogLevel;\n(function (LogLevel) {\n    LogLevel[\"DEBUG\"] = \"DEBUG\";\n    LogLevel[\"INFO\"] = \"INFO\";\n    LogLevel[\"WARNING\"] = \"WARNING\";\n    LogLevel[\"ERROR\"] = \"ERROR\";\n    LogLevel[\"OFF\"] = \"OFF\";\n})(LogLevel || (LogLevel = {}));\nexport var ErrorCode;\n(function (ErrorCode) {\n    ///////////////////\n    // Generic Errors\n    // Unknown Error\n    ErrorCode[\"UNKNOWN_ERROR\"] = \"UNKNOWN_ERROR\";\n    // Not Implemented\n    ErrorCode[\"NOT_IMPLEMENTED\"] = \"NOT_IMPLEMENTED\";\n    // Unsupported Operation\n    //   - operation\n    ErrorCode[\"UNSUPPORTED_OPERATION\"] = \"UNSUPPORTED_OPERATION\";\n    // Network Error (i.e. Ethereum Network, such as an invalid chain ID)\n    //   - event (\"noNetwork\" is not re-thrown in provider.ready; otherwise thrown)\n    ErrorCode[\"NETWORK_ERROR\"] = \"NETWORK_ERROR\";\n    // Some sort of bad response from the server\n    ErrorCode[\"SERVER_ERROR\"] = \"SERVER_ERROR\";\n    // Timeout\n    ErrorCode[\"TIMEOUT\"] = \"TIMEOUT\";\n    ///////////////////\n    // Operational  Errors\n    // Buffer Overrun\n    ErrorCode[\"BUFFER_OVERRUN\"] = \"BUFFER_OVERRUN\";\n    // Numeric Fault\n    //   - operation: the operation being executed\n    //   - fault: the reason this faulted\n    ErrorCode[\"NUMERIC_FAULT\"] = \"NUMERIC_FAULT\";\n    ///////////////////\n    // Argument Errors\n    // Missing new operator to an object\n    //  - name: The name of the class\n    ErrorCode[\"MISSING_NEW\"] = \"MISSING_NEW\";\n    // Invalid argument (e.g. value is incompatible with type) to a function:\n    //   - argument: The argument name that was invalid\n    //   - value: The value of the argument\n    ErrorCode[\"INVALID_ARGUMENT\"] = \"INVALID_ARGUMENT\";\n    // Missing argument to a function:\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"MISSING_ARGUMENT\"] = \"MISSING_ARGUMENT\";\n    // Too many arguments\n    //   - count: The number of arguments received\n    //   - expectedCount: The number of arguments expected\n    ErrorCode[\"UNEXPECTED_ARGUMENT\"] = \"UNEXPECTED_ARGUMENT\";\n    ///////////////////\n    // Blockchain Errors\n    // Call exception\n    //  - transaction: the transaction\n    //  - address?: the contract address\n    //  - args?: The arguments passed into the function\n    //  - method?: The Solidity method signature\n    //  - errorSignature?: The EIP848 error signature\n    //  - errorArgs?: The EIP848 error parameters\n    //  - reason: The reason (only for EIP848 \"Error(string)\")\n    ErrorCode[\"CALL_EXCEPTION\"] = \"CALL_EXCEPTION\";\n    // Insufficient funds (< value + gasLimit * gasPrice)\n    //   - transaction: the transaction attempted\n    ErrorCode[\"INSUFFICIENT_FUNDS\"] = \"INSUFFICIENT_FUNDS\";\n    // Nonce has already been used\n    //   - transaction: the transaction attempted\n    ErrorCode[\"NONCE_EXPIRED\"] = \"NONCE_EXPIRED\";\n    // The replacement fee for the transaction is too low\n    //   - transaction: the transaction attempted\n    ErrorCode[\"REPLACEMENT_UNDERPRICED\"] = \"REPLACEMENT_UNDERPRICED\";\n    // The gas limit could not be estimated\n    //   - transaction: the transaction passed to estimateGas\n    ErrorCode[\"UNPREDICTABLE_GAS_LIMIT\"] = \"UNPREDICTABLE_GAS_LIMIT\";\n    // The transaction was replaced by one with a higher gas price\n    //   - reason: \"cancelled\", \"replaced\" or \"repriced\"\n    //   - cancelled: true if reason == \"cancelled\" or reason == \"replaced\")\n    //   - hash: original transaction hash\n    //   - replacement: the full TransactionsResponse for the replacement\n    //   - receipt: the receipt of the replacement\n    ErrorCode[\"TRANSACTION_REPLACED\"] = \"TRANSACTION_REPLACED\";\n    ///////////////////\n    // Interaction Errors\n    // The user rejected the action, such as signing a message or sending\n    // a transaction\n    ErrorCode[\"ACTION_REJECTED\"] = \"ACTION_REJECTED\";\n})(ErrorCode || (ErrorCode = {}));\n;\nconst HEX = \"0123456789abcdef\";\nexport class Logger {\n    constructor(version) {\n        Object.defineProperty(this, \"version\", {\n            enumerable: true,\n            value: version,\n            writable: false\n        });\n    }\n    _log(logLevel, args) {\n        const level = logLevel.toLowerCase();\n        if (LogLevels[level] == null) {\n            this.throwArgumentError(\"invalid log level name\", \"logLevel\", logLevel);\n        }\n        if (_logLevel > LogLevels[level]) {\n            return;\n        }\n        console.log.apply(console, args);\n    }\n    debug(...args) {\n        this._log(Logger.levels.DEBUG, args);\n    }\n    info(...args) {\n        this._log(Logger.levels.INFO, args);\n    }\n    warn(...args) {\n        this._log(Logger.levels.WARNING, args);\n    }\n    makeError(message, code, params) {\n        // Errors are being censored\n        if (_censorErrors) {\n            return this.makeError(\"censored error\", code, {});\n        }\n        if (!code) {\n            code = Logger.errors.UNKNOWN_ERROR;\n        }\n        if (!params) {\n            params = {};\n        }\n        const messageDetails = [];\n        Object.keys(params).forEach((key) => {\n            const value = params[key];\n            try {\n                if (value instanceof Uint8Array) {\n                    let hex = \"\";\n                    for (let i = 0; i < value.length; i++) {\n                        hex += HEX[value[i] >> 4];\n                        hex += HEX[value[i] & 0x0f];\n                    }\n                    messageDetails.push(key + \"=Uint8Array(0x\" + hex + \")\");\n                }\n                else {\n                    messageDetails.push(key + \"=\" + JSON.stringify(value));\n                }\n            }\n            catch (error) {\n                messageDetails.push(key + \"=\" + JSON.stringify(params[key].toString()));\n            }\n        });\n        messageDetails.push(`code=${code}`);\n        messageDetails.push(`version=${this.version}`);\n        const reason = message;\n        let url = \"\";\n        switch (code) {\n            case ErrorCode.NUMERIC_FAULT: {\n                url = \"NUMERIC_FAULT\";\n                const fault = message;\n                switch (fault) {\n                    case \"overflow\":\n                    case \"underflow\":\n                    case \"division-by-zero\":\n                        url += \"-\" + fault;\n                        break;\n                    case \"negative-power\":\n                    case \"negative-width\":\n                        url += \"-unsupported\";\n                        break;\n                    case \"unbound-bitwise-result\":\n                        url += \"-unbound-result\";\n                        break;\n                }\n                break;\n            }\n            case ErrorCode.CALL_EXCEPTION:\n            case ErrorCode.INSUFFICIENT_FUNDS:\n            case ErrorCode.MISSING_NEW:\n            case ErrorCode.NONCE_EXPIRED:\n            case ErrorCode.REPLACEMENT_UNDERPRICED:\n            case ErrorCode.TRANSACTION_REPLACED:\n            case ErrorCode.UNPREDICTABLE_GAS_LIMIT:\n                url = code;\n                break;\n        }\n        if (url) {\n            message += \" [ See: https:/\\/links.ethers.org/v5-errors-\" + url + \" ]\";\n        }\n        if (messageDetails.length) {\n            message += \" (\" + messageDetails.join(\", \") + \")\";\n        }\n        // @TODO: Any??\n        const error = new Error(message);\n        error.reason = reason;\n        error.code = code;\n        Object.keys(params).forEach(function (key) {\n            error[key] = params[key];\n        });\n        return error;\n    }\n    throwError(message, code, params) {\n        throw this.makeError(message, code, params);\n    }\n    throwArgumentError(message, name, value) {\n        return this.throwError(message, Logger.errors.INVALID_ARGUMENT, {\n            argument: name,\n            value: value\n        });\n    }\n    assert(condition, message, code, params) {\n        if (!!condition) {\n            return;\n        }\n        this.throwError(message, code, params);\n    }\n    assertArgument(condition, message, name, value) {\n        if (!!condition) {\n            return;\n        }\n        this.throwArgumentError(message, name, value);\n    }\n    checkNormalize(message) {\n        if (message == null) {\n            message = \"platform missing String.prototype.normalize\";\n        }\n        if (_normalizeError) {\n            this.throwError(\"platform missing String.prototype.normalize\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"String.prototype.normalize\", form: _normalizeError\n            });\n        }\n    }\n    checkSafeUint53(value, message) {\n        if (typeof (value) !== \"number\") {\n            return;\n        }\n        if (message == null) {\n            message = \"value not safe\";\n        }\n        if (value < 0 || value >= 0x1fffffffffffff) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"out-of-safe-range\",\n                value: value\n            });\n        }\n        if (value % 1) {\n            this.throwError(message, Logger.errors.NUMERIC_FAULT, {\n                operation: \"checkSafeInteger\",\n                fault: \"non-integer\",\n                value: value\n            });\n        }\n    }\n    checkArgumentCount(count, expectedCount, message) {\n        if (message) {\n            message = \": \" + message;\n        }\n        else {\n            message = \"\";\n        }\n        if (count < expectedCount) {\n            this.throwError(\"missing argument\" + message, Logger.errors.MISSING_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n        if (count > expectedCount) {\n            this.throwError(\"too many arguments\" + message, Logger.errors.UNEXPECTED_ARGUMENT, {\n                count: count,\n                expectedCount: expectedCount\n            });\n        }\n    }\n    checkNew(target, kind) {\n        if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    checkAbstract(target, kind) {\n        if (target === kind) {\n            this.throwError(\"cannot instantiate abstract class \" + JSON.stringify(kind.name) + \" directly; use a sub-class\", Logger.errors.UNSUPPORTED_OPERATION, { name: target.name, operation: \"new\" });\n        }\n        else if (target === Object || target == null) {\n            this.throwError(\"missing new\", Logger.errors.MISSING_NEW, { name: kind.name });\n        }\n    }\n    static globalLogger() {\n        if (!_globalLogger) {\n            _globalLogger = new Logger(version);\n        }\n        return _globalLogger;\n    }\n    static setCensorship(censorship, permanent) {\n        if (!censorship && permanent) {\n            this.globalLogger().throwError(\"cannot permanently disable censorship\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        if (_permanentCensorErrors) {\n            if (!censorship) {\n                return;\n            }\n            this.globalLogger().throwError(\"error censorship permanent\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"setCensorship\"\n            });\n        }\n        _censorErrors = !!censorship;\n        _permanentCensorErrors = !!permanent;\n    }\n    static setLogLevel(logLevel) {\n        const level = LogLevels[logLevel.toLowerCase()];\n        if (level == null) {\n            Logger.globalLogger().warn(\"invalid log level - \" + logLevel);\n            return;\n        }\n        _logLevel = level;\n    }\n    static from(version) {\n        return new Logger(version);\n    }\n}\nLogger.errors = ErrorCode;\nLogger.levels = LogLevel;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}