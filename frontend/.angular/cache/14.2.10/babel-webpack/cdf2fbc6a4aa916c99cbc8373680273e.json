{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\n\nfunction isRenetworkable(value) {\n  return value && typeof value.renetwork === \"function\";\n}\n\nfunction ethDefaultProvider(network) {\n  const func = function (providers, options) {\n    if (options == null) {\n      options = {};\n    }\n\n    const providerList = [];\n\n    if (providers.InfuraProvider && options.infura !== \"-\") {\n      try {\n        providerList.push(new providers.InfuraProvider(network, options.infura));\n      } catch (error) {}\n    }\n\n    if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n      try {\n        providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n      } catch (error) {}\n    }\n\n    if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n      try {\n        providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n      } catch (error) {}\n    }\n\n    if (providers.PocketProvider && options.pocket !== \"-\") {\n      // These networks are currently faulty on Pocket as their\n      // network does not handle the Berlin hardfork, which is\n      // live on these ones.\n      // @TODO: This goes away once Pocket has upgraded their nodes\n      const skip = [\"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\"];\n\n      try {\n        const provider = new providers.PocketProvider(network, options.pocket);\n\n        if (provider.network && skip.indexOf(provider.network.name) === -1) {\n          providerList.push(provider);\n        }\n      } catch (error) {}\n    }\n\n    if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n      try {\n        providerList.push(new providers.CloudflareProvider(network));\n      } catch (error) {}\n    }\n\n    if (providers.AnkrProvider && options.ankr !== \"-\") {\n      try {\n        const skip = [\"ropsten\"];\n        const provider = new providers.AnkrProvider(network, options.ankr);\n\n        if (provider.network && skip.indexOf(provider.network.name) === -1) {\n          providerList.push(provider);\n        }\n      } catch (error) {}\n    }\n\n    if (providerList.length === 0) {\n      return null;\n    }\n\n    if (providers.FallbackProvider) {\n      let quorum = 1;\n\n      if (options.quorum != null) {\n        quorum = options.quorum;\n      } else if (network === \"homestead\") {\n        quorum = 2;\n      }\n\n      return new providers.FallbackProvider(providerList, quorum);\n    }\n\n    return providerList[0];\n  };\n\n  func.renetwork = function (network) {\n    return ethDefaultProvider(network);\n  };\n\n  return func;\n}\n\nfunction etcDefaultProvider(url, network) {\n  const func = function (providers, options) {\n    if (providers.JsonRpcProvider) {\n      return new providers.JsonRpcProvider(url, network);\n    }\n\n    return null;\n  };\n\n  func.renetwork = function (network) {\n    return etcDefaultProvider(url, network);\n  };\n\n  return func;\n}\n\nconst homestead = {\n  chainId: 1,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"homestead\",\n  _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n  chainId: 3,\n  ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n  name: \"ropsten\",\n  _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n  chainId: 63,\n  name: \"classicMordor\",\n  _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n}; // See: https://chainlist.org\n\nconst networks = {\n  unspecified: {\n    chainId: 0,\n    name: \"unspecified\"\n  },\n  homestead: homestead,\n  mainnet: homestead,\n  morden: {\n    chainId: 2,\n    name: \"morden\"\n  },\n  ropsten: ropsten,\n  testnet: ropsten,\n  rinkeby: {\n    chainId: 4,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"rinkeby\",\n    _defaultProvider: ethDefaultProvider(\"rinkeby\")\n  },\n  kovan: {\n    chainId: 42,\n    name: \"kovan\",\n    _defaultProvider: ethDefaultProvider(\"kovan\")\n  },\n  goerli: {\n    chainId: 5,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"goerli\",\n    _defaultProvider: ethDefaultProvider(\"goerli\")\n  },\n  kintsugi: {\n    chainId: 1337702,\n    name: \"kintsugi\"\n  },\n  sepolia: {\n    chainId: 11155111,\n    name: \"sepolia\",\n    _defaultProvider: ethDefaultProvider(\"sepolia\")\n  },\n  // ETC (See: #351)\n  classic: {\n    chainId: 61,\n    name: \"classic\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n  },\n  classicMorden: {\n    chainId: 62,\n    name: \"classicMorden\"\n  },\n  classicMordor: classicMordor,\n  classicTestnet: classicMordor,\n  classicKotti: {\n    chainId: 6,\n    name: \"classicKotti\",\n    _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n  },\n  xdai: {\n    chainId: 100,\n    name: \"xdai\"\n  },\n  matic: {\n    chainId: 137,\n    name: \"matic\",\n    _defaultProvider: ethDefaultProvider(\"matic\")\n  },\n  maticmum: {\n    chainId: 80001,\n    name: \"maticmum\"\n  },\n  optimism: {\n    chainId: 10,\n    name: \"optimism\",\n    _defaultProvider: ethDefaultProvider(\"optimism\")\n  },\n  \"optimism-kovan\": {\n    chainId: 69,\n    name: \"optimism-kovan\"\n  },\n  \"optimism-goerli\": {\n    chainId: 420,\n    name: \"optimism-goerli\"\n  },\n  arbitrum: {\n    chainId: 42161,\n    name: \"arbitrum\"\n  },\n  \"arbitrum-rinkeby\": {\n    chainId: 421611,\n    name: \"arbitrum-rinkeby\"\n  },\n  \"arbitrum-goerli\": {\n    chainId: 421613,\n    name: \"arbitrum-goerli\"\n  },\n  bnb: {\n    chainId: 56,\n    name: \"bnb\"\n  },\n  bnbt: {\n    chainId: 97,\n    name: \"bnbt\"\n  }\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\n\nexport function getNetwork(network) {\n  // No network (null)\n  if (network == null) {\n    return null;\n  }\n\n  if (typeof network === \"number\") {\n    for (const name in networks) {\n      const standard = networks[name];\n\n      if (standard.chainId === network) {\n        return {\n          name: standard.name,\n          chainId: standard.chainId,\n          ensAddress: standard.ensAddress || null,\n          _defaultProvider: standard._defaultProvider || null\n        };\n      }\n    }\n\n    return {\n      chainId: network,\n      name: \"unknown\"\n    };\n  }\n\n  if (typeof network === \"string\") {\n    const standard = networks[network];\n\n    if (standard == null) {\n      return null;\n    }\n\n    return {\n      name: standard.name,\n      chainId: standard.chainId,\n      ensAddress: standard.ensAddress,\n      _defaultProvider: standard._defaultProvider || null\n    };\n  }\n\n  const standard = networks[network.name]; // Not a standard network; check that it is a valid network in general\n\n  if (!standard) {\n    if (typeof network.chainId !== \"number\") {\n      logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n    }\n\n    return network;\n  } // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n\n\n  if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n    logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n  } // @TODO: In the next major version add an attach function to a defaultProvider\n  // class and move the _defaultProvider internal to this file (extend Network)\n\n\n  let defaultProvider = network._defaultProvider || null;\n\n  if (defaultProvider == null && standard._defaultProvider) {\n    if (isRenetworkable(standard._defaultProvider)) {\n      defaultProvider = standard._defaultProvider.renetwork(network);\n    } else {\n      defaultProvider = standard._defaultProvider;\n    }\n  } // Standard Network (allow overriding the ENS address)\n\n\n  return {\n    name: network.name,\n    chainId: standard.chainId,\n    ensAddress: network.ensAddress || standard.ensAddress || null,\n    _defaultProvider: defaultProvider\n  };\n}","map":{"version":3,"names":["Logger","version","logger","isRenetworkable","value","renetwork","ethDefaultProvider","network","func","providers","options","providerList","InfuraProvider","infura","push","error","EtherscanProvider","etherscan","AlchemyProvider","alchemy","PocketProvider","pocket","skip","provider","indexOf","name","CloudflareProvider","cloudflare","AnkrProvider","ankr","length","FallbackProvider","quorum","etcDefaultProvider","url","JsonRpcProvider","homestead","chainId","ensAddress","_defaultProvider","ropsten","classicMordor","networks","unspecified","mainnet","morden","testnet","rinkeby","kovan","goerli","kintsugi","sepolia","classic","classicMorden","classicTestnet","classicKotti","xdai","matic","maticmum","optimism","arbitrum","bnb","bnbt","getNetwork","standard","throwArgumentError","defaultProvider"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/networks/lib.esm/index.js"],"sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n;\nfunction isRenetworkable(value) {\n    return (value && typeof (value.renetwork) === \"function\");\n}\nfunction ethDefaultProvider(network) {\n    const func = function (providers, options) {\n        if (options == null) {\n            options = {};\n        }\n        const providerList = [];\n        if (providers.InfuraProvider && options.infura !== \"-\") {\n            try {\n                providerList.push(new providers.InfuraProvider(network, options.infura));\n            }\n            catch (error) { }\n        }\n        if (providers.EtherscanProvider && options.etherscan !== \"-\") {\n            try {\n                providerList.push(new providers.EtherscanProvider(network, options.etherscan));\n            }\n            catch (error) { }\n        }\n        if (providers.AlchemyProvider && options.alchemy !== \"-\") {\n            try {\n                providerList.push(new providers.AlchemyProvider(network, options.alchemy));\n            }\n            catch (error) { }\n        }\n        if (providers.PocketProvider && options.pocket !== \"-\") {\n            // These networks are currently faulty on Pocket as their\n            // network does not handle the Berlin hardfork, which is\n            // live on these ones.\n            // @TODO: This goes away once Pocket has upgraded their nodes\n            const skip = [\"goerli\", \"ropsten\", \"rinkeby\", \"sepolia\"];\n            try {\n                const provider = new providers.PocketProvider(network, options.pocket);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            }\n            catch (error) { }\n        }\n        if (providers.CloudflareProvider && options.cloudflare !== \"-\") {\n            try {\n                providerList.push(new providers.CloudflareProvider(network));\n            }\n            catch (error) { }\n        }\n        if (providers.AnkrProvider && options.ankr !== \"-\") {\n            try {\n                const skip = [\"ropsten\"];\n                const provider = new providers.AnkrProvider(network, options.ankr);\n                if (provider.network && skip.indexOf(provider.network.name) === -1) {\n                    providerList.push(provider);\n                }\n            }\n            catch (error) { }\n        }\n        if (providerList.length === 0) {\n            return null;\n        }\n        if (providers.FallbackProvider) {\n            let quorum = 1;\n            if (options.quorum != null) {\n                quorum = options.quorum;\n            }\n            else if (network === \"homestead\") {\n                quorum = 2;\n            }\n            return new providers.FallbackProvider(providerList, quorum);\n        }\n        return providerList[0];\n    };\n    func.renetwork = function (network) {\n        return ethDefaultProvider(network);\n    };\n    return func;\n}\nfunction etcDefaultProvider(url, network) {\n    const func = function (providers, options) {\n        if (providers.JsonRpcProvider) {\n            return new providers.JsonRpcProvider(url, network);\n        }\n        return null;\n    };\n    func.renetwork = function (network) {\n        return etcDefaultProvider(url, network);\n    };\n    return func;\n}\nconst homestead = {\n    chainId: 1,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"homestead\",\n    _defaultProvider: ethDefaultProvider(\"homestead\")\n};\nconst ropsten = {\n    chainId: 3,\n    ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n    name: \"ropsten\",\n    _defaultProvider: ethDefaultProvider(\"ropsten\")\n};\nconst classicMordor = {\n    chainId: 63,\n    name: \"classicMordor\",\n    _defaultProvider: etcDefaultProvider(\"https://www.ethercluster.com/mordor\", \"classicMordor\")\n};\n// See: https://chainlist.org\nconst networks = {\n    unspecified: { chainId: 0, name: \"unspecified\" },\n    homestead: homestead,\n    mainnet: homestead,\n    morden: { chainId: 2, name: \"morden\" },\n    ropsten: ropsten,\n    testnet: ropsten,\n    rinkeby: {\n        chainId: 4,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"rinkeby\",\n        _defaultProvider: ethDefaultProvider(\"rinkeby\")\n    },\n    kovan: {\n        chainId: 42,\n        name: \"kovan\",\n        _defaultProvider: ethDefaultProvider(\"kovan\")\n    },\n    goerli: {\n        chainId: 5,\n        ensAddress: \"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n        name: \"goerli\",\n        _defaultProvider: ethDefaultProvider(\"goerli\")\n    },\n    kintsugi: { chainId: 1337702, name: \"kintsugi\" },\n    sepolia: {\n        chainId: 11155111,\n        name: \"sepolia\",\n        _defaultProvider: ethDefaultProvider(\"sepolia\")\n    },\n    // ETC (See: #351)\n    classic: {\n        chainId: 61,\n        name: \"classic\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/etc\", \"classic\")\n    },\n    classicMorden: { chainId: 62, name: \"classicMorden\" },\n    classicMordor: classicMordor,\n    classicTestnet: classicMordor,\n    classicKotti: {\n        chainId: 6,\n        name: \"classicKotti\",\n        _defaultProvider: etcDefaultProvider(\"https:/\\/www.ethercluster.com/kotti\", \"classicKotti\")\n    },\n    xdai: { chainId: 100, name: \"xdai\" },\n    matic: {\n        chainId: 137,\n        name: \"matic\",\n        _defaultProvider: ethDefaultProvider(\"matic\")\n    },\n    maticmum: { chainId: 80001, name: \"maticmum\" },\n    optimism: {\n        chainId: 10,\n        name: \"optimism\",\n        _defaultProvider: ethDefaultProvider(\"optimism\")\n    },\n    \"optimism-kovan\": { chainId: 69, name: \"optimism-kovan\" },\n    \"optimism-goerli\": { chainId: 420, name: \"optimism-goerli\" },\n    arbitrum: { chainId: 42161, name: \"arbitrum\" },\n    \"arbitrum-rinkeby\": { chainId: 421611, name: \"arbitrum-rinkeby\" },\n    \"arbitrum-goerli\": { chainId: 421613, name: \"arbitrum-goerli\" },\n    bnb: { chainId: 56, name: \"bnb\" },\n    bnbt: { chainId: 97, name: \"bnbt\" },\n};\n/**\n *  getNetwork\n *\n *  Converts a named common networks or chain ID (network ID) to a Network\n *  and verifies a network is a valid Network..\n */\nexport function getNetwork(network) {\n    // No network (null)\n    if (network == null) {\n        return null;\n    }\n    if (typeof (network) === \"number\") {\n        for (const name in networks) {\n            const standard = networks[name];\n            if (standard.chainId === network) {\n                return {\n                    name: standard.name,\n                    chainId: standard.chainId,\n                    ensAddress: (standard.ensAddress || null),\n                    _defaultProvider: (standard._defaultProvider || null)\n                };\n            }\n        }\n        return {\n            chainId: network,\n            name: \"unknown\"\n        };\n    }\n    if (typeof (network) === \"string\") {\n        const standard = networks[network];\n        if (standard == null) {\n            return null;\n        }\n        return {\n            name: standard.name,\n            chainId: standard.chainId,\n            ensAddress: standard.ensAddress,\n            _defaultProvider: (standard._defaultProvider || null)\n        };\n    }\n    const standard = networks[network.name];\n    // Not a standard network; check that it is a valid network in general\n    if (!standard) {\n        if (typeof (network.chainId) !== \"number\") {\n            logger.throwArgumentError(\"invalid network chainId\", \"network\", network);\n        }\n        return network;\n    }\n    // Make sure the chainId matches the expected network chainId (or is 0; disable EIP-155)\n    if (network.chainId !== 0 && network.chainId !== standard.chainId) {\n        logger.throwArgumentError(\"network chainId mismatch\", \"network\", network);\n    }\n    // @TODO: In the next major version add an attach function to a defaultProvider\n    // class and move the _defaultProvider internal to this file (extend Network)\n    let defaultProvider = network._defaultProvider || null;\n    if (defaultProvider == null && standard._defaultProvider) {\n        if (isRenetworkable(standard._defaultProvider)) {\n            defaultProvider = standard._defaultProvider.renetwork(network);\n        }\n        else {\n            defaultProvider = standard._defaultProvider;\n        }\n    }\n    // Standard Network (allow overriding the ENS address)\n    return {\n        name: network.name,\n        chainId: standard.chainId,\n        ensAddress: (network.ensAddress || standard.ensAddress || null),\n        _defaultProvider: defaultProvider\n    };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}