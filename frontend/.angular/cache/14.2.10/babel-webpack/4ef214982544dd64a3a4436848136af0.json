{"ast":null,"code":"\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction _pack(type, value, isArray) {\n  switch (type) {\n    case \"address\":\n      if (isArray) {\n        return zeroPad(value, 32);\n      }\n\n      return arrayify(value);\n\n    case \"string\":\n      return toUtf8Bytes(value);\n\n    case \"bytes\":\n      return arrayify(value);\n\n    case \"bool\":\n      value = value ? \"0x01\" : \"0x00\";\n\n      if (isArray) {\n        return zeroPad(value, 32);\n      }\n\n      return arrayify(value);\n  }\n\n  let match = type.match(regexNumber);\n\n  if (match) {\n    //let signed = (match[1] === \"int\")\n    let size = parseInt(match[2] || \"256\");\n\n    if (match[2] && String(size) !== match[2] || size % 8 !== 0 || size === 0 || size > 256) {\n      logger.throwArgumentError(\"invalid number type\", \"type\", type);\n    }\n\n    if (isArray) {\n      size = 256;\n    }\n\n    value = BigNumber.from(value).toTwos(size);\n    return zeroPad(value, size / 8);\n  }\n\n  match = type.match(regexBytes);\n\n  if (match) {\n    const size = parseInt(match[1]);\n\n    if (String(size) !== match[1] || size === 0 || size > 32) {\n      logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n    }\n\n    if (arrayify(value).byteLength !== size) {\n      logger.throwArgumentError(`invalid value for ${type}`, \"value\", value);\n    }\n\n    if (isArray) {\n      return arrayify((value + Zeros).substring(0, 66));\n    }\n\n    return value;\n  }\n\n  match = type.match(regexArray);\n\n  if (match && Array.isArray(value)) {\n    const baseType = match[1];\n    const count = parseInt(match[2] || String(value.length));\n\n    if (count != value.length) {\n      logger.throwArgumentError(`invalid array length for ${type}`, \"value\", value);\n    }\n\n    const result = [];\n    value.forEach(function (value) {\n      result.push(_pack(baseType, value, true));\n    });\n    return concat(result);\n  }\n\n  return logger.throwArgumentError(\"invalid type\", \"type\", type);\n} // @TODO: Array Enum\n\n\nexport function pack(types, values) {\n  if (types.length != values.length) {\n    logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n  }\n\n  const tight = [];\n  types.forEach(function (type, index) {\n    tight.push(_pack(type, values[index]));\n  });\n  return hexlify(concat(tight));\n}\nexport function keccak256(types, values) {\n  return hashKeccak256(pack(types, values));\n}\nexport function sha256(types, values) {\n  return hashSha256(pack(types, values));\n}","map":{"version":3,"names":["BigNumber","arrayify","concat","hexlify","zeroPad","keccak256","hashKeccak256","sha256","hashSha256","toUtf8Bytes","regexBytes","RegExp","regexNumber","regexArray","Zeros","Logger","version","logger","_pack","type","value","isArray","match","size","parseInt","String","throwArgumentError","from","toTwos","byteLength","substring","Array","baseType","count","length","result","forEach","push","pack","types","values","tight","index"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/solidity/lib.esm/index.js"],"sourcesContent":["\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexlify, zeroPad } from \"@ethersproject/bytes\";\nimport { keccak256 as hashKeccak256 } from \"@ethersproject/keccak256\";\nimport { sha256 as hashSha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nconst regexBytes = new RegExp(\"^bytes([0-9]+)$\");\nconst regexNumber = new RegExp(\"^(u?int)([0-9]*)$\");\nconst regexArray = new RegExp(\"^(.*)\\\\[([0-9]*)\\\\]$\");\nconst Zeros = \"0000000000000000000000000000000000000000000000000000000000000000\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nfunction _pack(type, value, isArray) {\n    switch (type) {\n        case \"address\":\n            if (isArray) {\n                return zeroPad(value, 32);\n            }\n            return arrayify(value);\n        case \"string\":\n            return toUtf8Bytes(value);\n        case \"bytes\":\n            return arrayify(value);\n        case \"bool\":\n            value = (value ? \"0x01\" : \"0x00\");\n            if (isArray) {\n                return zeroPad(value, 32);\n            }\n            return arrayify(value);\n    }\n    let match = type.match(regexNumber);\n    if (match) {\n        //let signed = (match[1] === \"int\")\n        let size = parseInt(match[2] || \"256\");\n        if ((match[2] && String(size) !== match[2]) || (size % 8 !== 0) || size === 0 || size > 256) {\n            logger.throwArgumentError(\"invalid number type\", \"type\", type);\n        }\n        if (isArray) {\n            size = 256;\n        }\n        value = BigNumber.from(value).toTwos(size);\n        return zeroPad(value, size / 8);\n    }\n    match = type.match(regexBytes);\n    if (match) {\n        const size = parseInt(match[1]);\n        if (String(size) !== match[1] || size === 0 || size > 32) {\n            logger.throwArgumentError(\"invalid bytes type\", \"type\", type);\n        }\n        if (arrayify(value).byteLength !== size) {\n            logger.throwArgumentError(`invalid value for ${type}`, \"value\", value);\n        }\n        if (isArray) {\n            return arrayify((value + Zeros).substring(0, 66));\n        }\n        return value;\n    }\n    match = type.match(regexArray);\n    if (match && Array.isArray(value)) {\n        const baseType = match[1];\n        const count = parseInt(match[2] || String(value.length));\n        if (count != value.length) {\n            logger.throwArgumentError(`invalid array length for ${type}`, \"value\", value);\n        }\n        const result = [];\n        value.forEach(function (value) {\n            result.push(_pack(baseType, value, true));\n        });\n        return concat(result);\n    }\n    return logger.throwArgumentError(\"invalid type\", \"type\", type);\n}\n// @TODO: Array Enum\nexport function pack(types, values) {\n    if (types.length != values.length) {\n        logger.throwArgumentError(\"wrong number of values; expected ${ types.length }\", \"values\", values);\n    }\n    const tight = [];\n    types.forEach(function (type, index) {\n        tight.push(_pack(type, values[index]));\n    });\n    return hexlify(concat(tight));\n}\nexport function keccak256(types, values) {\n    return hashKeccak256(pack(types, values));\n}\nexport function sha256(types, values) {\n    return hashSha256(pack(types, values));\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}