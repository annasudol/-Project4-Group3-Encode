{"ast":null,"code":"\"use strict\";\n\nimport { arrayify, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BigNumber, isBigNumberish } from \"./bignumber\";\nconst _constructorGuard = {};\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1);\n\nfunction throwFault(message, fault, operation, value) {\n  const params = {\n    fault: fault,\n    operation: operation\n  };\n\n  if (value !== undefined) {\n    params.value = value;\n  }\n\n  return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n} // Constant to pull zeros from for multipliers\n\n\nlet zeros = \"0\";\n\nwhile (zeros.length < 256) {\n  zeros += zeros;\n} // Returns a string \"1\" followed by decimal \"0\"s\n\n\nfunction getMultiplier(decimals) {\n  if (typeof decimals !== \"number\") {\n    try {\n      decimals = BigNumber.from(decimals).toNumber();\n    } catch (e) {}\n  }\n\n  if (typeof decimals === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n    return \"1\" + zeros.substring(0, decimals);\n  }\n\n  return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\n\nexport function formatFixed(value, decimals) {\n  if (decimals == null) {\n    decimals = 0;\n  }\n\n  const multiplier = getMultiplier(decimals); // Make sure wei is a big number (convert as necessary)\n\n  value = BigNumber.from(value);\n  const negative = value.lt(Zero);\n\n  if (negative) {\n    value = value.mul(NegativeOne);\n  }\n\n  let fraction = value.mod(multiplier).toString();\n\n  while (fraction.length < multiplier.length - 1) {\n    fraction = \"0\" + fraction;\n  } // Strip training 0\n\n\n  fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n  const whole = value.div(multiplier).toString();\n\n  if (multiplier.length === 1) {\n    value = whole;\n  } else {\n    value = whole + \".\" + fraction;\n  }\n\n  if (negative) {\n    value = \"-\" + value;\n  }\n\n  return value;\n}\nexport function parseFixed(value, decimals) {\n  if (decimals == null) {\n    decimals = 0;\n  }\n\n  const multiplier = getMultiplier(decimals);\n\n  if (typeof value !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n    logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n  } // Is it negative?\n\n\n  const negative = value.substring(0, 1) === \"-\";\n\n  if (negative) {\n    value = value.substring(1);\n  }\n\n  if (value === \".\") {\n    logger.throwArgumentError(\"missing value\", \"value\", value);\n  } // Split it into a whole and fractional part\n\n\n  const comps = value.split(\".\");\n\n  if (comps.length > 2) {\n    logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n  }\n\n  let whole = comps[0],\n      fraction = comps[1];\n\n  if (!whole) {\n    whole = \"0\";\n  }\n\n  if (!fraction) {\n    fraction = \"0\";\n  } // Trim trailing zeros\n\n\n  while (fraction[fraction.length - 1] === \"0\") {\n    fraction = fraction.substring(0, fraction.length - 1);\n  } // Check the fraction doesn't exceed our decimals size\n\n\n  if (fraction.length > multiplier.length - 1) {\n    throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n  } // If decimals is 0, we have an empty string for fraction\n\n\n  if (fraction === \"\") {\n    fraction = \"0\";\n  } // Fully pad the string with zeros to get to wei\n\n\n  while (fraction.length < multiplier.length - 1) {\n    fraction += \"0\";\n  }\n\n  const wholeValue = BigNumber.from(whole);\n  const fractionValue = BigNumber.from(fraction);\n  let wei = wholeValue.mul(multiplier).add(fractionValue);\n\n  if (negative) {\n    wei = wei.mul(NegativeOne);\n  }\n\n  return wei;\n}\nexport class FixedFormat {\n  constructor(constructorGuard, signed, width, decimals) {\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new FixedFormat\"\n      });\n    }\n\n    this.signed = signed;\n    this.width = width;\n    this.decimals = decimals;\n    this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n    this._multiplier = getMultiplier(decimals);\n    Object.freeze(this);\n  }\n\n  static from(value) {\n    if (value instanceof FixedFormat) {\n      return value;\n    }\n\n    if (typeof value === \"number\") {\n      value = `fixed128x${value}`;\n    }\n\n    let signed = true;\n    let width = 128;\n    let decimals = 18;\n\n    if (typeof value === \"string\") {\n      if (value === \"fixed\") {// defaults...\n      } else if (value === \"ufixed\") {\n        signed = false;\n      } else {\n        const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n\n        if (!match) {\n          logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n        }\n\n        signed = match[1] !== \"u\";\n        width = parseInt(match[2]);\n        decimals = parseInt(match[3]);\n      }\n    } else if (value) {\n      const check = (key, type, defaultValue) => {\n        if (value[key] == null) {\n          return defaultValue;\n        }\n\n        if (typeof value[key] !== type) {\n          logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n        }\n\n        return value[key];\n      };\n\n      signed = check(\"signed\", \"boolean\", signed);\n      width = check(\"width\", \"number\", width);\n      decimals = check(\"decimals\", \"number\", decimals);\n    }\n\n    if (width % 8) {\n      logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n    }\n\n    if (decimals > 80) {\n      logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n    }\n\n    return new FixedFormat(_constructorGuard, signed, width, decimals);\n  }\n\n}\nexport class FixedNumber {\n  constructor(constructorGuard, hex, value, format) {\n    if (constructorGuard !== _constructorGuard) {\n      logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n        operation: \"new FixedFormat\"\n      });\n    }\n\n    this.format = format;\n    this._hex = hex;\n    this._value = value;\n    this._isFixedNumber = true;\n    Object.freeze(this);\n  }\n\n  _checkFormat(other) {\n    if (this.format.name !== other.format.name) {\n      logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n    }\n  }\n\n  addUnsafe(other) {\n    this._checkFormat(other);\n\n    const a = parseFixed(this._value, this.format.decimals);\n    const b = parseFixed(other._value, other.format.decimals);\n    return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n  }\n\n  subUnsafe(other) {\n    this._checkFormat(other);\n\n    const a = parseFixed(this._value, this.format.decimals);\n    const b = parseFixed(other._value, other.format.decimals);\n    return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n  }\n\n  mulUnsafe(other) {\n    this._checkFormat(other);\n\n    const a = parseFixed(this._value, this.format.decimals);\n    const b = parseFixed(other._value, other.format.decimals);\n    return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n  }\n\n  divUnsafe(other) {\n    this._checkFormat(other);\n\n    const a = parseFixed(this._value, this.format.decimals);\n    const b = parseFixed(other._value, other.format.decimals);\n    return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n  }\n\n  floor() {\n    const comps = this.toString().split(\".\");\n\n    if (comps.length === 1) {\n      comps.push(\"0\");\n    }\n\n    let result = FixedNumber.from(comps[0], this.format);\n    const hasFraction = !comps[1].match(/^(0*)$/);\n\n    if (this.isNegative() && hasFraction) {\n      result = result.subUnsafe(ONE.toFormat(result.format));\n    }\n\n    return result;\n  }\n\n  ceiling() {\n    const comps = this.toString().split(\".\");\n\n    if (comps.length === 1) {\n      comps.push(\"0\");\n    }\n\n    let result = FixedNumber.from(comps[0], this.format);\n    const hasFraction = !comps[1].match(/^(0*)$/);\n\n    if (!this.isNegative() && hasFraction) {\n      result = result.addUnsafe(ONE.toFormat(result.format));\n    }\n\n    return result;\n  } // @TODO: Support other rounding algorithms\n\n\n  round(decimals) {\n    if (decimals == null) {\n      decimals = 0;\n    } // If we are already in range, we're done\n\n\n    const comps = this.toString().split(\".\");\n\n    if (comps.length === 1) {\n      comps.push(\"0\");\n    }\n\n    if (decimals < 0 || decimals > 80 || decimals % 1) {\n      logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n    }\n\n    if (comps[1].length <= decimals) {\n      return this;\n    }\n\n    const factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n    const bump = BUMP.toFormat(this.format);\n    return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n  }\n\n  isZero() {\n    return this._value === \"0.0\" || this._value === \"0\";\n  }\n\n  isNegative() {\n    return this._value[0] === \"-\";\n  }\n\n  toString() {\n    return this._value;\n  }\n\n  toHexString(width) {\n    if (width == null) {\n      return this._hex;\n    }\n\n    if (width % 8) {\n      logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n    }\n\n    const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n    return hexZeroPad(hex, width / 8);\n  }\n\n  toUnsafeFloat() {\n    return parseFloat(this.toString());\n  }\n\n  toFormat(format) {\n    return FixedNumber.fromString(this._value, format);\n  }\n\n  static fromValue(value, decimals, format) {\n    // If decimals looks more like a format, and there is no format, shift the parameters\n    if (format == null && decimals != null && !isBigNumberish(decimals)) {\n      format = decimals;\n      decimals = null;\n    }\n\n    if (decimals == null) {\n      decimals = 0;\n    }\n\n    if (format == null) {\n      format = \"fixed\";\n    }\n\n    return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n  }\n\n  static fromString(value, format) {\n    if (format == null) {\n      format = \"fixed\";\n    }\n\n    const fixedFormat = FixedFormat.from(format);\n    const numeric = parseFixed(value, fixedFormat.decimals);\n\n    if (!fixedFormat.signed && numeric.lt(Zero)) {\n      throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n    }\n\n    let hex = null;\n\n    if (fixedFormat.signed) {\n      hex = numeric.toTwos(fixedFormat.width).toHexString();\n    } else {\n      hex = numeric.toHexString();\n      hex = hexZeroPad(hex, fixedFormat.width / 8);\n    }\n\n    const decimal = formatFixed(numeric, fixedFormat.decimals);\n    return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n  }\n\n  static fromBytes(value, format) {\n    if (format == null) {\n      format = \"fixed\";\n    }\n\n    const fixedFormat = FixedFormat.from(format);\n\n    if (arrayify(value).length > fixedFormat.width / 8) {\n      throw new Error(\"overflow\");\n    }\n\n    let numeric = BigNumber.from(value);\n\n    if (fixedFormat.signed) {\n      numeric = numeric.fromTwos(fixedFormat.width);\n    }\n\n    const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n    const decimal = formatFixed(numeric, fixedFormat.decimals);\n    return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n  }\n\n  static from(value, format) {\n    if (typeof value === \"string\") {\n      return FixedNumber.fromString(value, format);\n    }\n\n    if (isBytes(value)) {\n      return FixedNumber.fromBytes(value, format);\n    }\n\n    try {\n      return FixedNumber.fromValue(value, 0, format);\n    } catch (error) {\n      // Allow NUMERIC_FAULT to bubble up\n      if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n        throw error;\n      }\n    }\n\n    return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n  }\n\n  static isFixedNumber(value) {\n    return !!(value && value._isFixedNumber);\n  }\n\n}\nconst ONE = FixedNumber.from(1);\nconst BUMP = FixedNumber.from(\"0.5\");","map":{"version":3,"names":["arrayify","hexZeroPad","isBytes","Logger","version","logger","BigNumber","isBigNumberish","_constructorGuard","Zero","from","NegativeOne","throwFault","message","fault","operation","value","params","undefined","throwError","errors","NUMERIC_FAULT","zeros","length","getMultiplier","decimals","toNumber","e","substring","throwArgumentError","formatFixed","multiplier","negative","lt","mul","fraction","mod","toString","match","whole","div","parseFixed","comps","split","wholeValue","fractionValue","wei","add","FixedFormat","constructor","constructorGuard","signed","width","UNSUPPORTED_OPERATION","name","String","_multiplier","Object","freeze","parseInt","check","key","type","defaultValue","FixedNumber","hex","format","_hex","_value","_isFixedNumber","_checkFormat","other","addUnsafe","a","b","fromValue","subUnsafe","sub","mulUnsafe","divUnsafe","floor","push","result","hasFraction","isNegative","ONE","toFormat","ceiling","round","factor","bump","BUMP","isZero","toHexString","fromTwos","toTwos","toUnsafeFloat","parseFloat","fromString","fixedFormat","numeric","decimal","fromBytes","Error","error","code","INVALID_ARGUMENT","isFixedNumber"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/bignumber/lib.esm/fixednumber.js"],"sourcesContent":["\"use strict\";\nimport { arrayify, hexZeroPad, isBytes } from \"@ethersproject/bytes\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { BigNumber, isBigNumberish } from \"./bignumber\";\nconst _constructorGuard = {};\nconst Zero = BigNumber.from(0);\nconst NegativeOne = BigNumber.from(-1);\nfunction throwFault(message, fault, operation, value) {\n    const params = { fault: fault, operation: operation };\n    if (value !== undefined) {\n        params.value = value;\n    }\n    return logger.throwError(message, Logger.errors.NUMERIC_FAULT, params);\n}\n// Constant to pull zeros from for multipliers\nlet zeros = \"0\";\nwhile (zeros.length < 256) {\n    zeros += zeros;\n}\n// Returns a string \"1\" followed by decimal \"0\"s\nfunction getMultiplier(decimals) {\n    if (typeof (decimals) !== \"number\") {\n        try {\n            decimals = BigNumber.from(decimals).toNumber();\n        }\n        catch (e) { }\n    }\n    if (typeof (decimals) === \"number\" && decimals >= 0 && decimals <= 256 && !(decimals % 1)) {\n        return (\"1\" + zeros.substring(0, decimals));\n    }\n    return logger.throwArgumentError(\"invalid decimal size\", \"decimals\", decimals);\n}\nexport function formatFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    // Make sure wei is a big number (convert as necessary)\n    value = BigNumber.from(value);\n    const negative = value.lt(Zero);\n    if (negative) {\n        value = value.mul(NegativeOne);\n    }\n    let fraction = value.mod(multiplier).toString();\n    while (fraction.length < multiplier.length - 1) {\n        fraction = \"0\" + fraction;\n    }\n    // Strip training 0\n    fraction = fraction.match(/^([0-9]*[1-9]|0)(0*)/)[1];\n    const whole = value.div(multiplier).toString();\n    if (multiplier.length === 1) {\n        value = whole;\n    }\n    else {\n        value = whole + \".\" + fraction;\n    }\n    if (negative) {\n        value = \"-\" + value;\n    }\n    return value;\n}\nexport function parseFixed(value, decimals) {\n    if (decimals == null) {\n        decimals = 0;\n    }\n    const multiplier = getMultiplier(decimals);\n    if (typeof (value) !== \"string\" || !value.match(/^-?[0-9.]+$/)) {\n        logger.throwArgumentError(\"invalid decimal value\", \"value\", value);\n    }\n    // Is it negative?\n    const negative = (value.substring(0, 1) === \"-\");\n    if (negative) {\n        value = value.substring(1);\n    }\n    if (value === \".\") {\n        logger.throwArgumentError(\"missing value\", \"value\", value);\n    }\n    // Split it into a whole and fractional part\n    const comps = value.split(\".\");\n    if (comps.length > 2) {\n        logger.throwArgumentError(\"too many decimal points\", \"value\", value);\n    }\n    let whole = comps[0], fraction = comps[1];\n    if (!whole) {\n        whole = \"0\";\n    }\n    if (!fraction) {\n        fraction = \"0\";\n    }\n    // Trim trailing zeros\n    while (fraction[fraction.length - 1] === \"0\") {\n        fraction = fraction.substring(0, fraction.length - 1);\n    }\n    // Check the fraction doesn't exceed our decimals size\n    if (fraction.length > multiplier.length - 1) {\n        throwFault(\"fractional component exceeds decimals\", \"underflow\", \"parseFixed\");\n    }\n    // If decimals is 0, we have an empty string for fraction\n    if (fraction === \"\") {\n        fraction = \"0\";\n    }\n    // Fully pad the string with zeros to get to wei\n    while (fraction.length < multiplier.length - 1) {\n        fraction += \"0\";\n    }\n    const wholeValue = BigNumber.from(whole);\n    const fractionValue = BigNumber.from(fraction);\n    let wei = (wholeValue.mul(multiplier)).add(fractionValue);\n    if (negative) {\n        wei = wei.mul(NegativeOne);\n    }\n    return wei;\n}\nexport class FixedFormat {\n    constructor(constructorGuard, signed, width, decimals) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedFormat constructor; use FixedFormat.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.signed = signed;\n        this.width = width;\n        this.decimals = decimals;\n        this.name = (signed ? \"\" : \"u\") + \"fixed\" + String(width) + \"x\" + String(decimals);\n        this._multiplier = getMultiplier(decimals);\n        Object.freeze(this);\n    }\n    static from(value) {\n        if (value instanceof FixedFormat) {\n            return value;\n        }\n        if (typeof (value) === \"number\") {\n            value = `fixed128x${value}`;\n        }\n        let signed = true;\n        let width = 128;\n        let decimals = 18;\n        if (typeof (value) === \"string\") {\n            if (value === \"fixed\") {\n                // defaults...\n            }\n            else if (value === \"ufixed\") {\n                signed = false;\n            }\n            else {\n                const match = value.match(/^(u?)fixed([0-9]+)x([0-9]+)$/);\n                if (!match) {\n                    logger.throwArgumentError(\"invalid fixed format\", \"format\", value);\n                }\n                signed = (match[1] !== \"u\");\n                width = parseInt(match[2]);\n                decimals = parseInt(match[3]);\n            }\n        }\n        else if (value) {\n            const check = (key, type, defaultValue) => {\n                if (value[key] == null) {\n                    return defaultValue;\n                }\n                if (typeof (value[key]) !== type) {\n                    logger.throwArgumentError(\"invalid fixed format (\" + key + \" not \" + type + \")\", \"format.\" + key, value[key]);\n                }\n                return value[key];\n            };\n            signed = check(\"signed\", \"boolean\", signed);\n            width = check(\"width\", \"number\", width);\n            decimals = check(\"decimals\", \"number\", decimals);\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid fixed format width (not byte aligned)\", \"format.width\", width);\n        }\n        if (decimals > 80) {\n            logger.throwArgumentError(\"invalid fixed format (decimals too large)\", \"format.decimals\", decimals);\n        }\n        return new FixedFormat(_constructorGuard, signed, width, decimals);\n    }\n}\nexport class FixedNumber {\n    constructor(constructorGuard, hex, value, format) {\n        if (constructorGuard !== _constructorGuard) {\n            logger.throwError(\"cannot use FixedNumber constructor; use FixedNumber.from\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"new FixedFormat\"\n            });\n        }\n        this.format = format;\n        this._hex = hex;\n        this._value = value;\n        this._isFixedNumber = true;\n        Object.freeze(this);\n    }\n    _checkFormat(other) {\n        if (this.format.name !== other.format.name) {\n            logger.throwArgumentError(\"incompatible format; use fixedNumber.toFormat\", \"other\", other);\n        }\n    }\n    addUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.add(b), this.format.decimals, this.format);\n    }\n    subUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.sub(b), this.format.decimals, this.format);\n    }\n    mulUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(b).div(this.format._multiplier), this.format.decimals, this.format);\n    }\n    divUnsafe(other) {\n        this._checkFormat(other);\n        const a = parseFixed(this._value, this.format.decimals);\n        const b = parseFixed(other._value, other.format.decimals);\n        return FixedNumber.fromValue(a.mul(this.format._multiplier).div(b), this.format.decimals, this.format);\n    }\n    floor() {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        let result = FixedNumber.from(comps[0], this.format);\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (this.isNegative() && hasFraction) {\n            result = result.subUnsafe(ONE.toFormat(result.format));\n        }\n        return result;\n    }\n    ceiling() {\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        let result = FixedNumber.from(comps[0], this.format);\n        const hasFraction = !comps[1].match(/^(0*)$/);\n        if (!this.isNegative() && hasFraction) {\n            result = result.addUnsafe(ONE.toFormat(result.format));\n        }\n        return result;\n    }\n    // @TODO: Support other rounding algorithms\n    round(decimals) {\n        if (decimals == null) {\n            decimals = 0;\n        }\n        // If we are already in range, we're done\n        const comps = this.toString().split(\".\");\n        if (comps.length === 1) {\n            comps.push(\"0\");\n        }\n        if (decimals < 0 || decimals > 80 || (decimals % 1)) {\n            logger.throwArgumentError(\"invalid decimal count\", \"decimals\", decimals);\n        }\n        if (comps[1].length <= decimals) {\n            return this;\n        }\n        const factor = FixedNumber.from(\"1\" + zeros.substring(0, decimals), this.format);\n        const bump = BUMP.toFormat(this.format);\n        return this.mulUnsafe(factor).addUnsafe(bump).floor().divUnsafe(factor);\n    }\n    isZero() {\n        return (this._value === \"0.0\" || this._value === \"0\");\n    }\n    isNegative() {\n        return (this._value[0] === \"-\");\n    }\n    toString() { return this._value; }\n    toHexString(width) {\n        if (width == null) {\n            return this._hex;\n        }\n        if (width % 8) {\n            logger.throwArgumentError(\"invalid byte width\", \"width\", width);\n        }\n        const hex = BigNumber.from(this._hex).fromTwos(this.format.width).toTwos(width).toHexString();\n        return hexZeroPad(hex, width / 8);\n    }\n    toUnsafeFloat() { return parseFloat(this.toString()); }\n    toFormat(format) {\n        return FixedNumber.fromString(this._value, format);\n    }\n    static fromValue(value, decimals, format) {\n        // If decimals looks more like a format, and there is no format, shift the parameters\n        if (format == null && decimals != null && !isBigNumberish(decimals)) {\n            format = decimals;\n            decimals = null;\n        }\n        if (decimals == null) {\n            decimals = 0;\n        }\n        if (format == null) {\n            format = \"fixed\";\n        }\n        return FixedNumber.fromString(formatFixed(value, decimals), FixedFormat.from(format));\n    }\n    static fromString(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        const numeric = parseFixed(value, fixedFormat.decimals);\n        if (!fixedFormat.signed && numeric.lt(Zero)) {\n            throwFault(\"unsigned value cannot be negative\", \"overflow\", \"value\", value);\n        }\n        let hex = null;\n        if (fixedFormat.signed) {\n            hex = numeric.toTwos(fixedFormat.width).toHexString();\n        }\n        else {\n            hex = numeric.toHexString();\n            hex = hexZeroPad(hex, fixedFormat.width / 8);\n        }\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static fromBytes(value, format) {\n        if (format == null) {\n            format = \"fixed\";\n        }\n        const fixedFormat = FixedFormat.from(format);\n        if (arrayify(value).length > fixedFormat.width / 8) {\n            throw new Error(\"overflow\");\n        }\n        let numeric = BigNumber.from(value);\n        if (fixedFormat.signed) {\n            numeric = numeric.fromTwos(fixedFormat.width);\n        }\n        const hex = numeric.toTwos((fixedFormat.signed ? 0 : 1) + fixedFormat.width).toHexString();\n        const decimal = formatFixed(numeric, fixedFormat.decimals);\n        return new FixedNumber(_constructorGuard, hex, decimal, fixedFormat);\n    }\n    static from(value, format) {\n        if (typeof (value) === \"string\") {\n            return FixedNumber.fromString(value, format);\n        }\n        if (isBytes(value)) {\n            return FixedNumber.fromBytes(value, format);\n        }\n        try {\n            return FixedNumber.fromValue(value, 0, format);\n        }\n        catch (error) {\n            // Allow NUMERIC_FAULT to bubble up\n            if (error.code !== Logger.errors.INVALID_ARGUMENT) {\n                throw error;\n            }\n        }\n        return logger.throwArgumentError(\"invalid FixedNumber value\", \"value\", value);\n    }\n    static isFixedNumber(value) {\n        return !!(value && value._isFixedNumber);\n    }\n}\nconst ONE = FixedNumber.from(1);\nconst BUMP = FixedNumber.from(\"0.5\");\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}