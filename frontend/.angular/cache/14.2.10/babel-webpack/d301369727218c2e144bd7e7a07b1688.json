{"ast":null,"code":"/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array, depth) {\n  if (depth == null) {\n    depth = 1;\n  }\n\n  const result = [];\n  const forEach = result.forEach;\n\n  const flatDeep = function (arr, depth) {\n    forEach.call(arr, function (val) {\n      if (depth > 0 && Array.isArray(val)) {\n        flatDeep(val, depth - 1);\n      } else {\n        result.push(val);\n      }\n    });\n  };\n\n  flatDeep(array, depth);\n  return result;\n}\n\nfunction fromEntries(array) {\n  const result = {};\n\n  for (let i = 0; i < array.length; i++) {\n    const value = array[i];\n    result[value[0]] = value[1];\n  }\n\n  return result;\n}\n\nexport function decode_arithmetic(bytes) {\n  let pos = 0;\n\n  function u16() {\n    return bytes[pos++] << 8 | bytes[pos++];\n  } // decode the frequency table\n\n\n  let symbol_count = u16();\n  let total = 1;\n  let acc = [0, 1]; // first symbol has frequency 1\n\n  for (let i = 1; i < symbol_count; i++) {\n    acc.push(total += u16());\n  } // skip the sized-payload that the last 3 symbols index into\n\n\n  let skip = u16();\n  let pos_payload = pos;\n  pos += skip;\n  let read_width = 0;\n  let read_buffer = 0;\n\n  function read_bit() {\n    if (read_width == 0) {\n      // this will read beyond end of buffer\n      // but (undefined|0) => zero pad\n      read_buffer = read_buffer << 8 | bytes[pos++];\n      read_width = 8;\n    }\n\n    return read_buffer >> --read_width & 1;\n  }\n\n  const N = 31;\n  const FULL = Math.pow(2, N);\n  const HALF = FULL >>> 1;\n  const QRTR = HALF >> 1;\n  const MASK = FULL - 1; // fill register\n\n  let register = 0;\n\n  for (let i = 0; i < N; i++) register = register << 1 | read_bit();\n\n  let symbols = [];\n  let low = 0;\n  let range = FULL; // treat like a float\n\n  while (true) {\n    let value = Math.floor(((register - low + 1) * total - 1) / range);\n    let start = 0;\n    let end = symbol_count;\n\n    while (end - start > 1) {\n      // binary search\n      let mid = start + end >>> 1;\n\n      if (value < acc[mid]) {\n        end = mid;\n      } else {\n        start = mid;\n      }\n    }\n\n    if (start == 0) break; // first symbol is end mark\n\n    symbols.push(start);\n    let a = low + Math.floor(range * acc[start] / total);\n    let b = low + Math.floor(range * acc[start + 1] / total) - 1;\n\n    while (((a ^ b) & HALF) == 0) {\n      register = register << 1 & MASK | read_bit();\n      a = a << 1 & MASK;\n      b = b << 1 & MASK | 1;\n    }\n\n    while (a & ~b & QRTR) {\n      register = register & HALF | register << 1 & MASK >>> 1 | read_bit();\n      a = a << 1 ^ HALF;\n      b = (b ^ HALF) << 1 | HALF | 1;\n    }\n\n    low = a;\n    range = 1 + b - a;\n  }\n\n  let offset = symbol_count - 4;\n  return symbols.map(x => {\n    switch (x - offset) {\n      case 3:\n        return offset + 0x10100 + (bytes[pos_payload++] << 16 | bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n\n      case 2:\n        return offset + 0x100 + (bytes[pos_payload++] << 8 | bytes[pos_payload++]);\n\n      case 1:\n        return offset + bytes[pos_payload++];\n\n      default:\n        return x - 1;\n    }\n  });\n} // returns an iterator which returns the next symbol\n\nexport function read_payload(v) {\n  let pos = 0;\n  return () => v[pos++];\n}\nexport function read_compressed_payload(bytes) {\n  return read_payload(decode_arithmetic(bytes));\n} // eg. [0,1,2,3...] => [0,-1,1,-2,...]\n\nexport function signed(i) {\n  return i & 1 ? ~i >> 1 : i >> 1;\n}\n\nfunction read_counts(n, next) {\n  let v = Array(n);\n\n  for (let i = 0; i < n; i++) v[i] = 1 + next();\n\n  return v;\n}\n\nfunction read_ascending(n, next) {\n  let v = Array(n);\n\n  for (let i = 0, x = -1; i < n; i++) v[i] = x += 1 + next();\n\n  return v;\n}\n\nfunction read_deltas(n, next) {\n  let v = Array(n);\n\n  for (let i = 0, x = 0; i < n; i++) v[i] = x += signed(next());\n\n  return v;\n}\n\nexport function read_member_array(next, lookup) {\n  let v = read_ascending(next(), next);\n  let n = next();\n  let vX = read_ascending(n, next);\n  let vN = read_counts(n, next);\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < vN[i]; j++) {\n      v.push(vX[i] + j);\n    }\n  }\n\n  return lookup ? v.map(x => lookup[x]) : v;\n} // returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\n\nexport function read_mapped_map(next) {\n  let ret = [];\n\n  while (true) {\n    let w = next();\n    if (w == 0) break;\n    ret.push(read_linear_table(w, next));\n  }\n\n  while (true) {\n    let w = next() - 1;\n    if (w < 0) break;\n    ret.push(read_replacement_table(w, next));\n  }\n\n  return fromEntries(flat(ret));\n}\nexport function read_zero_terminated_array(next) {\n  let v = [];\n\n  while (true) {\n    let i = next();\n    if (i == 0) break;\n    v.push(i);\n  }\n\n  return v;\n}\n\nfunction read_transposed(n, w, next) {\n  let m = Array(n).fill(undefined).map(() => []);\n\n  for (let i = 0; i < w; i++) {\n    read_deltas(n, next).forEach((x, j) => m[j].push(x));\n  }\n\n  return m;\n}\n\nfunction read_linear_table(w, next) {\n  let dx = 1 + next();\n  let dy = next();\n  let vN = read_zero_terminated_array(next);\n  let m = read_transposed(vN.length, 1 + w, next);\n  return flat(m.map((v, i) => {\n    const x = v[0],\n          ys = v.slice(1); //let [x, ...ys] = v;\n    //return Array(vN[i]).fill().map((_, j) => {\n\n    return Array(vN[i]).fill(undefined).map((_, j) => {\n      let j_dy = j * dy;\n      return [x + j * dx, ys.map(y => y + j_dy)];\n    });\n  }));\n}\n\nfunction read_replacement_table(w, next) {\n  let n = 1 + next();\n  let m = read_transposed(n, 1 + w, next);\n  return m.map(v => [v[0], v.slice(1)]);\n}\n\nexport function read_emoji_trie(next) {\n  let sorted = read_member_array(next).sort((a, b) => a - b);\n  return read();\n\n  function read() {\n    let branches = [];\n\n    while (true) {\n      let keys = read_member_array(next, sorted);\n      if (keys.length == 0) break;\n      branches.push({\n        set: new Set(keys),\n        node: read()\n      });\n    }\n\n    branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n\n    let temp = next();\n    let valid = temp % 3;\n    temp = temp / 3 | 0;\n    let fe0f = !!(temp & 1);\n    temp >>= 1;\n    let save = temp == 1;\n    let check = temp == 2;\n    return {\n      branches,\n      valid,\n      fe0f,\n      save,\n      check\n    };\n  }\n}","map":{"version":3,"names":["flat","array","depth","result","forEach","flatDeep","arr","call","val","Array","isArray","push","fromEntries","i","length","value","decode_arithmetic","bytes","pos","u16","symbol_count","total","acc","skip","pos_payload","read_width","read_buffer","read_bit","N","FULL","Math","pow","HALF","QRTR","MASK","register","symbols","low","range","floor","start","end","mid","a","b","offset","map","x","read_payload","v","read_compressed_payload","signed","read_counts","n","next","read_ascending","read_deltas","read_member_array","lookup","vX","vN","j","read_mapped_map","ret","w","read_linear_table","read_replacement_table","read_zero_terminated_array","read_transposed","m","fill","undefined","dx","dy","ys","slice","_","j_dy","y","read_emoji_trie","sorted","sort","read","branches","keys","set","Set","node","size","temp","valid","fe0f","save","check"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/hash/lib.esm/ens-normalize/decoder.js"],"sourcesContent":["/**\n * MIT License\n *\n * Copyright (c) 2021 Andrew Raffensperger\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all\n * copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n * SOFTWARE.\n *\n * This is a near carbon-copy of the original source (link below) with the\n * TypeScript typings added and a few tweaks to make it ES3-compatible.\n *\n * See: https://github.com/adraffy/ens-normalize.js\n */\n// https://github.com/behnammodi/polyfill/blob/master/array.polyfill.js\nfunction flat(array, depth) {\n    if (depth == null) {\n        depth = 1;\n    }\n    const result = [];\n    const forEach = result.forEach;\n    const flatDeep = function (arr, depth) {\n        forEach.call(arr, function (val) {\n            if (depth > 0 && Array.isArray(val)) {\n                flatDeep(val, depth - 1);\n            }\n            else {\n                result.push(val);\n            }\n        });\n    };\n    flatDeep(array, depth);\n    return result;\n}\nfunction fromEntries(array) {\n    const result = {};\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        result[value[0]] = value[1];\n    }\n    return result;\n}\nexport function decode_arithmetic(bytes) {\n    let pos = 0;\n    function u16() { return (bytes[pos++] << 8) | bytes[pos++]; }\n    // decode the frequency table\n    let symbol_count = u16();\n    let total = 1;\n    let acc = [0, 1]; // first symbol has frequency 1\n    for (let i = 1; i < symbol_count; i++) {\n        acc.push(total += u16());\n    }\n    // skip the sized-payload that the last 3 symbols index into\n    let skip = u16();\n    let pos_payload = pos;\n    pos += skip;\n    let read_width = 0;\n    let read_buffer = 0;\n    function read_bit() {\n        if (read_width == 0) {\n            // this will read beyond end of buffer\n            // but (undefined|0) => zero pad\n            read_buffer = (read_buffer << 8) | bytes[pos++];\n            read_width = 8;\n        }\n        return (read_buffer >> --read_width) & 1;\n    }\n    const N = 31;\n    const FULL = Math.pow(2, N);\n    const HALF = FULL >>> 1;\n    const QRTR = HALF >> 1;\n    const MASK = FULL - 1;\n    // fill register\n    let register = 0;\n    for (let i = 0; i < N; i++)\n        register = (register << 1) | read_bit();\n    let symbols = [];\n    let low = 0;\n    let range = FULL; // treat like a float\n    while (true) {\n        let value = Math.floor((((register - low + 1) * total) - 1) / range);\n        let start = 0;\n        let end = symbol_count;\n        while (end - start > 1) { // binary search\n            let mid = (start + end) >>> 1;\n            if (value < acc[mid]) {\n                end = mid;\n            }\n            else {\n                start = mid;\n            }\n        }\n        if (start == 0)\n            break; // first symbol is end mark\n        symbols.push(start);\n        let a = low + Math.floor(range * acc[start] / total);\n        let b = low + Math.floor(range * acc[start + 1] / total) - 1;\n        while (((a ^ b) & HALF) == 0) {\n            register = (register << 1) & MASK | read_bit();\n            a = (a << 1) & MASK;\n            b = (b << 1) & MASK | 1;\n        }\n        while (a & ~b & QRTR) {\n            register = (register & HALF) | ((register << 1) & (MASK >>> 1)) | read_bit();\n            a = (a << 1) ^ HALF;\n            b = ((b ^ HALF) << 1) | HALF | 1;\n        }\n        low = a;\n        range = 1 + b - a;\n    }\n    let offset = symbol_count - 4;\n    return symbols.map(x => {\n        switch (x - offset) {\n            case 3: return offset + 0x10100 + ((bytes[pos_payload++] << 16) | (bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n            case 2: return offset + 0x100 + ((bytes[pos_payload++] << 8) | bytes[pos_payload++]);\n            case 1: return offset + bytes[pos_payload++];\n            default: return x - 1;\n        }\n    });\n}\n// returns an iterator which returns the next symbol\nexport function read_payload(v) {\n    let pos = 0;\n    return () => v[pos++];\n}\nexport function read_compressed_payload(bytes) {\n    return read_payload(decode_arithmetic(bytes));\n}\n// eg. [0,1,2,3...] => [0,-1,1,-2,...]\nexport function signed(i) {\n    return (i & 1) ? (~i >> 1) : (i >> 1);\n}\nfunction read_counts(n, next) {\n    let v = Array(n);\n    for (let i = 0; i < n; i++)\n        v[i] = 1 + next();\n    return v;\n}\nfunction read_ascending(n, next) {\n    let v = Array(n);\n    for (let i = 0, x = -1; i < n; i++)\n        v[i] = x += 1 + next();\n    return v;\n}\nfunction read_deltas(n, next) {\n    let v = Array(n);\n    for (let i = 0, x = 0; i < n; i++)\n        v[i] = x += signed(next());\n    return v;\n}\nexport function read_member_array(next, lookup) {\n    let v = read_ascending(next(), next);\n    let n = next();\n    let vX = read_ascending(n, next);\n    let vN = read_counts(n, next);\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < vN[i]; j++) {\n            v.push(vX[i] + j);\n        }\n    }\n    return lookup ? v.map(x => lookup[x]) : v;\n}\n// returns array of \n// [x, ys] => single replacement rule\n// [x, ys, n, dx, dx] => linear map\nexport function read_mapped_map(next) {\n    let ret = [];\n    while (true) {\n        let w = next();\n        if (w == 0)\n            break;\n        ret.push(read_linear_table(w, next));\n    }\n    while (true) {\n        let w = next() - 1;\n        if (w < 0)\n            break;\n        ret.push(read_replacement_table(w, next));\n    }\n    return fromEntries(flat(ret));\n}\nexport function read_zero_terminated_array(next) {\n    let v = [];\n    while (true) {\n        let i = next();\n        if (i == 0)\n            break;\n        v.push(i);\n    }\n    return v;\n}\nfunction read_transposed(n, w, next) {\n    let m = Array(n).fill(undefined).map(() => []);\n    for (let i = 0; i < w; i++) {\n        read_deltas(n, next).forEach((x, j) => m[j].push(x));\n    }\n    return m;\n}\nfunction read_linear_table(w, next) {\n    let dx = 1 + next();\n    let dy = next();\n    let vN = read_zero_terminated_array(next);\n    let m = read_transposed(vN.length, 1 + w, next);\n    return flat(m.map((v, i) => {\n        const x = v[0], ys = v.slice(1);\n        //let [x, ...ys] = v;\n        //return Array(vN[i]).fill().map((_, j) => {\n        return Array(vN[i]).fill(undefined).map((_, j) => {\n            let j_dy = j * dy;\n            return [x + j * dx, ys.map(y => y + j_dy)];\n        });\n    }));\n}\nfunction read_replacement_table(w, next) {\n    let n = 1 + next();\n    let m = read_transposed(n, 1 + w, next);\n    return m.map(v => [v[0], v.slice(1)]);\n}\nexport function read_emoji_trie(next) {\n    let sorted = read_member_array(next).sort((a, b) => a - b);\n    return read();\n    function read() {\n        let branches = [];\n        while (true) {\n            let keys = read_member_array(next, sorted);\n            if (keys.length == 0)\n                break;\n            branches.push({ set: new Set(keys), node: read() });\n        }\n        branches.sort((a, b) => b.set.size - a.set.size); // sort by likelihood\n        let temp = next();\n        let valid = temp % 3;\n        temp = (temp / 3) | 0;\n        let fe0f = !!(temp & 1);\n        temp >>= 1;\n        let save = temp == 1;\n        let check = temp == 2;\n        return { branches, valid, fe0f, save, check };\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}