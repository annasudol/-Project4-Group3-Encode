{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\"; // A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\n\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n  detectNetwork() {\n    const _super = Object.create(null, {\n      detectNetwork: {\n        get: () => super.detectNetwork\n      }\n    });\n\n    return __awaiter(this, void 0, void 0, function* () {\n      let network = this.network;\n\n      if (network == null) {\n        network = yield _super.detectNetwork.call(this);\n\n        if (!network) {\n          logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n        } // If still not set, set it\n\n\n        if (this._network == null) {\n          // A static network does not support \"any\"\n          defineReadOnly(this, \"_network\", network);\n          this.emit(\"network\", network, null);\n        }\n      }\n\n      return network;\n    });\n  }\n\n}\nexport class UrlJsonRpcProvider extends StaticJsonRpcProvider {\n  constructor(network, apiKey) {\n    logger.checkAbstract(new.target, UrlJsonRpcProvider); // Normalize the Network and API Key\n\n    network = getStatic(new.target, \"getNetwork\")(network);\n    apiKey = getStatic(new.target, \"getApiKey\")(apiKey);\n    const connection = getStatic(new.target, \"getUrl\")(network, apiKey);\n    super(connection, network);\n\n    if (typeof apiKey === \"string\") {\n      defineReadOnly(this, \"apiKey\", apiKey);\n    } else if (apiKey != null) {\n      Object.keys(apiKey).forEach(key => {\n        defineReadOnly(this, key, apiKey[key]);\n      });\n    }\n  }\n\n  _startPending() {\n    logger.warn(\"WARNING: API provider does not support pending filters\");\n  }\n\n  isCommunityResource() {\n    return false;\n  }\n\n  getSigner(address) {\n    return logger.throwError(\"API provider does not support signing\", Logger.errors.UNSUPPORTED_OPERATION, {\n      operation: \"getSigner\"\n    });\n  }\n\n  listAccounts() {\n    return Promise.resolve([]);\n  } // Return a defaultApiKey if null, otherwise validate the API key\n\n\n  static getApiKey(apiKey) {\n    return apiKey;\n  } // Returns the url or connection for the given network and API key. The\n  // API key will have been sanitized by the getApiKey first, so any validation\n  // or transformations can be done there.\n\n\n  static getUrl(network, apiKey) {\n    return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n      operation: \"getUrl\"\n    });\n  }\n\n}","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","defineReadOnly","getStatic","Logger","version","logger","JsonRpcProvider","StaticJsonRpcProvider","detectNetwork","_super","Object","create","get","network","call","throwError","errors","UNKNOWN_ERROR","_network","emit","UrlJsonRpcProvider","constructor","apiKey","checkAbstract","new","target","connection","keys","forEach","key","_startPending","warn","isCommunityResource","getSigner","address","UNSUPPORTED_OPERATION","operation","listAccounts","getApiKey","getUrl","NOT_IMPLEMENTED"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/providers/lib.esm/url-json-rpc-provider.js"],"sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n    detectNetwork() {\n        const _super = Object.create(null, {\n            detectNetwork: { get: () => super.detectNetwork }\n        });\n        return __awaiter(this, void 0, void 0, function* () {\n            let network = this.network;\n            if (network == null) {\n                network = yield _super.detectNetwork.call(this);\n                if (!network) {\n                    logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, {});\n                }\n                // If still not set, set it\n                if (this._network == null) {\n                    // A static network does not support \"any\"\n                    defineReadOnly(this, \"_network\", network);\n                    this.emit(\"network\", network, null);\n                }\n            }\n            return network;\n        });\n    }\n}\nexport class UrlJsonRpcProvider extends StaticJsonRpcProvider {\n    constructor(network, apiKey) {\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\n        // Normalize the Network and API Key\n        network = getStatic(new.target, \"getNetwork\")(network);\n        apiKey = getStatic(new.target, \"getApiKey\")(apiKey);\n        const connection = getStatic(new.target, \"getUrl\")(network, apiKey);\n        super(connection, network);\n        if (typeof (apiKey) === \"string\") {\n            defineReadOnly(this, \"apiKey\", apiKey);\n        }\n        else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key) => {\n                defineReadOnly(this, key, apiKey[key]);\n            });\n        }\n    }\n    _startPending() {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n    isCommunityResource() {\n        return false;\n    }\n    getSigner(address) {\n        return logger.throwError(\"API provider does not support signing\", Logger.errors.UNSUPPORTED_OPERATION, { operation: \"getSigner\" });\n    }\n    listAccounts() {\n        return Promise.resolve([]);\n    }\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey) {\n        return apiKey;\n    }\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network, apiKey) {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}