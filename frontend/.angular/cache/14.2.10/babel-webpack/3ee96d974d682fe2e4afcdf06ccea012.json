{"ast":null,"code":"\"use strict\";\n\nimport { getAddress } from \"@ethersproject/address\";\nexport function isCrowdsaleWallet(json) {\n  let data = null;\n\n  try {\n    data = JSON.parse(json);\n  } catch (error) {\n    return false;\n  }\n\n  return data.encseed && data.ethaddr;\n}\nexport function isKeystoreWallet(json) {\n  let data = null;\n\n  try {\n    data = JSON.parse(json);\n  } catch (error) {\n    return false;\n  }\n\n  if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n    return false;\n  } // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n\n\n  return true;\n} //export function isJsonWallet(json: string): boolean {\n//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n//}\n\nexport function getJsonWalletAddress(json) {\n  if (isCrowdsaleWallet(json)) {\n    try {\n      return getAddress(JSON.parse(json).ethaddr);\n    } catch (error) {\n      return null;\n    }\n  }\n\n  if (isKeystoreWallet(json)) {\n    try {\n      return getAddress(JSON.parse(json).address);\n    } catch (error) {\n      return null;\n    }\n  }\n\n  return null;\n}","map":{"version":3,"names":["getAddress","isCrowdsaleWallet","json","data","JSON","parse","error","encseed","ethaddr","isKeystoreWallet","version","parseInt","getJsonWalletAddress","address"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/json-wallets/lib.esm/inspect.js"],"sourcesContent":["\"use strict\";\nimport { getAddress } from \"@ethersproject/address\";\nexport function isCrowdsaleWallet(json) {\n    let data = null;\n    try {\n        data = JSON.parse(json);\n    }\n    catch (error) {\n        return false;\n    }\n    return (data.encseed && data.ethaddr);\n}\nexport function isKeystoreWallet(json) {\n    let data = null;\n    try {\n        data = JSON.parse(json);\n    }\n    catch (error) {\n        return false;\n    }\n    if (!data.version || parseInt(data.version) !== data.version || parseInt(data.version) !== 3) {\n        return false;\n    }\n    // @TODO: Put more checks to make sure it has kdf, iv and all that good stuff\n    return true;\n}\n//export function isJsonWallet(json: string): boolean {\n//    return (isSecretStorageWallet(json) || isCrowdsaleWallet(json));\n//}\nexport function getJsonWalletAddress(json) {\n    if (isCrowdsaleWallet(json)) {\n        try {\n            return getAddress(JSON.parse(json).ethaddr);\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    if (isKeystoreWallet(json)) {\n        try {\n            return getAddress(JSON.parse(json).address);\n        }\n        catch (error) {\n            return null;\n        }\n    }\n    return null;\n}\n"],"mappings":"AAAA;;AACA,SAASA,UAAT,QAA2B,wBAA3B;AACA,OAAO,SAASC,iBAAT,CAA2BC,IAA3B,EAAiC;EACpC,IAAIC,IAAI,GAAG,IAAX;;EACA,IAAI;IACAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAP;EACH,CAFD,CAGA,OAAOI,KAAP,EAAc;IACV,OAAO,KAAP;EACH;;EACD,OAAQH,IAAI,CAACI,OAAL,IAAgBJ,IAAI,CAACK,OAA7B;AACH;AACD,OAAO,SAASC,gBAAT,CAA0BP,IAA1B,EAAgC;EACnC,IAAIC,IAAI,GAAG,IAAX;;EACA,IAAI;IACAA,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAP;EACH,CAFD,CAGA,OAAOI,KAAP,EAAc;IACV,OAAO,KAAP;EACH;;EACD,IAAI,CAACH,IAAI,CAACO,OAAN,IAAiBC,QAAQ,CAACR,IAAI,CAACO,OAAN,CAAR,KAA2BP,IAAI,CAACO,OAAjD,IAA4DC,QAAQ,CAACR,IAAI,CAACO,OAAN,CAAR,KAA2B,CAA3F,EAA8F;IAC1F,OAAO,KAAP;EACH,CAVkC,CAWnC;;;EACA,OAAO,IAAP;AACH,C,CACD;AACA;AACA;;AACA,OAAO,SAASE,oBAAT,CAA8BV,IAA9B,EAAoC;EACvC,IAAID,iBAAiB,CAACC,IAAD,CAArB,EAA6B;IACzB,IAAI;MACA,OAAOF,UAAU,CAACI,IAAI,CAACC,KAAL,CAAWH,IAAX,EAAiBM,OAAlB,CAAjB;IACH,CAFD,CAGA,OAAOF,KAAP,EAAc;MACV,OAAO,IAAP;IACH;EACJ;;EACD,IAAIG,gBAAgB,CAACP,IAAD,CAApB,EAA4B;IACxB,IAAI;MACA,OAAOF,UAAU,CAACI,IAAI,CAACC,KAAL,CAAWH,IAAX,EAAiBW,OAAlB,CAAjB;IACH,CAFD,CAGA,OAAOP,KAAP,EAAc;MACV,OAAO,IAAP;IACH;EACJ;;EACD,OAAO,IAAP;AACH"},"metadata":{},"sourceType":"module"}