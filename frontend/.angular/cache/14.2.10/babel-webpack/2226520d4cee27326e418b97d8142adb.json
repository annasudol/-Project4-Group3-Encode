{"ast":null,"code":"import { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\"; // Experimental\n\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n  send(method, params) {\n    const request = {\n      method: method,\n      params: params,\n      id: this._nextId++,\n      jsonrpc: \"2.0\"\n    };\n\n    if (this._pendingBatch == null) {\n      this._pendingBatch = [];\n    }\n\n    const inflightRequest = {\n      request,\n      resolve: null,\n      reject: null\n    };\n    const promise = new Promise((resolve, reject) => {\n      inflightRequest.resolve = resolve;\n      inflightRequest.reject = reject;\n    });\n\n    this._pendingBatch.push(inflightRequest);\n\n    if (!this._pendingBatchAggregator) {\n      // Schedule batch for next event loop + short duration\n      this._pendingBatchAggregator = setTimeout(() => {\n        // Get teh current batch and clear it, so new requests\n        // go into the next batch\n        const batch = this._pendingBatch;\n        this._pendingBatch = null;\n        this._pendingBatchAggregator = null; // Get the request as an array of requests\n\n        const request = batch.map(inflight => inflight.request);\n        this.emit(\"debug\", {\n          action: \"requestBatch\",\n          request: deepCopy(request),\n          provider: this\n        });\n        return fetchJson(this.connection, JSON.stringify(request)).then(result => {\n          this.emit(\"debug\", {\n            action: \"response\",\n            request: request,\n            response: result,\n            provider: this\n          }); // For each result, feed it to the correct Promise, depending\n          // on whether it was a success or error\n\n          batch.forEach((inflightRequest, index) => {\n            const payload = result[index];\n\n            if (payload.error) {\n              const error = new Error(payload.error.message);\n              error.code = payload.error.code;\n              error.data = payload.error.data;\n              inflightRequest.reject(error);\n            } else {\n              inflightRequest.resolve(payload.result);\n            }\n          });\n        }, error => {\n          this.emit(\"debug\", {\n            action: \"response\",\n            error: error,\n            request: request,\n            provider: this\n          });\n          batch.forEach(inflightRequest => {\n            inflightRequest.reject(error);\n          });\n        });\n      }, 10);\n    }\n\n    return promise;\n  }\n\n}","map":{"version":3,"names":["deepCopy","fetchJson","JsonRpcProvider","JsonRpcBatchProvider","send","method","params","request","id","_nextId","jsonrpc","_pendingBatch","inflightRequest","resolve","reject","promise","Promise","push","_pendingBatchAggregator","setTimeout","batch","map","inflight","emit","action","provider","connection","JSON","stringify","then","result","response","forEach","index","payload","error","Error","message","code","data"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/providers/lib.esm/json-rpc-batch-provider.js"],"sourcesContent":["import { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n// Experimental\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    send(method, params) {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [];\n        }\n        const inflightRequest = { request, resolve: null, reject: null };\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n        this._pendingBatch.push(inflightRequest);\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            error.code = payload.error.code;\n                            error.data = payload.error.data;\n                            inflightRequest.reject(error);\n                        }\n                        else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n            }, 10);\n        }\n        return promise;\n    }\n}\n"],"mappings":"AAAA,SAASA,QAAT,QAAyB,2BAAzB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,SAASC,eAAT,QAAgC,qBAAhC,C,CACA;;AACA,OAAO,MAAMC,oBAAN,SAAmCD,eAAnC,CAAmD;EACtDE,IAAI,CAACC,MAAD,EAASC,MAAT,EAAiB;IACjB,MAAMC,OAAO,GAAG;MACZF,MAAM,EAAEA,MADI;MAEZC,MAAM,EAAEA,MAFI;MAGZE,EAAE,EAAG,KAAKC,OAAL,EAHO;MAIZC,OAAO,EAAE;IAJG,CAAhB;;IAMA,IAAI,KAAKC,aAAL,IAAsB,IAA1B,EAAgC;MAC5B,KAAKA,aAAL,GAAqB,EAArB;IACH;;IACD,MAAMC,eAAe,GAAG;MAAEL,OAAF;MAAWM,OAAO,EAAE,IAApB;MAA0BC,MAAM,EAAE;IAAlC,CAAxB;IACA,MAAMC,OAAO,GAAG,IAAIC,OAAJ,CAAY,CAACH,OAAD,EAAUC,MAAV,KAAqB;MAC7CF,eAAe,CAACC,OAAhB,GAA0BA,OAA1B;MACAD,eAAe,CAACE,MAAhB,GAAyBA,MAAzB;IACH,CAHe,CAAhB;;IAIA,KAAKH,aAAL,CAAmBM,IAAnB,CAAwBL,eAAxB;;IACA,IAAI,CAAC,KAAKM,uBAAV,EAAmC;MAC/B;MACA,KAAKA,uBAAL,GAA+BC,UAAU,CAAC,MAAM;QAC5C;QACA;QACA,MAAMC,KAAK,GAAG,KAAKT,aAAnB;QACA,KAAKA,aAAL,GAAqB,IAArB;QACA,KAAKO,uBAAL,GAA+B,IAA/B,CAL4C,CAM5C;;QACA,MAAMX,OAAO,GAAGa,KAAK,CAACC,GAAN,CAAWC,QAAD,IAAcA,QAAQ,CAACf,OAAjC,CAAhB;QACA,KAAKgB,IAAL,CAAU,OAAV,EAAmB;UACfC,MAAM,EAAE,cADO;UAEfjB,OAAO,EAAEP,QAAQ,CAACO,OAAD,CAFF;UAGfkB,QAAQ,EAAE;QAHK,CAAnB;QAKA,OAAOxB,SAAS,CAAC,KAAKyB,UAAN,EAAkBC,IAAI,CAACC,SAAL,CAAerB,OAAf,CAAlB,CAAT,CAAoDsB,IAApD,CAA0DC,MAAD,IAAY;UACxE,KAAKP,IAAL,CAAU,OAAV,EAAmB;YACfC,MAAM,EAAE,UADO;YAEfjB,OAAO,EAAEA,OAFM;YAGfwB,QAAQ,EAAED,MAHK;YAIfL,QAAQ,EAAE;UAJK,CAAnB,EADwE,CAOxE;UACA;;UACAL,KAAK,CAACY,OAAN,CAAc,CAACpB,eAAD,EAAkBqB,KAAlB,KAA4B;YACtC,MAAMC,OAAO,GAAGJ,MAAM,CAACG,KAAD,CAAtB;;YACA,IAAIC,OAAO,CAACC,KAAZ,EAAmB;cACf,MAAMA,KAAK,GAAG,IAAIC,KAAJ,CAAUF,OAAO,CAACC,KAAR,CAAcE,OAAxB,CAAd;cACAF,KAAK,CAACG,IAAN,GAAaJ,OAAO,CAACC,KAAR,CAAcG,IAA3B;cACAH,KAAK,CAACI,IAAN,GAAaL,OAAO,CAACC,KAAR,CAAcI,IAA3B;cACA3B,eAAe,CAACE,MAAhB,CAAuBqB,KAAvB;YACH,CALD,MAMK;cACDvB,eAAe,CAACC,OAAhB,CAAwBqB,OAAO,CAACJ,MAAhC;YACH;UACJ,CAXD;QAYH,CArBM,EAqBHK,KAAD,IAAW;UACV,KAAKZ,IAAL,CAAU,OAAV,EAAmB;YACfC,MAAM,EAAE,UADO;YAEfW,KAAK,EAAEA,KAFQ;YAGf5B,OAAO,EAAEA,OAHM;YAIfkB,QAAQ,EAAE;UAJK,CAAnB;UAMAL,KAAK,CAACY,OAAN,CAAepB,eAAD,IAAqB;YAC/BA,eAAe,CAACE,MAAhB,CAAuBqB,KAAvB;UACH,CAFD;QAGH,CA/BM,CAAP;MAgCH,CA7CwC,EA6CtC,EA7CsC,CAAzC;IA8CH;;IACD,OAAOpB,OAAP;EACH;;AAnEqD"},"metadata":{},"sourceType":"module"}