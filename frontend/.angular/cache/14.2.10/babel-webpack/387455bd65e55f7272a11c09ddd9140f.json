{"ast":null,"code":"\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n  let arrayValues = null;\n\n  if (Array.isArray(values)) {\n    arrayValues = values;\n  } else if (values && typeof values === \"object\") {\n    let unique = {};\n    arrayValues = coders.map(coder => {\n      const name = coder.localName;\n\n      if (!name) {\n        logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n\n      if (unique[name]) {\n        logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n          argument: \"values\",\n          coder: coder,\n          value: values\n        });\n      }\n\n      unique[name] = true;\n      return values[name];\n    });\n  } else {\n    logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n  }\n\n  if (coders.length !== arrayValues.length) {\n    logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n  }\n\n  let staticWriter = new Writer(writer.wordSize);\n  let dynamicWriter = new Writer(writer.wordSize);\n  let updateFuncs = [];\n  coders.forEach((coder, index) => {\n    let value = arrayValues[index];\n\n    if (coder.dynamic) {\n      // Get current dynamic offset (for the future pointer)\n      let dynamicOffset = dynamicWriter.length; // Encode the dynamic value into the dynamicWriter\n\n      coder.encode(dynamicWriter, value); // Prepare to populate the correct offset once we are done\n\n      let updateFunc = staticWriter.writeUpdatableValue();\n      updateFuncs.push(baseOffset => {\n        updateFunc(baseOffset + dynamicOffset);\n      });\n    } else {\n      coder.encode(staticWriter, value);\n    }\n  }); // Backfill all the dynamic offsets, now that we know the static length\n\n  updateFuncs.forEach(func => {\n    func(staticWriter.length);\n  });\n  let length = writer.appendWriter(staticWriter);\n  length += writer.appendWriter(dynamicWriter);\n  return length;\n}\nexport function unpack(reader, coders) {\n  let values = []; // A reader anchored to this base\n\n  let baseReader = reader.subReader(0);\n  coders.forEach(coder => {\n    let value = null;\n\n    if (coder.dynamic) {\n      let offset = reader.readValue();\n      let offsetReader = baseReader.subReader(offset.toNumber());\n\n      try {\n        value = coder.decode(offsetReader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    } else {\n      try {\n        value = coder.decode(reader);\n      } catch (error) {\n        // Cannot recover from this\n        if (error.code === Logger.errors.BUFFER_OVERRUN) {\n          throw error;\n        }\n\n        value = error;\n        value.baseType = coder.name;\n        value.name = coder.localName;\n        value.type = coder.type;\n      }\n    }\n\n    if (value != undefined) {\n      values.push(value);\n    }\n  }); // We only output named properties for uniquely named coders\n\n  const uniqueNames = coders.reduce((accum, coder) => {\n    const name = coder.localName;\n\n    if (name) {\n      if (!accum[name]) {\n        accum[name] = 0;\n      }\n\n      accum[name]++;\n    }\n\n    return accum;\n  }, {}); // Add any named parameters (i.e. tuples)\n\n  coders.forEach((coder, index) => {\n    let name = coder.localName;\n\n    if (!name || uniqueNames[name] !== 1) {\n      return;\n    }\n\n    if (name === \"length\") {\n      name = \"_length\";\n    }\n\n    if (values[name] != null) {\n      return;\n    }\n\n    const value = values[index];\n\n    if (value instanceof Error) {\n      Object.defineProperty(values, name, {\n        enumerable: true,\n        get: () => {\n          throw value;\n        }\n      });\n    } else {\n      values[name] = value;\n    }\n  });\n\n  for (let i = 0; i < values.length; i++) {\n    const value = values[i];\n\n    if (value instanceof Error) {\n      Object.defineProperty(values, i, {\n        enumerable: true,\n        get: () => {\n          throw value;\n        }\n      });\n    }\n  }\n\n  return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n  constructor(coder, length, localName) {\n    const type = coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\";\n    const dynamic = length === -1 || coder.dynamic;\n    super(\"array\", type, localName, dynamic);\n    this.coder = coder;\n    this.length = length;\n  }\n\n  defaultValue() {\n    // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n    const defaultChild = this.coder.defaultValue();\n    const result = [];\n\n    for (let i = 0; i < this.length; i++) {\n      result.push(defaultChild);\n    }\n\n    return result;\n  }\n\n  encode(writer, value) {\n    if (!Array.isArray(value)) {\n      this._throwError(\"expected array value\", value);\n    }\n\n    let count = this.length;\n\n    if (count === -1) {\n      count = value.length;\n      writer.writeValue(value.length);\n    }\n\n    logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? \" \" + this.localName : \"\"));\n    let coders = [];\n\n    for (let i = 0; i < value.length; i++) {\n      coders.push(this.coder);\n    }\n\n    return pack(writer, coders, value);\n  }\n\n  decode(reader) {\n    let count = this.length;\n\n    if (count === -1) {\n      count = reader.readValue().toNumber(); // Check that there is *roughly* enough data to ensure\n      // stray random data is not being read as a length. Each\n      // slot requires at least 32 bytes for their value (or 32\n      // bytes as a link to the data). This could use a much\n      // tighter bound, but we are erroring on the side of safety.\n\n      if (count * 32 > reader._data.length) {\n        logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n          length: reader._data.length,\n          count: count\n        });\n      }\n    }\n\n    let coders = [];\n\n    for (let i = 0; i < count; i++) {\n      coders.push(new AnonymousCoder(this.coder));\n    }\n\n    return reader.coerce(this.name, unpack(reader, coders));\n  }\n\n}","map":{"version":3,"names":["Logger","version","logger","Coder","Writer","AnonymousCoder","pack","writer","coders","values","arrayValues","Array","isArray","unique","map","coder","name","localName","throwError","errors","INVALID_ARGUMENT","argument","value","throwArgumentError","length","staticWriter","wordSize","dynamicWriter","updateFuncs","forEach","index","dynamic","dynamicOffset","encode","updateFunc","writeUpdatableValue","push","baseOffset","func","appendWriter","unpack","reader","baseReader","subReader","offset","readValue","offsetReader","toNumber","decode","error","code","BUFFER_OVERRUN","baseType","type","undefined","uniqueNames","reduce","accum","Error","Object","defineProperty","enumerable","get","i","freeze","ArrayCoder","constructor","defaultValue","defaultChild","result","_throwError","count","writeValue","checkArgumentCount","_data","coerce"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/abi/lib.esm/coders/array.js"],"sourcesContent":["\"use strict\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"../_version\";\nconst logger = new Logger(version);\nimport { Coder, Writer } from \"./abstract-coder\";\nimport { AnonymousCoder } from \"./anonymous\";\nexport function pack(writer, coders, values) {\n    let arrayValues = null;\n    if (Array.isArray(values)) {\n        arrayValues = values;\n    }\n    else if (values && typeof (values) === \"object\") {\n        let unique = {};\n        arrayValues = coders.map((coder) => {\n            const name = coder.localName;\n            if (!name) {\n                logger.throwError(\"cannot encode object for signature with missing names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            if (unique[name]) {\n                logger.throwError(\"cannot encode object for signature with duplicate names\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"values\",\n                    coder: coder,\n                    value: values\n                });\n            }\n            unique[name] = true;\n            return values[name];\n        });\n    }\n    else {\n        logger.throwArgumentError(\"invalid tuple value\", \"tuple\", values);\n    }\n    if (coders.length !== arrayValues.length) {\n        logger.throwArgumentError(\"types/value length mismatch\", \"tuple\", values);\n    }\n    let staticWriter = new Writer(writer.wordSize);\n    let dynamicWriter = new Writer(writer.wordSize);\n    let updateFuncs = [];\n    coders.forEach((coder, index) => {\n        let value = arrayValues[index];\n        if (coder.dynamic) {\n            // Get current dynamic offset (for the future pointer)\n            let dynamicOffset = dynamicWriter.length;\n            // Encode the dynamic value into the dynamicWriter\n            coder.encode(dynamicWriter, value);\n            // Prepare to populate the correct offset once we are done\n            let updateFunc = staticWriter.writeUpdatableValue();\n            updateFuncs.push((baseOffset) => {\n                updateFunc(baseOffset + dynamicOffset);\n            });\n        }\n        else {\n            coder.encode(staticWriter, value);\n        }\n    });\n    // Backfill all the dynamic offsets, now that we know the static length\n    updateFuncs.forEach((func) => { func(staticWriter.length); });\n    let length = writer.appendWriter(staticWriter);\n    length += writer.appendWriter(dynamicWriter);\n    return length;\n}\nexport function unpack(reader, coders) {\n    let values = [];\n    // A reader anchored to this base\n    let baseReader = reader.subReader(0);\n    coders.forEach((coder) => {\n        let value = null;\n        if (coder.dynamic) {\n            let offset = reader.readValue();\n            let offsetReader = baseReader.subReader(offset.toNumber());\n            try {\n                value = coder.decode(offsetReader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        else {\n            try {\n                value = coder.decode(reader);\n            }\n            catch (error) {\n                // Cannot recover from this\n                if (error.code === Logger.errors.BUFFER_OVERRUN) {\n                    throw error;\n                }\n                value = error;\n                value.baseType = coder.name;\n                value.name = coder.localName;\n                value.type = coder.type;\n            }\n        }\n        if (value != undefined) {\n            values.push(value);\n        }\n    });\n    // We only output named properties for uniquely named coders\n    const uniqueNames = coders.reduce((accum, coder) => {\n        const name = coder.localName;\n        if (name) {\n            if (!accum[name]) {\n                accum[name] = 0;\n            }\n            accum[name]++;\n        }\n        return accum;\n    }, {});\n    // Add any named parameters (i.e. tuples)\n    coders.forEach((coder, index) => {\n        let name = coder.localName;\n        if (!name || uniqueNames[name] !== 1) {\n            return;\n        }\n        if (name === \"length\") {\n            name = \"_length\";\n        }\n        if (values[name] != null) {\n            return;\n        }\n        const value = values[index];\n        if (value instanceof Error) {\n            Object.defineProperty(values, name, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n        else {\n            values[name] = value;\n        }\n    });\n    for (let i = 0; i < values.length; i++) {\n        const value = values[i];\n        if (value instanceof Error) {\n            Object.defineProperty(values, i, {\n                enumerable: true,\n                get: () => { throw value; }\n            });\n        }\n    }\n    return Object.freeze(values);\n}\nexport class ArrayCoder extends Coder {\n    constructor(coder, length, localName) {\n        const type = (coder.type + \"[\" + (length >= 0 ? length : \"\") + \"]\");\n        const dynamic = (length === -1 || coder.dynamic);\n        super(\"array\", type, localName, dynamic);\n        this.coder = coder;\n        this.length = length;\n    }\n    defaultValue() {\n        // Verifies the child coder is valid (even if the array is dynamic or 0-length)\n        const defaultChild = this.coder.defaultValue();\n        const result = [];\n        for (let i = 0; i < this.length; i++) {\n            result.push(defaultChild);\n        }\n        return result;\n    }\n    encode(writer, value) {\n        if (!Array.isArray(value)) {\n            this._throwError(\"expected array value\", value);\n        }\n        let count = this.length;\n        if (count === -1) {\n            count = value.length;\n            writer.writeValue(value.length);\n        }\n        logger.checkArgumentCount(value.length, count, \"coder array\" + (this.localName ? (\" \" + this.localName) : \"\"));\n        let coders = [];\n        for (let i = 0; i < value.length; i++) {\n            coders.push(this.coder);\n        }\n        return pack(writer, coders, value);\n    }\n    decode(reader) {\n        let count = this.length;\n        if (count === -1) {\n            count = reader.readValue().toNumber();\n            // Check that there is *roughly* enough data to ensure\n            // stray random data is not being read as a length. Each\n            // slot requires at least 32 bytes for their value (or 32\n            // bytes as a link to the data). This could use a much\n            // tighter bound, but we are erroring on the side of safety.\n            if (count * 32 > reader._data.length) {\n                logger.throwError(\"insufficient data length\", Logger.errors.BUFFER_OVERRUN, {\n                    length: reader._data.length,\n                    count: count\n                });\n            }\n        }\n        let coders = [];\n        for (let i = 0; i < count; i++) {\n            coders.push(new AnonymousCoder(this.coder));\n        }\n        return reader.coerce(this.name, unpack(reader, coders));\n    }\n}\n"],"mappings":"AAAA;;AACA,SAASA,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AACA,SAASE,KAAT,EAAgBC,MAAhB,QAA8B,kBAA9B;AACA,SAASC,cAAT,QAA+B,aAA/B;AACA,OAAO,SAASC,IAAT,CAAcC,MAAd,EAAsBC,MAAtB,EAA8BC,MAA9B,EAAsC;EACzC,IAAIC,WAAW,GAAG,IAAlB;;EACA,IAAIC,KAAK,CAACC,OAAN,CAAcH,MAAd,CAAJ,EAA2B;IACvBC,WAAW,GAAGD,MAAd;EACH,CAFD,MAGK,IAAIA,MAAM,IAAI,OAAQA,MAAR,KAAoB,QAAlC,EAA4C;IAC7C,IAAII,MAAM,GAAG,EAAb;IACAH,WAAW,GAAGF,MAAM,CAACM,GAAP,CAAYC,KAAD,IAAW;MAChC,MAAMC,IAAI,GAAGD,KAAK,CAACE,SAAnB;;MACA,IAAI,CAACD,IAAL,EAAW;QACPd,MAAM,CAACgB,UAAP,CAAkB,uDAAlB,EAA2ElB,MAAM,CAACmB,MAAP,CAAcC,gBAAzF,EAA2G;UACvGC,QAAQ,EAAE,QAD6F;UAEvGN,KAAK,EAAEA,KAFgG;UAGvGO,KAAK,EAAEb;QAHgG,CAA3G;MAKH;;MACD,IAAII,MAAM,CAACG,IAAD,CAAV,EAAkB;QACdd,MAAM,CAACgB,UAAP,CAAkB,yDAAlB,EAA6ElB,MAAM,CAACmB,MAAP,CAAcC,gBAA3F,EAA6G;UACzGC,QAAQ,EAAE,QAD+F;UAEzGN,KAAK,EAAEA,KAFkG;UAGzGO,KAAK,EAAEb;QAHkG,CAA7G;MAKH;;MACDI,MAAM,CAACG,IAAD,CAAN,GAAe,IAAf;MACA,OAAOP,MAAM,CAACO,IAAD,CAAb;IACH,CAlBa,CAAd;EAmBH,CArBI,MAsBA;IACDd,MAAM,CAACqB,kBAAP,CAA0B,qBAA1B,EAAiD,OAAjD,EAA0Dd,MAA1D;EACH;;EACD,IAAID,MAAM,CAACgB,MAAP,KAAkBd,WAAW,CAACc,MAAlC,EAA0C;IACtCtB,MAAM,CAACqB,kBAAP,CAA0B,6BAA1B,EAAyD,OAAzD,EAAkEd,MAAlE;EACH;;EACD,IAAIgB,YAAY,GAAG,IAAIrB,MAAJ,CAAWG,MAAM,CAACmB,QAAlB,CAAnB;EACA,IAAIC,aAAa,GAAG,IAAIvB,MAAJ,CAAWG,MAAM,CAACmB,QAAlB,CAApB;EACA,IAAIE,WAAW,GAAG,EAAlB;EACApB,MAAM,CAACqB,OAAP,CAAe,CAACd,KAAD,EAAQe,KAAR,KAAkB;IAC7B,IAAIR,KAAK,GAAGZ,WAAW,CAACoB,KAAD,CAAvB;;IACA,IAAIf,KAAK,CAACgB,OAAV,EAAmB;MACf;MACA,IAAIC,aAAa,GAAGL,aAAa,CAACH,MAAlC,CAFe,CAGf;;MACAT,KAAK,CAACkB,MAAN,CAAaN,aAAb,EAA4BL,KAA5B,EAJe,CAKf;;MACA,IAAIY,UAAU,GAAGT,YAAY,CAACU,mBAAb,EAAjB;MACAP,WAAW,CAACQ,IAAZ,CAAkBC,UAAD,IAAgB;QAC7BH,UAAU,CAACG,UAAU,GAAGL,aAAd,CAAV;MACH,CAFD;IAGH,CAVD,MAWK;MACDjB,KAAK,CAACkB,MAAN,CAAaR,YAAb,EAA2BH,KAA3B;IACH;EACJ,CAhBD,EApCyC,CAqDzC;;EACAM,WAAW,CAACC,OAAZ,CAAqBS,IAAD,IAAU;IAAEA,IAAI,CAACb,YAAY,CAACD,MAAd,CAAJ;EAA4B,CAA5D;EACA,IAAIA,MAAM,GAAGjB,MAAM,CAACgC,YAAP,CAAoBd,YAApB,CAAb;EACAD,MAAM,IAAIjB,MAAM,CAACgC,YAAP,CAAoBZ,aAApB,CAAV;EACA,OAAOH,MAAP;AACH;AACD,OAAO,SAASgB,MAAT,CAAgBC,MAAhB,EAAwBjC,MAAxB,EAAgC;EACnC,IAAIC,MAAM,GAAG,EAAb,CADmC,CAEnC;;EACA,IAAIiC,UAAU,GAAGD,MAAM,CAACE,SAAP,CAAiB,CAAjB,CAAjB;EACAnC,MAAM,CAACqB,OAAP,CAAgBd,KAAD,IAAW;IACtB,IAAIO,KAAK,GAAG,IAAZ;;IACA,IAAIP,KAAK,CAACgB,OAAV,EAAmB;MACf,IAAIa,MAAM,GAAGH,MAAM,CAACI,SAAP,EAAb;MACA,IAAIC,YAAY,GAAGJ,UAAU,CAACC,SAAX,CAAqBC,MAAM,CAACG,QAAP,EAArB,CAAnB;;MACA,IAAI;QACAzB,KAAK,GAAGP,KAAK,CAACiC,MAAN,CAAaF,YAAb,CAAR;MACH,CAFD,CAGA,OAAOG,KAAP,EAAc;QACV;QACA,IAAIA,KAAK,CAACC,IAAN,KAAelD,MAAM,CAACmB,MAAP,CAAcgC,cAAjC,EAAiD;UAC7C,MAAMF,KAAN;QACH;;QACD3B,KAAK,GAAG2B,KAAR;QACA3B,KAAK,CAAC8B,QAAN,GAAiBrC,KAAK,CAACC,IAAvB;QACAM,KAAK,CAACN,IAAN,GAAaD,KAAK,CAACE,SAAnB;QACAK,KAAK,CAAC+B,IAAN,GAAatC,KAAK,CAACsC,IAAnB;MACH;IACJ,CAhBD,MAiBK;MACD,IAAI;QACA/B,KAAK,GAAGP,KAAK,CAACiC,MAAN,CAAaP,MAAb,CAAR;MACH,CAFD,CAGA,OAAOQ,KAAP,EAAc;QACV;QACA,IAAIA,KAAK,CAACC,IAAN,KAAelD,MAAM,CAACmB,MAAP,CAAcgC,cAAjC,EAAiD;UAC7C,MAAMF,KAAN;QACH;;QACD3B,KAAK,GAAG2B,KAAR;QACA3B,KAAK,CAAC8B,QAAN,GAAiBrC,KAAK,CAACC,IAAvB;QACAM,KAAK,CAACN,IAAN,GAAaD,KAAK,CAACE,SAAnB;QACAK,KAAK,CAAC+B,IAAN,GAAatC,KAAK,CAACsC,IAAnB;MACH;IACJ;;IACD,IAAI/B,KAAK,IAAIgC,SAAb,EAAwB;MACpB7C,MAAM,CAAC2B,IAAP,CAAYd,KAAZ;IACH;EACJ,CArCD,EAJmC,CA0CnC;;EACA,MAAMiC,WAAW,GAAG/C,MAAM,CAACgD,MAAP,CAAc,CAACC,KAAD,EAAQ1C,KAAR,KAAkB;IAChD,MAAMC,IAAI,GAAGD,KAAK,CAACE,SAAnB;;IACA,IAAID,IAAJ,EAAU;MACN,IAAI,CAACyC,KAAK,CAACzC,IAAD,CAAV,EAAkB;QACdyC,KAAK,CAACzC,IAAD,CAAL,GAAc,CAAd;MACH;;MACDyC,KAAK,CAACzC,IAAD,CAAL;IACH;;IACD,OAAOyC,KAAP;EACH,CATmB,EASjB,EATiB,CAApB,CA3CmC,CAqDnC;;EACAjD,MAAM,CAACqB,OAAP,CAAe,CAACd,KAAD,EAAQe,KAAR,KAAkB;IAC7B,IAAId,IAAI,GAAGD,KAAK,CAACE,SAAjB;;IACA,IAAI,CAACD,IAAD,IAASuC,WAAW,CAACvC,IAAD,CAAX,KAAsB,CAAnC,EAAsC;MAClC;IACH;;IACD,IAAIA,IAAI,KAAK,QAAb,EAAuB;MACnBA,IAAI,GAAG,SAAP;IACH;;IACD,IAAIP,MAAM,CAACO,IAAD,CAAN,IAAgB,IAApB,EAA0B;MACtB;IACH;;IACD,MAAMM,KAAK,GAAGb,MAAM,CAACqB,KAAD,CAApB;;IACA,IAAIR,KAAK,YAAYoC,KAArB,EAA4B;MACxBC,MAAM,CAACC,cAAP,CAAsBnD,MAAtB,EAA8BO,IAA9B,EAAoC;QAChC6C,UAAU,EAAE,IADoB;QAEhCC,GAAG,EAAE,MAAM;UAAE,MAAMxC,KAAN;QAAc;MAFK,CAApC;IAIH,CALD,MAMK;MACDb,MAAM,CAACO,IAAD,CAAN,GAAeM,KAAf;IACH;EACJ,CArBD;;EAsBA,KAAK,IAAIyC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGtD,MAAM,CAACe,MAA3B,EAAmCuC,CAAC,EAApC,EAAwC;IACpC,MAAMzC,KAAK,GAAGb,MAAM,CAACsD,CAAD,CAApB;;IACA,IAAIzC,KAAK,YAAYoC,KAArB,EAA4B;MACxBC,MAAM,CAACC,cAAP,CAAsBnD,MAAtB,EAA8BsD,CAA9B,EAAiC;QAC7BF,UAAU,EAAE,IADiB;QAE7BC,GAAG,EAAE,MAAM;UAAE,MAAMxC,KAAN;QAAc;MAFE,CAAjC;IAIH;EACJ;;EACD,OAAOqC,MAAM,CAACK,MAAP,CAAcvD,MAAd,CAAP;AACH;AACD,OAAO,MAAMwD,UAAN,SAAyB9D,KAAzB,CAA+B;EAClC+D,WAAW,CAACnD,KAAD,EAAQS,MAAR,EAAgBP,SAAhB,EAA2B;IAClC,MAAMoC,IAAI,GAAItC,KAAK,CAACsC,IAAN,GAAa,GAAb,IAAoB7B,MAAM,IAAI,CAAV,GAAcA,MAAd,GAAuB,EAA3C,IAAiD,GAA/D;IACA,MAAMO,OAAO,GAAIP,MAAM,KAAK,CAAC,CAAZ,IAAiBT,KAAK,CAACgB,OAAxC;IACA,MAAM,OAAN,EAAesB,IAAf,EAAqBpC,SAArB,EAAgCc,OAAhC;IACA,KAAKhB,KAAL,GAAaA,KAAb;IACA,KAAKS,MAAL,GAAcA,MAAd;EACH;;EACD2C,YAAY,GAAG;IACX;IACA,MAAMC,YAAY,GAAG,KAAKrD,KAAL,CAAWoD,YAAX,EAArB;IACA,MAAME,MAAM,GAAG,EAAf;;IACA,KAAK,IAAIN,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKvC,MAAzB,EAAiCuC,CAAC,EAAlC,EAAsC;MAClCM,MAAM,CAACjC,IAAP,CAAYgC,YAAZ;IACH;;IACD,OAAOC,MAAP;EACH;;EACDpC,MAAM,CAAC1B,MAAD,EAASe,KAAT,EAAgB;IAClB,IAAI,CAACX,KAAK,CAACC,OAAN,CAAcU,KAAd,CAAL,EAA2B;MACvB,KAAKgD,WAAL,CAAiB,sBAAjB,EAAyChD,KAAzC;IACH;;IACD,IAAIiD,KAAK,GAAG,KAAK/C,MAAjB;;IACA,IAAI+C,KAAK,KAAK,CAAC,CAAf,EAAkB;MACdA,KAAK,GAAGjD,KAAK,CAACE,MAAd;MACAjB,MAAM,CAACiE,UAAP,CAAkBlD,KAAK,CAACE,MAAxB;IACH;;IACDtB,MAAM,CAACuE,kBAAP,CAA0BnD,KAAK,CAACE,MAAhC,EAAwC+C,KAAxC,EAA+C,iBAAiB,KAAKtD,SAAL,GAAkB,MAAM,KAAKA,SAA7B,GAA0C,EAA3D,CAA/C;IACA,IAAIT,MAAM,GAAG,EAAb;;IACA,KAAK,IAAIuD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGzC,KAAK,CAACE,MAA1B,EAAkCuC,CAAC,EAAnC,EAAuC;MACnCvD,MAAM,CAAC4B,IAAP,CAAY,KAAKrB,KAAjB;IACH;;IACD,OAAOT,IAAI,CAACC,MAAD,EAASC,MAAT,EAAiBc,KAAjB,CAAX;EACH;;EACD0B,MAAM,CAACP,MAAD,EAAS;IACX,IAAI8B,KAAK,GAAG,KAAK/C,MAAjB;;IACA,IAAI+C,KAAK,KAAK,CAAC,CAAf,EAAkB;MACdA,KAAK,GAAG9B,MAAM,CAACI,SAAP,GAAmBE,QAAnB,EAAR,CADc,CAEd;MACA;MACA;MACA;MACA;;MACA,IAAIwB,KAAK,GAAG,EAAR,GAAa9B,MAAM,CAACiC,KAAP,CAAalD,MAA9B,EAAsC;QAClCtB,MAAM,CAACgB,UAAP,CAAkB,0BAAlB,EAA8ClB,MAAM,CAACmB,MAAP,CAAcgC,cAA5D,EAA4E;UACxE3B,MAAM,EAAEiB,MAAM,CAACiC,KAAP,CAAalD,MADmD;UAExE+C,KAAK,EAAEA;QAFiE,CAA5E;MAIH;IACJ;;IACD,IAAI/D,MAAM,GAAG,EAAb;;IACA,KAAK,IAAIuD,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGQ,KAApB,EAA2BR,CAAC,EAA5B,EAAgC;MAC5BvD,MAAM,CAAC4B,IAAP,CAAY,IAAI/B,cAAJ,CAAmB,KAAKU,KAAxB,CAAZ;IACH;;IACD,OAAO0B,MAAM,CAACkC,MAAP,CAAc,KAAK3D,IAAnB,EAAyBwB,MAAM,CAACC,MAAD,EAASjC,MAAT,CAA/B,CAAP;EACH;;AAtDiC"},"metadata":{},"sourceType":"module"}