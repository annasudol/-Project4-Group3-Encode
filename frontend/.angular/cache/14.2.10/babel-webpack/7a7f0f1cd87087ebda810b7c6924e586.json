{"ast":null,"code":"\"use strict\";\n\nimport aes from \"aes-js\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { Description } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getPassword, looseArrayify, searchPath } from \"./utils\";\nexport class CrowdsaleAccount extends Description {\n  isCrowdsaleAccount(value) {\n    return !!(value && value._isCrowdsaleAccount);\n  }\n\n} // See: https://github.com/ethereum/pyethsaletool\n\nexport function decrypt(json, password) {\n  const data = JSON.parse(json);\n  password = getPassword(password); // Ethereum Address\n\n  const ethaddr = getAddress(searchPath(data, \"ethaddr\")); // Encrypted Seed\n\n  const encseed = looseArrayify(searchPath(data, \"encseed\"));\n\n  if (!encseed || encseed.length % 16 !== 0) {\n    logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n  }\n\n  const key = arrayify(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n  const iv = encseed.slice(0, 16);\n  const encryptedSeed = encseed.slice(16); // Decrypt the seed\n\n  const aesCbc = new aes.ModeOfOperation.cbc(key, iv);\n  const seed = aes.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed))); // This wallet format is weird... Convert the binary encoded hex to a string.\n\n  let seedHex = \"\";\n\n  for (let i = 0; i < seed.length; i++) {\n    seedHex += String.fromCharCode(seed[i]);\n  }\n\n  const seedHexBytes = toUtf8Bytes(seedHex);\n  const privateKey = keccak256(seedHexBytes);\n  return new CrowdsaleAccount({\n    _isCrowdsaleAccount: true,\n    address: ethaddr,\n    privateKey: privateKey\n  });\n}","map":{"version":3,"names":["aes","getAddress","arrayify","keccak256","pbkdf2","toUtf8Bytes","Description","Logger","version","logger","getPassword","looseArrayify","searchPath","CrowdsaleAccount","isCrowdsaleAccount","value","_isCrowdsaleAccount","decrypt","json","password","data","JSON","parse","ethaddr","encseed","length","throwArgumentError","key","slice","iv","encryptedSeed","aesCbc","ModeOfOperation","cbc","seed","padding","pkcs7","strip","seedHex","i","String","fromCharCode","seedHexBytes","privateKey","address"],"sources":["/Users/annasudol/Documents/encode/Project4-Group3-Encode/frontend/node_modules/@ethersproject/json-wallets/lib.esm/crowdsale.js"],"sourcesContent":["\"use strict\";\nimport aes from \"aes-js\";\nimport { getAddress } from \"@ethersproject/address\";\nimport { arrayify } from \"@ethersproject/bytes\";\nimport { keccak256 } from \"@ethersproject/keccak256\";\nimport { pbkdf2 } from \"@ethersproject/pbkdf2\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { Description } from \"@ethersproject/properties\";\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\nimport { getPassword, looseArrayify, searchPath } from \"./utils\";\nexport class CrowdsaleAccount extends Description {\n    isCrowdsaleAccount(value) {\n        return !!(value && value._isCrowdsaleAccount);\n    }\n}\n// See: https://github.com/ethereum/pyethsaletool\nexport function decrypt(json, password) {\n    const data = JSON.parse(json);\n    password = getPassword(password);\n    // Ethereum Address\n    const ethaddr = getAddress(searchPath(data, \"ethaddr\"));\n    // Encrypted Seed\n    const encseed = looseArrayify(searchPath(data, \"encseed\"));\n    if (!encseed || (encseed.length % 16) !== 0) {\n        logger.throwArgumentError(\"invalid encseed\", \"json\", json);\n    }\n    const key = arrayify(pbkdf2(password, password, 2000, 32, \"sha256\")).slice(0, 16);\n    const iv = encseed.slice(0, 16);\n    const encryptedSeed = encseed.slice(16);\n    // Decrypt the seed\n    const aesCbc = new aes.ModeOfOperation.cbc(key, iv);\n    const seed = aes.padding.pkcs7.strip(arrayify(aesCbc.decrypt(encryptedSeed)));\n    // This wallet format is weird... Convert the binary encoded hex to a string.\n    let seedHex = \"\";\n    for (let i = 0; i < seed.length; i++) {\n        seedHex += String.fromCharCode(seed[i]);\n    }\n    const seedHexBytes = toUtf8Bytes(seedHex);\n    const privateKey = keccak256(seedHexBytes);\n    return new CrowdsaleAccount({\n        _isCrowdsaleAccount: true,\n        address: ethaddr,\n        privateKey: privateKey\n    });\n}\n"],"mappings":"AAAA;;AACA,OAAOA,GAAP,MAAgB,QAAhB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,QAAT,QAAyB,sBAAzB;AACA,SAASC,SAAT,QAA0B,0BAA1B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,WAAT,QAA4B,2BAA5B;AACA,SAASC,MAAT,QAAuB,uBAAvB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,MAAMC,MAAM,GAAG,IAAIF,MAAJ,CAAWC,OAAX,CAAf;AACA,SAASE,WAAT,EAAsBC,aAAtB,EAAqCC,UAArC,QAAuD,SAAvD;AACA,OAAO,MAAMC,gBAAN,SAA+BP,WAA/B,CAA2C;EAC9CQ,kBAAkB,CAACC,KAAD,EAAQ;IACtB,OAAO,CAAC,EAAEA,KAAK,IAAIA,KAAK,CAACC,mBAAjB,CAAR;EACH;;AAH6C,C,CAKlD;;AACA,OAAO,SAASC,OAAT,CAAiBC,IAAjB,EAAuBC,QAAvB,EAAiC;EACpC,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAL,CAAWJ,IAAX,CAAb;EACAC,QAAQ,GAAGT,WAAW,CAACS,QAAD,CAAtB,CAFoC,CAGpC;;EACA,MAAMI,OAAO,GAAGtB,UAAU,CAACW,UAAU,CAACQ,IAAD,EAAO,SAAP,CAAX,CAA1B,CAJoC,CAKpC;;EACA,MAAMI,OAAO,GAAGb,aAAa,CAACC,UAAU,CAACQ,IAAD,EAAO,SAAP,CAAX,CAA7B;;EACA,IAAI,CAACI,OAAD,IAAaA,OAAO,CAACC,MAAR,GAAiB,EAAlB,KAA0B,CAA1C,EAA6C;IACzChB,MAAM,CAACiB,kBAAP,CAA0B,iBAA1B,EAA6C,MAA7C,EAAqDR,IAArD;EACH;;EACD,MAAMS,GAAG,GAAGzB,QAAQ,CAACE,MAAM,CAACe,QAAD,EAAWA,QAAX,EAAqB,IAArB,EAA2B,EAA3B,EAA+B,QAA/B,CAAP,CAAR,CAAyDS,KAAzD,CAA+D,CAA/D,EAAkE,EAAlE,CAAZ;EACA,MAAMC,EAAE,GAAGL,OAAO,CAACI,KAAR,CAAc,CAAd,EAAiB,EAAjB,CAAX;EACA,MAAME,aAAa,GAAGN,OAAO,CAACI,KAAR,CAAc,EAAd,CAAtB,CAZoC,CAapC;;EACA,MAAMG,MAAM,GAAG,IAAI/B,GAAG,CAACgC,eAAJ,CAAoBC,GAAxB,CAA4BN,GAA5B,EAAiCE,EAAjC,CAAf;EACA,MAAMK,IAAI,GAAGlC,GAAG,CAACmC,OAAJ,CAAYC,KAAZ,CAAkBC,KAAlB,CAAwBnC,QAAQ,CAAC6B,MAAM,CAACd,OAAP,CAAea,aAAf,CAAD,CAAhC,CAAb,CAfoC,CAgBpC;;EACA,IAAIQ,OAAO,GAAG,EAAd;;EACA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACT,MAAzB,EAAiCc,CAAC,EAAlC,EAAsC;IAClCD,OAAO,IAAIE,MAAM,CAACC,YAAP,CAAoBP,IAAI,CAACK,CAAD,CAAxB,CAAX;EACH;;EACD,MAAMG,YAAY,GAAGrC,WAAW,CAACiC,OAAD,CAAhC;EACA,MAAMK,UAAU,GAAGxC,SAAS,CAACuC,YAAD,CAA5B;EACA,OAAO,IAAI7B,gBAAJ,CAAqB;IACxBG,mBAAmB,EAAE,IADG;IAExB4B,OAAO,EAAErB,OAFe;IAGxBoB,UAAU,EAAEA;EAHY,CAArB,CAAP;AAKH"},"metadata":{},"sourceType":"module"}